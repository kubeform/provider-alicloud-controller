/*
Copyright AppsCode Inc. and Contributors

Licensed under the AppsCode Community License 1.0.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://github.com/appscode/licenses/raw/1.0.0/AppsCode-Community-1.0.0.md

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"sync"
	"time"

	alicloud "github.com/aliyun/terraform-provider-alicloud/alicloud"
	"github.com/gobuffalo/flect"
	tfschema "github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	auditlib "go.bytebuilders.dev/audit/lib"
	arv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	informers "k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	"k8s.io/client-go/tools/cache"
	"k8s.io/klog/v2"
	actiontrailv1alpha1 "kubeform.dev/provider-alicloud-api/apis/actiontrail/v1alpha1"
	adbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/adb/v1alpha1"
	albv1alpha1 "kubeform.dev/provider-alicloud-api/apis/alb/v1alpha1"
	alidnsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/alidns/v1alpha1"
	alikafkav1alpha1 "kubeform.dev/provider-alicloud-api/apis/alikafka/v1alpha1"
	amqpv1alpha1 "kubeform.dev/provider-alicloud-api/apis/amqp/v1alpha1"
	apigatewayv1alpha1 "kubeform.dev/provider-alicloud-api/apis/apigateway/v1alpha1"
	armsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/arms/v1alpha1"
	autov1alpha1 "kubeform.dev/provider-alicloud-api/apis/auto/v1alpha1"
	bastionhostv1alpha1 "kubeform.dev/provider-alicloud-api/apis/bastionhost/v1alpha1"
	brainv1alpha1 "kubeform.dev/provider-alicloud-api/apis/brain/v1alpha1"
	casv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cas/v1alpha1"
	cassandrav1alpha1 "kubeform.dev/provider-alicloud-api/apis/cassandra/v1alpha1"
	cddcv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cddc/v1alpha1"
	cdnv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cdn/v1alpha1"
	cenv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cen/v1alpha1"
	clickv1alpha1 "kubeform.dev/provider-alicloud-api/apis/click/v1alpha1"
	cloudv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloud/v1alpha1"
	cloudauthv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cloudauth/v1alpha1"
	cmsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cms/v1alpha1"
	commonv1alpha1 "kubeform.dev/provider-alicloud-api/apis/common/v1alpha1"
	configv1alpha1 "kubeform.dev/provider-alicloud-api/apis/config/v1alpha1"
	containerv1alpha1 "kubeform.dev/provider-alicloud-api/apis/container/v1alpha1"
	copyv1alpha1 "kubeform.dev/provider-alicloud-api/apis/copy/v1alpha1"
	crv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cr/v1alpha1"
	csv1alpha1 "kubeform.dev/provider-alicloud-api/apis/cs/v1alpha1"
	datav1alpha1 "kubeform.dev/provider-alicloud-api/apis/data/v1alpha1"
	databasev1alpha1 "kubeform.dev/provider-alicloud-api/apis/database/v1alpha1"
	datahubv1alpha1 "kubeform.dev/provider-alicloud-api/apis/datahub/v1alpha1"
	dbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/db/v1alpha1"
	dbfsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/dbfs/v1alpha1"
	dcdnv1alpha1 "kubeform.dev/provider-alicloud-api/apis/dcdn/v1alpha1"
	ddosbgpv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ddosbgp/v1alpha1"
	ddoscoov1alpha1 "kubeform.dev/provider-alicloud-api/apis/ddoscoo/v1alpha1"
	dfsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/dfs/v1alpha1"
	directv1alpha1 "kubeform.dev/provider-alicloud-api/apis/direct/v1alpha1"
	diskv1alpha1 "kubeform.dev/provider-alicloud-api/apis/disk/v1alpha1"
	dmsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/dms/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/dns/v1alpha1"
	drdsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/drds/v1alpha1"
	dtsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/dts/v1alpha1"
	eaisv1alpha1 "kubeform.dev/provider-alicloud-api/apis/eais/v1alpha1"
	ecdv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecd/v1alpha1"
	eciv1alpha1 "kubeform.dev/provider-alicloud-api/apis/eci/v1alpha1"
	ecpv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecp/v1alpha1"
	ecsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ecs/v1alpha1"
	edasv1alpha1 "kubeform.dev/provider-alicloud-api/apis/edas/v1alpha1"
	ehpcv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ehpc/v1alpha1"
	eipv1alpha1 "kubeform.dev/provider-alicloud-api/apis/eip/v1alpha1"
	eipanycastv1alpha1 "kubeform.dev/provider-alicloud-api/apis/eipanycast/v1alpha1"
	elasticsearchv1alpha1 "kubeform.dev/provider-alicloud-api/apis/elasticsearch/v1alpha1"
	emrv1alpha1 "kubeform.dev/provider-alicloud-api/apis/emr/v1alpha1"
	ensv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ens/v1alpha1"
	essv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ess/v1alpha1"
	eventv1alpha1 "kubeform.dev/provider-alicloud-api/apis/event/v1alpha1"
	expressv1alpha1 "kubeform.dev/provider-alicloud-api/apis/express/v1alpha1"
	fcv1alpha1 "kubeform.dev/provider-alicloud-api/apis/fc/v1alpha1"
	fnfv1alpha1 "kubeform.dev/provider-alicloud-api/apis/fnf/v1alpha1"
	forwardv1alpha1 "kubeform.dev/provider-alicloud-api/apis/forward/v1alpha1"
	gav1alpha1 "kubeform.dev/provider-alicloud-api/apis/ga/v1alpha1"
	gpdbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/gpdb/v1alpha1"
	graphv1alpha1 "kubeform.dev/provider-alicloud-api/apis/graph/v1alpha1"
	havipv1alpha1 "kubeform.dev/provider-alicloud-api/apis/havip/v1alpha1"
	hbasev1alpha1 "kubeform.dev/provider-alicloud-api/apis/hbase/v1alpha1"
	hbrv1alpha1 "kubeform.dev/provider-alicloud-api/apis/hbr/v1alpha1"
	imagev1alpha1 "kubeform.dev/provider-alicloud-api/apis/image/v1alpha1"
	immv1alpha1 "kubeform.dev/provider-alicloud-api/apis/imm/v1alpha1"
	impv1alpha1 "kubeform.dev/provider-alicloud-api/apis/imp/v1alpha1"
	instancev1alpha1 "kubeform.dev/provider-alicloud-api/apis/instance/v1alpha1"
	iotv1alpha1 "kubeform.dev/provider-alicloud-api/apis/iot/v1alpha1"
	keyv1alpha1 "kubeform.dev/provider-alicloud-api/apis/key/v1alpha1"
	kmsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/kms/v1alpha1"
	kvstorev1alpha1 "kubeform.dev/provider-alicloud-api/apis/kvstore/v1alpha1"
	launchv1alpha1 "kubeform.dev/provider-alicloud-api/apis/launch/v1alpha1"
	lindormv1alpha1 "kubeform.dev/provider-alicloud-api/apis/lindorm/v1alpha1"
	logv1alpha1 "kubeform.dev/provider-alicloud-api/apis/log/v1alpha1"
	logtailv1alpha1 "kubeform.dev/provider-alicloud-api/apis/logtail/v1alpha1"
	marketv1alpha1 "kubeform.dev/provider-alicloud-api/apis/market/v1alpha1"
	maxcomputev1alpha1 "kubeform.dev/provider-alicloud-api/apis/maxcompute/v1alpha1"
	mhubv1alpha1 "kubeform.dev/provider-alicloud-api/apis/mhub/v1alpha1"
	mnsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/mns/v1alpha1"
	mongodbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/mongodb/v1alpha1"
	mscv1alpha1 "kubeform.dev/provider-alicloud-api/apis/msc/v1alpha1"
	msev1alpha1 "kubeform.dev/provider-alicloud-api/apis/mse/v1alpha1"
	nasv1alpha1 "kubeform.dev/provider-alicloud-api/apis/nas/v1alpha1"
	natv1alpha1 "kubeform.dev/provider-alicloud-api/apis/nat/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-alicloud-api/apis/network/v1alpha1"
	onsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ons/v1alpha1"
	oosv1alpha1 "kubeform.dev/provider-alicloud-api/apis/oos/v1alpha1"
	openv1alpha1 "kubeform.dev/provider-alicloud-api/apis/open/v1alpha1"
	ossv1alpha1 "kubeform.dev/provider-alicloud-api/apis/oss/v1alpha1"
	otsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ots/v1alpha1"
	polardbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/polardb/v1alpha1"
	privatelinkv1alpha1 "kubeform.dev/provider-alicloud-api/apis/privatelink/v1alpha1"
	pvtzv1alpha1 "kubeform.dev/provider-alicloud-api/apis/pvtz/v1alpha1"
	quickv1alpha1 "kubeform.dev/provider-alicloud-api/apis/quick/v1alpha1"
	quotasv1alpha1 "kubeform.dev/provider-alicloud-api/apis/quotas/v1alpha1"
	ramv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ram/v1alpha1"
	rdcv1alpha1 "kubeform.dev/provider-alicloud-api/apis/rdc/v1alpha1"
	rdsv1alpha1 "kubeform.dev/provider-alicloud-api/apis/rds/v1alpha1"
	reservedv1alpha1 "kubeform.dev/provider-alicloud-api/apis/reserved/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-alicloud-api/apis/resource/v1alpha1"
	rosv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ros/v1alpha1"
	routev1alpha1 "kubeform.dev/provider-alicloud-api/apis/route/v1alpha1"
	routerv1alpha1 "kubeform.dev/provider-alicloud-api/apis/router/v1alpha1"
	saev1alpha1 "kubeform.dev/provider-alicloud-api/apis/sae/v1alpha1"
	sagv1alpha1 "kubeform.dev/provider-alicloud-api/apis/sag/v1alpha1"
	scdnv1alpha1 "kubeform.dev/provider-alicloud-api/apis/scdn/v1alpha1"
	sddpv1alpha1 "kubeform.dev/provider-alicloud-api/apis/sddp/v1alpha1"
	securityv1alpha1 "kubeform.dev/provider-alicloud-api/apis/security/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-alicloud-api/apis/service/v1alpha1"
	simplev1alpha1 "kubeform.dev/provider-alicloud-api/apis/simple/v1alpha1"
	slbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/slb/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-alicloud-api/apis/snapshot/v1alpha1"
	snatv1alpha1 "kubeform.dev/provider-alicloud-api/apis/snat/v1alpha1"
	sslv1alpha1 "kubeform.dev/provider-alicloud-api/apis/ssl/v1alpha1"
	subnetv1alpha1 "kubeform.dev/provider-alicloud-api/apis/subnet/v1alpha1"
	tsdbv1alpha1 "kubeform.dev/provider-alicloud-api/apis/tsdb/v1alpha1"
	videov1alpha1 "kubeform.dev/provider-alicloud-api/apis/video/v1alpha1"
	vodv1alpha1 "kubeform.dev/provider-alicloud-api/apis/vod/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpc/v1alpha1"
	vpnv1alpha1 "kubeform.dev/provider-alicloud-api/apis/vpn/v1alpha1"
	vswitchv1alpha1 "kubeform.dev/provider-alicloud-api/apis/vswitch/v1alpha1"
	wafv1alpha1 "kubeform.dev/provider-alicloud-api/apis/waf/v1alpha1"
	yundunv1alpha1 "kubeform.dev/provider-alicloud-api/apis/yundun/v1alpha1"
	controllersactiontrail "kubeform.dev/provider-alicloud-controller/controllers/actiontrail"
	controllersadb "kubeform.dev/provider-alicloud-controller/controllers/adb"
	controllersalb "kubeform.dev/provider-alicloud-controller/controllers/alb"
	controllersalidns "kubeform.dev/provider-alicloud-controller/controllers/alidns"
	controllersalikafka "kubeform.dev/provider-alicloud-controller/controllers/alikafka"
	controllersamqp "kubeform.dev/provider-alicloud-controller/controllers/amqp"
	controllersapigateway "kubeform.dev/provider-alicloud-controller/controllers/apigateway"
	controllersarms "kubeform.dev/provider-alicloud-controller/controllers/arms"
	controllersauto "kubeform.dev/provider-alicloud-controller/controllers/auto"
	controllersbastionhost "kubeform.dev/provider-alicloud-controller/controllers/bastionhost"
	controllersbrain "kubeform.dev/provider-alicloud-controller/controllers/brain"
	controllerscas "kubeform.dev/provider-alicloud-controller/controllers/cas"
	controllerscassandra "kubeform.dev/provider-alicloud-controller/controllers/cassandra"
	controllerscddc "kubeform.dev/provider-alicloud-controller/controllers/cddc"
	controllerscdn "kubeform.dev/provider-alicloud-controller/controllers/cdn"
	controllerscen "kubeform.dev/provider-alicloud-controller/controllers/cen"
	controllersclick "kubeform.dev/provider-alicloud-controller/controllers/click"
	controllerscloud "kubeform.dev/provider-alicloud-controller/controllers/cloud"
	controllerscloudauth "kubeform.dev/provider-alicloud-controller/controllers/cloudauth"
	controllerscms "kubeform.dev/provider-alicloud-controller/controllers/cms"
	controllerscommon "kubeform.dev/provider-alicloud-controller/controllers/common"
	controllersconfig "kubeform.dev/provider-alicloud-controller/controllers/config"
	controllerscontainer "kubeform.dev/provider-alicloud-controller/controllers/container"
	controllerscopy "kubeform.dev/provider-alicloud-controller/controllers/copy"
	controllerscr "kubeform.dev/provider-alicloud-controller/controllers/cr"
	controllerscs "kubeform.dev/provider-alicloud-controller/controllers/cs"
	controllersdata "kubeform.dev/provider-alicloud-controller/controllers/data"
	controllersdatabase "kubeform.dev/provider-alicloud-controller/controllers/database"
	controllersdatahub "kubeform.dev/provider-alicloud-controller/controllers/datahub"
	controllersdb "kubeform.dev/provider-alicloud-controller/controllers/db"
	controllersdbfs "kubeform.dev/provider-alicloud-controller/controllers/dbfs"
	controllersdcdn "kubeform.dev/provider-alicloud-controller/controllers/dcdn"
	controllersddosbgp "kubeform.dev/provider-alicloud-controller/controllers/ddosbgp"
	controllersddoscoo "kubeform.dev/provider-alicloud-controller/controllers/ddoscoo"
	controllersdfs "kubeform.dev/provider-alicloud-controller/controllers/dfs"
	controllersdirect "kubeform.dev/provider-alicloud-controller/controllers/direct"
	controllersdisk "kubeform.dev/provider-alicloud-controller/controllers/disk"
	controllersdms "kubeform.dev/provider-alicloud-controller/controllers/dms"
	controllersdns "kubeform.dev/provider-alicloud-controller/controllers/dns"
	controllersdrds "kubeform.dev/provider-alicloud-controller/controllers/drds"
	controllersdts "kubeform.dev/provider-alicloud-controller/controllers/dts"
	controllerseais "kubeform.dev/provider-alicloud-controller/controllers/eais"
	controllersecd "kubeform.dev/provider-alicloud-controller/controllers/ecd"
	controllerseci "kubeform.dev/provider-alicloud-controller/controllers/eci"
	controllersecp "kubeform.dev/provider-alicloud-controller/controllers/ecp"
	controllersecs "kubeform.dev/provider-alicloud-controller/controllers/ecs"
	controllersedas "kubeform.dev/provider-alicloud-controller/controllers/edas"
	controllersehpc "kubeform.dev/provider-alicloud-controller/controllers/ehpc"
	controllerseip "kubeform.dev/provider-alicloud-controller/controllers/eip"
	controllerseipanycast "kubeform.dev/provider-alicloud-controller/controllers/eipanycast"
	controllerselasticsearch "kubeform.dev/provider-alicloud-controller/controllers/elasticsearch"
	controllersemr "kubeform.dev/provider-alicloud-controller/controllers/emr"
	controllersens "kubeform.dev/provider-alicloud-controller/controllers/ens"
	controllersess "kubeform.dev/provider-alicloud-controller/controllers/ess"
	controllersevent "kubeform.dev/provider-alicloud-controller/controllers/event"
	controllersexpress "kubeform.dev/provider-alicloud-controller/controllers/express"
	controllersfc "kubeform.dev/provider-alicloud-controller/controllers/fc"
	controllersfnf "kubeform.dev/provider-alicloud-controller/controllers/fnf"
	controllersforward "kubeform.dev/provider-alicloud-controller/controllers/forward"
	controllersga "kubeform.dev/provider-alicloud-controller/controllers/ga"
	controllersgpdb "kubeform.dev/provider-alicloud-controller/controllers/gpdb"
	controllersgraph "kubeform.dev/provider-alicloud-controller/controllers/graph"
	controllershavip "kubeform.dev/provider-alicloud-controller/controllers/havip"
	controllershbase "kubeform.dev/provider-alicloud-controller/controllers/hbase"
	controllershbr "kubeform.dev/provider-alicloud-controller/controllers/hbr"
	controllersimage "kubeform.dev/provider-alicloud-controller/controllers/image"
	controllersimm "kubeform.dev/provider-alicloud-controller/controllers/imm"
	controllersimp "kubeform.dev/provider-alicloud-controller/controllers/imp"
	controllersinstance "kubeform.dev/provider-alicloud-controller/controllers/instance"
	controllersiot "kubeform.dev/provider-alicloud-controller/controllers/iot"
	controllerskey "kubeform.dev/provider-alicloud-controller/controllers/key"
	controllerskms "kubeform.dev/provider-alicloud-controller/controllers/kms"
	controllerskvstore "kubeform.dev/provider-alicloud-controller/controllers/kvstore"
	controllerslaunch "kubeform.dev/provider-alicloud-controller/controllers/launch"
	controllerslindorm "kubeform.dev/provider-alicloud-controller/controllers/lindorm"
	controllerslog "kubeform.dev/provider-alicloud-controller/controllers/log"
	controllerslogtail "kubeform.dev/provider-alicloud-controller/controllers/logtail"
	controllersmarket "kubeform.dev/provider-alicloud-controller/controllers/market"
	controllersmaxcompute "kubeform.dev/provider-alicloud-controller/controllers/maxcompute"
	controllersmhub "kubeform.dev/provider-alicloud-controller/controllers/mhub"
	controllersmns "kubeform.dev/provider-alicloud-controller/controllers/mns"
	controllersmongodb "kubeform.dev/provider-alicloud-controller/controllers/mongodb"
	controllersmsc "kubeform.dev/provider-alicloud-controller/controllers/msc"
	controllersmse "kubeform.dev/provider-alicloud-controller/controllers/mse"
	controllersnas "kubeform.dev/provider-alicloud-controller/controllers/nas"
	controllersnat "kubeform.dev/provider-alicloud-controller/controllers/nat"
	controllersnetwork "kubeform.dev/provider-alicloud-controller/controllers/network"
	controllersons "kubeform.dev/provider-alicloud-controller/controllers/ons"
	controllersoos "kubeform.dev/provider-alicloud-controller/controllers/oos"
	controllersopen "kubeform.dev/provider-alicloud-controller/controllers/open"
	controllersoss "kubeform.dev/provider-alicloud-controller/controllers/oss"
	controllersots "kubeform.dev/provider-alicloud-controller/controllers/ots"
	controllerspolardb "kubeform.dev/provider-alicloud-controller/controllers/polardb"
	controllersprivatelink "kubeform.dev/provider-alicloud-controller/controllers/privatelink"
	controllerspvtz "kubeform.dev/provider-alicloud-controller/controllers/pvtz"
	controllersquick "kubeform.dev/provider-alicloud-controller/controllers/quick"
	controllersquotas "kubeform.dev/provider-alicloud-controller/controllers/quotas"
	controllersram "kubeform.dev/provider-alicloud-controller/controllers/ram"
	controllersrdc "kubeform.dev/provider-alicloud-controller/controllers/rdc"
	controllersrds "kubeform.dev/provider-alicloud-controller/controllers/rds"
	controllersreserved "kubeform.dev/provider-alicloud-controller/controllers/reserved"
	controllersresource "kubeform.dev/provider-alicloud-controller/controllers/resource"
	controllersros "kubeform.dev/provider-alicloud-controller/controllers/ros"
	controllersroute "kubeform.dev/provider-alicloud-controller/controllers/route"
	controllersrouter "kubeform.dev/provider-alicloud-controller/controllers/router"
	controllerssae "kubeform.dev/provider-alicloud-controller/controllers/sae"
	controllerssag "kubeform.dev/provider-alicloud-controller/controllers/sag"
	controllersscdn "kubeform.dev/provider-alicloud-controller/controllers/scdn"
	controllerssddp "kubeform.dev/provider-alicloud-controller/controllers/sddp"
	controllerssecurity "kubeform.dev/provider-alicloud-controller/controllers/security"
	controllersservice "kubeform.dev/provider-alicloud-controller/controllers/service"
	controllerssimple "kubeform.dev/provider-alicloud-controller/controllers/simple"
	controllersslb "kubeform.dev/provider-alicloud-controller/controllers/slb"
	controllerssnapshot "kubeform.dev/provider-alicloud-controller/controllers/snapshot"
	controllerssnat "kubeform.dev/provider-alicloud-controller/controllers/snat"
	controllersssl "kubeform.dev/provider-alicloud-controller/controllers/ssl"
	controllerssubnet "kubeform.dev/provider-alicloud-controller/controllers/subnet"
	controllerstsdb "kubeform.dev/provider-alicloud-controller/controllers/tsdb"
	controllersvideo "kubeform.dev/provider-alicloud-controller/controllers/video"
	controllersvod "kubeform.dev/provider-alicloud-controller/controllers/vod"
	controllersvpc "kubeform.dev/provider-alicloud-controller/controllers/vpc"
	controllersvpn "kubeform.dev/provider-alicloud-controller/controllers/vpn"
	controllersvswitch "kubeform.dev/provider-alicloud-controller/controllers/vswitch"
	controllerswaf "kubeform.dev/provider-alicloud-controller/controllers/waf"
	controllersyundun "kubeform.dev/provider-alicloud-controller/controllers/yundun"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

var _provider = alicloud.Provider().(*tfschema.Provider)

var runningControllers = struct {
	sync.RWMutex
	mp map[schema.GroupVersionKind]bool
}{mp: make(map[schema.GroupVersionKind]bool)}

func watchCRD(ctx context.Context, crdClient *clientset.Clientset, vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, stopCh <-chan struct{}, mgr manager.Manager, auditor *auditlib.EventPublisher, restrictToNamespace string) error {
	informerFactory := informers.NewSharedInformerFactory(crdClient, time.Second*30)
	i := informerFactory.Apiextensions().V1().CustomResourceDefinitions().Informer()
	l := informerFactory.Apiextensions().V1().CustomResourceDefinitions().Lister()

	i.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			var key string
			key, err := cache.MetaNamespaceKeyFunc(obj)
			if err != nil {
				klog.Error(err)
				return
			}

			_, name, err := cache.SplitMetaNamespaceKey(key)
			if err != nil {
				klog.Error(err)
				return
			}

			crd, err := l.Get(name)
			if err != nil {
				klog.Error(err)
				return
			}
			if strings.Contains(crd.Spec.Group, "alicloud.kubeform.com") {
				gvk := schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Versions[0].Name,
					Kind:    crd.Spec.Names.Kind,
				}

				// check whether this gvk came before, if no then start the controller
				runningControllers.RLock()
				_, ok := runningControllers.mp[gvk]
				runningControllers.RUnlock()

				if !ok {
					runningControllers.Lock()
					runningControllers.mp[gvk] = true
					runningControllers.Unlock()

					if enableValidatingWebhook {
						// add dynamic ValidatingWebhookConfiguration

						// create empty VWC if the group has come for the first time
						err := createEmptyVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						// update
						err = updateVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						err = SetupWebhook(mgr, gvk)
						if err != nil {
							setupLog.Error(err, "unable to enable webhook")
							os.Exit(1)
						}
					}

					err = SetupManager(ctx, mgr, gvk, auditor, restrictToNamespace)
					if err != nil {
						setupLog.Error(err, "unable to start manager")
						os.Exit(1)
					}
				}
			}
		},
	})

	informerFactory.Start(stopCh)

	return nil
}

func createEmptyVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-")
	_, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err == nil || !(errors.IsNotFound(err)) {
		return err
	}

	emptyVWC := &arv1.ValidatingWebhookConfiguration{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ValidatingWebhookConfiguration",
			APIVersion: "admissionregistration.k8s.io/v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-"),
			Labels: map[string]string{
				"app.kubernetes.io/instance": "alicloud.kubeform.com",
				"app.kubernetes.io/part-of":  "kubeform.com",
			},
		},
	}
	_, err = vwcClient.ValidatingWebhookConfigurations().Create(context.TODO(), emptyVWC, metav1.CreateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func updateVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-")
	vwc, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	path := "/validate-" + strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-v1alpha1-" + strings.ToLower(gvk.Kind)
	fail := arv1.Fail
	sideEffects := arv1.SideEffectClassNone
	admissionReviewVersions := []string{"v1beta1"}

	rules := []arv1.RuleWithOperations{
		{
			Operations: []arv1.OperationType{
				arv1.Delete,
				arv1.Update,
			},
			Rule: arv1.Rule{
				APIGroups:   []string{strings.ToLower(gvk.Group)},
				APIVersions: []string{gvk.Version},
				Resources:   []string{strings.ToLower(flect.Pluralize(gvk.Kind))},
			},
		},
	}

	data, err := ioutil.ReadFile("/tmp/k8s-webhook-server/serving-certs/ca.crt")
	if err != nil {
		return err
	}

	name := strings.ToLower(gvk.Kind) + "." + gvk.Group
	for _, webhook := range vwc.Webhooks {
		if webhook.Name == name {
			return nil
		}
	}

	newWebhook := arv1.ValidatingWebhook{
		Name: name,
		ClientConfig: arv1.WebhookClientConfig{
			Service: &arv1.ServiceReference{
				Namespace: webhookNamespace,
				Name:      webhookName,
				Path:      &path,
			},
			CABundle: data,
		},
		Rules:                   rules,
		FailurePolicy:           &fail,
		SideEffects:             &sideEffects,
		AdmissionReviewVersions: admissionReviewVersions,
	}

	vwc.Webhooks = append(vwc.Webhooks, newWebhook)

	_, err = vwcClient.ValidatingWebhookConfigurations().Update(context.TODO(), vwc, metav1.UpdateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func SetupManager(ctx context.Context, mgr manager.Manager, gvk schema.GroupVersionKind, auditor *auditlib.EventPublisher, restrictToNamespace string) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "actiontrail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Actiontrail",
	}:
		if err := (&controllersactiontrail.ActiontrailReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Actiontrail"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_actiontrail"],
			TypeName: "alicloud_actiontrail",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Actiontrail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "actiontrail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HistoryDeliveryJob",
	}:
		if err := (&controllersactiontrail.HistoryDeliveryJobReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HistoryDeliveryJob"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_actiontrail_history_delivery_job"],
			TypeName: "alicloud_actiontrail_history_delivery_job",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HistoryDeliveryJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "actiontrail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trail",
	}:
		if err := (&controllersactiontrail.TrailReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Trail"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_actiontrail_trail"],
			TypeName: "alicloud_actiontrail_trail",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Trail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersadb.AccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_adb_account"],
			TypeName: "alicloud_adb_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&controllersadb.BackupPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BackupPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_adb_backup_policy"],
			TypeName: "alicloud_adb_backup_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersadb.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_adb_cluster"],
			TypeName: "alicloud_adb_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersadb.ConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_adb_connection"],
			TypeName: "alicloud_adb_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DbCluster",
	}:
		if err := (&controllersadb.DbClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DbCluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_adb_db_cluster"],
			TypeName: "alicloud_adb_db_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DbCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&controllersalb.AclReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Acl"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_acl"],
			TypeName: "alicloud_alb_acl",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HealthCheckTemplate",
	}:
		if err := (&controllersalb.HealthCheckTemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HealthCheckTemplate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_health_check_template"],
			TypeName: "alicloud_alb_health_check_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HealthCheckTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&controllersalb.ListenerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Listener"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_listener"],
			TypeName: "alicloud_alb_listener",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoadBalancer",
	}:
		if err := (&controllersalb.LoadBalancerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("LoadBalancer"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_load_balancer"],
			TypeName: "alicloud_alb_load_balancer",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LoadBalancer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllersalb.RuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_rule"],
			TypeName: "alicloud_alb_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityPolicy",
	}:
		if err := (&controllersalb.SecurityPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SecurityPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_security_policy"],
			TypeName: "alicloud_alb_security_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerGroup",
	}:
		if err := (&controllersalb.ServerGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ServerGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alb_server_group"],
			TypeName: "alicloud_alb_server_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllersalidns.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alidns_domain"],
			TypeName: "alicloud_alidns_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainAttachment",
	}:
		if err := (&controllersalidns.DomainAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alidns_domain_attachment"],
			TypeName: "alicloud_alidns_domain_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainGroup",
	}:
		if err := (&controllersalidns.DomainGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alidns_domain_group"],
			TypeName: "alicloud_alidns_domain_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersalidns.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alidns_instance"],
			TypeName: "alicloud_alidns_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Record",
	}:
		if err := (&controllersalidns.RecordReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Record"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alidns_record"],
			TypeName: "alicloud_alidns_record",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Record")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsumerGroup",
	}:
		if err := (&controllersalikafka.ConsumerGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConsumerGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alikafka_consumer_group"],
			TypeName: "alicloud_alikafka_consumer_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsumerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersalikafka.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alikafka_instance"],
			TypeName: "alicloud_alikafka_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SaslACL",
	}:
		if err := (&controllersalikafka.SaslACLReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SaslACL"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alikafka_sasl_acl"],
			TypeName: "alicloud_alikafka_sasl_acl",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SaslACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SaslUser",
	}:
		if err := (&controllersalikafka.SaslUserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SaslUser"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alikafka_sasl_user"],
			TypeName: "alicloud_alikafka_sasl_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SaslUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllersalikafka.TopicReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_alikafka_topic"],
			TypeName: "alicloud_alikafka_topic",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Binding",
	}:
		if err := (&controllersamqp.BindingReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Binding"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_amqp_binding"],
			TypeName: "alicloud_amqp_binding",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Binding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Exchange",
	}:
		if err := (&controllersamqp.ExchangeReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Exchange"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_amqp_exchange"],
			TypeName: "alicloud_amqp_exchange",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Exchange")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersamqp.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_amqp_instance"],
			TypeName: "alicloud_amqp_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&controllersamqp.QueueReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Queue"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_amqp_queue"],
			TypeName: "alicloud_amqp_queue",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualHost",
	}:
		if err := (&controllersamqp.VirtualHostReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VirtualHost"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_amqp_virtual_host"],
			TypeName: "alicloud_amqp_virtual_host",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Api",
	}:
		if err := (&controllersapigateway.ApiReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Api"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_api_gateway_api"],
			TypeName: "alicloud_api_gateway_api",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Api")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllersapigateway.AppReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_api_gateway_app"],
			TypeName: "alicloud_api_gateway_app",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppAttachment",
	}:
		if err := (&controllersapigateway.AppAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AppAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_api_gateway_app_attachment"],
			TypeName: "alicloud_api_gateway_app_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersapigateway.GroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_api_gateway_group"],
			TypeName: "alicloud_api_gateway_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcAccess",
	}:
		if err := (&controllersapigateway.VpcAccessReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcAccess"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_api_gateway_vpc_access"],
			TypeName: "alicloud_api_gateway_vpc_access",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcAccess")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertContact",
	}:
		if err := (&controllersarms.AlertContactReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AlertContact"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_arms_alert_contact"],
			TypeName: "alicloud_arms_alert_contact",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertContactGroup",
	}:
		if err := (&controllersarms.AlertContactGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AlertContactGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_arms_alert_contact_group"],
			TypeName: "alicloud_arms_alert_contact_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertContactGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DispatchRule",
	}:
		if err := (&controllersarms.DispatchRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DispatchRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_arms_dispatch_rule"],
			TypeName: "alicloud_arms_dispatch_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DispatchRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrometheusAlertRule",
	}:
		if err := (&controllersarms.PrometheusAlertRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("PrometheusAlertRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_arms_prometheus_alert_rule"],
			TypeName: "alicloud_arms_prometheus_alert_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrometheusAlertRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "auto.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProvisioningGroup",
	}:
		if err := (&controllersauto.ProvisioningGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ProvisioningGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_auto_provisioning_group"],
			TypeName: "alicloud_auto_provisioning_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProvisioningGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Host",
	}:
		if err := (&controllersbastionhost.HostReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Host"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host"],
			TypeName: "alicloud_bastionhost_host",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Host")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAccount",
	}:
		if err := (&controllersbastionhost.HostAccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostAccount"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_account"],
			TypeName: "alicloud_bastionhost_host_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAccountUserAttachment",
	}:
		if err := (&controllersbastionhost.HostAccountUserAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostAccountUserAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_account_user_attachment"],
			TypeName: "alicloud_bastionhost_host_account_user_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostAccountUserAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAccountUserGroupAttachment",
	}:
		if err := (&controllersbastionhost.HostAccountUserGroupAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostAccountUserGroupAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_account_user_group_attachment"],
			TypeName: "alicloud_bastionhost_host_account_user_group_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostAccountUserGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAttachment",
	}:
		if err := (&controllersbastionhost.HostAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_attachment"],
			TypeName: "alicloud_bastionhost_host_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostGroup",
	}:
		if err := (&controllersbastionhost.HostGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_group"],
			TypeName: "alicloud_bastionhost_host_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostGroupAccountUserAttachment",
	}:
		if err := (&controllersbastionhost.HostGroupAccountUserAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostGroupAccountUserAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_group_account_user_attachment"],
			TypeName: "alicloud_bastionhost_host_group_account_user_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostGroupAccountUserAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostGroupAccountUserGroupAttachment",
	}:
		if err := (&controllersbastionhost.HostGroupAccountUserGroupAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HostGroupAccountUserGroupAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_host_group_account_user_group_attachment"],
			TypeName: "alicloud_bastionhost_host_group_account_user_group_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostGroupAccountUserGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersbastionhost.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_instance"],
			TypeName: "alicloud_bastionhost_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllersbastionhost.UserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_user"],
			TypeName: "alicloud_bastionhost_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserAttachment",
	}:
		if err := (&controllersbastionhost.UserAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("UserAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_user_attachment"],
			TypeName: "alicloud_bastionhost_user_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserGroup",
	}:
		if err := (&controllersbastionhost.UserGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("UserGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_bastionhost_user_group"],
			TypeName: "alicloud_bastionhost_user_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "brain.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IndustrialPidLoop",
	}:
		if err := (&controllersbrain.IndustrialPidLoopReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("IndustrialPidLoop"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_brain_industrial_pid_loop"],
			TypeName: "alicloud_brain_industrial_pid_loop",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IndustrialPidLoop")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "brain.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IndustrialPidOrganization",
	}:
		if err := (&controllersbrain.IndustrialPidOrganizationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("IndustrialPidOrganization"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_brain_industrial_pid_organization"],
			TypeName: "alicloud_brain_industrial_pid_organization",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IndustrialPidOrganization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "brain.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IndustrialPidProject",
	}:
		if err := (&controllersbrain.IndustrialPidProjectReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("IndustrialPidProject"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_brain_industrial_pid_project"],
			TypeName: "alicloud_brain_industrial_pid_project",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IndustrialPidProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllerscas.CertificateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cas_certificate"],
			TypeName: "alicloud_cas_certificate",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cassandra.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPlan",
	}:
		if err := (&controllerscassandra.BackupPlanReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BackupPlan"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cassandra_backup_plan"],
			TypeName: "alicloud_cassandra_backup_plan",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cassandra.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerscassandra.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cassandra_cluster"],
			TypeName: "alicloud_cassandra_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cassandra.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataCenter",
	}:
		if err := (&controllerscassandra.DataCenterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DataCenter"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cassandra_data_center"],
			TypeName: "alicloud_cassandra_data_center",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataCenter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cddc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DedicatedHostGroup",
	}:
		if err := (&controllerscddc.DedicatedHostGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DedicatedHostGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cddc_dedicated_host_group"],
			TypeName: "alicloud_cddc_dedicated_host_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DedicatedHostGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerscdn.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cdn_domain"],
			TypeName: "alicloud_cdn_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainConfig",
	}:
		if err := (&controllerscdn.DomainConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cdn_domain_config"],
			TypeName: "alicloud_cdn_domain_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainNew",
	}:
		if err := (&controllerscdn.DomainNewReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainNew"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cdn_domain_new"],
			TypeName: "alicloud_cdn_domain_new",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainNew")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RealTimeLogDelivery",
	}:
		if err := (&controllerscdn.RealTimeLogDeliveryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RealTimeLogDelivery"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cdn_real_time_log_delivery"],
			TypeName: "alicloud_cdn_real_time_log_delivery",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RealTimeLogDelivery")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthLimit",
	}:
		if err := (&controllerscen.BandwidthLimitReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthLimit"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_bandwidth_limit"],
			TypeName: "alicloud_cen_bandwidth_limit",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthLimit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackage",
	}:
		if err := (&controllerscen.BandwidthPackageReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthPackage"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_bandwidth_package"],
			TypeName: "alicloud_cen_bandwidth_package",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthPackage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackageAttachment",
	}:
		if err := (&controllerscen.BandwidthPackageAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthPackageAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_bandwidth_package_attachment"],
			TypeName: "alicloud_cen_bandwidth_package_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthPackageAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Flowlog",
	}:
		if err := (&controllerscen.FlowlogReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Flowlog"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_flowlog"],
			TypeName: "alicloud_cen_flowlog",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Flowlog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerscen.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_instance"],
			TypeName: "alicloud_cen_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceAttachment",
	}:
		if err := (&controllerscen.InstanceAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("InstanceAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_instance_attachment"],
			TypeName: "alicloud_cen_instance_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGrant",
	}:
		if err := (&controllerscen.InstanceGrantReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("InstanceGrant"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_instance_grant"],
			TypeName: "alicloud_cen_instance_grant",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceGrant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateZone",
	}:
		if err := (&controllerscen.PrivateZoneReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("PrivateZone"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_private_zone"],
			TypeName: "alicloud_cen_private_zone",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrivateZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteEntry",
	}:
		if err := (&controllerscen.RouteEntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RouteEntry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_route_entry"],
			TypeName: "alicloud_cen_route_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteMap",
	}:
		if err := (&controllerscen.RouteMapReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RouteMap"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_route_map"],
			TypeName: "alicloud_cen_route_map",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteService",
	}:
		if err := (&controllerscen.RouteServiceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RouteService"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_route_service"],
			TypeName: "alicloud_cen_route_service",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouter",
	}:
		if err := (&controllerscen.TransitRouterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouter"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router"],
			TypeName: "alicloud_cen_transit_router",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterPeerAttachment",
	}:
		if err := (&controllerscen.TransitRouterPeerAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterPeerAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_peer_attachment"],
			TypeName: "alicloud_cen_transit_router_peer_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterPeerAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteEntry",
	}:
		if err := (&controllerscen.TransitRouterRouteEntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterRouteEntry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_route_entry"],
			TypeName: "alicloud_cen_transit_router_route_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterRouteEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteTable",
	}:
		if err := (&controllerscen.TransitRouterRouteTableReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterRouteTable"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_route_table"],
			TypeName: "alicloud_cen_transit_router_route_table",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterRouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteTableAssociation",
	}:
		if err := (&controllerscen.TransitRouterRouteTableAssociationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterRouteTableAssociation"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_route_table_association"],
			TypeName: "alicloud_cen_transit_router_route_table_association",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterRouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteTablePropagation",
	}:
		if err := (&controllerscen.TransitRouterRouteTablePropagationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterRouteTablePropagation"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_route_table_propagation"],
			TypeName: "alicloud_cen_transit_router_route_table_propagation",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterRouteTablePropagation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterVbrAttachment",
	}:
		if err := (&controllerscen.TransitRouterVbrAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterVbrAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_vbr_attachment"],
			TypeName: "alicloud_cen_transit_router_vbr_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterVbrAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterVpcAttachment",
	}:
		if err := (&controllerscen.TransitRouterVpcAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TransitRouterVpcAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_transit_router_vpc_attachment"],
			TypeName: "alicloud_cen_transit_router_vpc_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitRouterVpcAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VbrHealthCheck",
	}:
		if err := (&controllerscen.VbrHealthCheckReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VbrHealthCheck"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cen_vbr_health_check"],
			TypeName: "alicloud_cen_vbr_health_check",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VbrHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "click.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HouseAccount",
	}:
		if err := (&controllersclick.HouseAccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HouseAccount"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_click_house_account"],
			TypeName: "alicloud_click_house_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HouseAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "click.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HouseDbCluster",
	}:
		if err := (&controllersclick.HouseDbClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HouseDbCluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_click_house_db_cluster"],
			TypeName: "alicloud_click_house_db_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HouseDbCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectNetwork",
	}:
		if err := (&controllerscloud.ConnectNetworkReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConnectNetwork"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_connect_network"],
			TypeName: "alicloud_cloud_connect_network",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectNetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectNetworkAttachment",
	}:
		if err := (&controllerscloud.ConnectNetworkAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConnectNetworkAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_connect_network_attachment"],
			TypeName: "alicloud_cloud_connect_network_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectNetworkAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectNetworkGrant",
	}:
		if err := (&controllerscloud.ConnectNetworkGrantReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConnectNetworkGrant"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_connect_network_grant"],
			TypeName: "alicloud_cloud_connect_network_grant",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectNetworkGrant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallControlPolicy",
	}:
		if err := (&controllerscloud.FirewallControlPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FirewallControlPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_firewall_control_policy"],
			TypeName: "alicloud_cloud_firewall_control_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallControlPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallControlPolicyOrder",
	}:
		if err := (&controllerscloud.FirewallControlPolicyOrderReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FirewallControlPolicyOrder"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_firewall_control_policy_order"],
			TypeName: "alicloud_cloud_firewall_control_policy_order",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallControlPolicyOrder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallInstance",
	}:
		if err := (&controllerscloud.FirewallInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FirewallInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_firewall_instance"],
			TypeName: "alicloud_cloud_firewall_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoAccessConfiguration",
	}:
		if err := (&controllerscloud.SsoAccessConfigurationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SsoAccessConfiguration"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_sso_access_configuration"],
			TypeName: "alicloud_cloud_sso_access_configuration",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SsoAccessConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoDirectory",
	}:
		if err := (&controllerscloud.SsoDirectoryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SsoDirectory"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_sso_directory"],
			TypeName: "alicloud_cloud_sso_directory",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SsoDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoGroup",
	}:
		if err := (&controllerscloud.SsoGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SsoGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_sso_group"],
			TypeName: "alicloud_cloud_sso_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SsoGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoScimServerCredential",
	}:
		if err := (&controllerscloud.SsoScimServerCredentialReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SsoScimServerCredential"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_sso_scim_server_credential"],
			TypeName: "alicloud_cloud_sso_scim_server_credential",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SsoScimServerCredential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoUser",
	}:
		if err := (&controllerscloud.SsoUserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SsoUser"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_sso_user"],
			TypeName: "alicloud_cloud_sso_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SsoUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StorageGatewayGateway",
	}:
		if err := (&controllerscloud.StorageGatewayGatewayReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("StorageGatewayGateway"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_storage_gateway_gateway"],
			TypeName: "alicloud_cloud_storage_gateway_gateway",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StorageGatewayGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StorageGatewayStorageBundle",
	}:
		if err := (&controllerscloud.StorageGatewayStorageBundleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("StorageGatewayStorageBundle"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloud_storage_gateway_storage_bundle"],
			TypeName: "alicloud_cloud_storage_gateway_storage_bundle",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StorageGatewayStorageBundle")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudauth.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FaceConfig",
	}:
		if err := (&controllerscloudauth.FaceConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FaceConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cloudauth_face_config"],
			TypeName: "alicloud_cloudauth_face_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FaceConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alarm",
	}:
		if err := (&controllerscms.AlarmReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Alarm"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_alarm"],
			TypeName: "alicloud_cms_alarm",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlarmContact",
	}:
		if err := (&controllerscms.AlarmContactReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AlarmContact"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_alarm_contact"],
			TypeName: "alicloud_cms_alarm_contact",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlarmContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlarmContactGroup",
	}:
		if err := (&controllerscms.AlarmContactGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AlarmContactGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_alarm_contact_group"],
			TypeName: "alicloud_cms_alarm_contact_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlarmContactGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupMetricRule",
	}:
		if err := (&controllerscms.GroupMetricRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("GroupMetricRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_group_metric_rule"],
			TypeName: "alicloud_cms_group_metric_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupMetricRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricRuleTemplate",
	}:
		if err := (&controllerscms.MetricRuleTemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MetricRuleTemplate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_metric_rule_template"],
			TypeName: "alicloud_cms_metric_rule_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MetricRuleTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MonitorGroup",
	}:
		if err := (&controllerscms.MonitorGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MonitorGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_monitor_group"],
			TypeName: "alicloud_cms_monitor_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MonitorGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MonitorGroupInstances",
	}:
		if err := (&controllerscms.MonitorGroupInstancesReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MonitorGroupInstances"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_monitor_group_instances"],
			TypeName: "alicloud_cms_monitor_group_instances",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MonitorGroupInstances")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SiteMonitor",
	}:
		if err := (&controllerscms.SiteMonitorReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SiteMonitor"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cms_site_monitor"],
			TypeName: "alicloud_cms_site_monitor",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SiteMonitor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "common.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackage",
	}:
		if err := (&controllerscommon.BandwidthPackageReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthPackage"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_common_bandwidth_package"],
			TypeName: "alicloud_common_bandwidth_package",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthPackage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "common.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackageAttachment",
	}:
		if err := (&controllerscommon.BandwidthPackageAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthPackageAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_common_bandwidth_package_attachment"],
			TypeName: "alicloud_common_bandwidth_package_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthPackageAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AggregateCompliancePack",
	}:
		if err := (&controllersconfig.AggregateCompliancePackReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AggregateCompliancePack"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_aggregate_compliance_pack"],
			TypeName: "alicloud_config_aggregate_compliance_pack",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AggregateCompliancePack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AggregateConfigRule",
	}:
		if err := (&controllersconfig.AggregateConfigRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AggregateConfigRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_aggregate_config_rule"],
			TypeName: "alicloud_config_aggregate_config_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AggregateConfigRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Aggregator",
	}:
		if err := (&controllersconfig.AggregatorReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Aggregator"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_aggregator"],
			TypeName: "alicloud_config_aggregator",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Aggregator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CompliancePack",
	}:
		if err := (&controllersconfig.CompliancePackReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("CompliancePack"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_compliance_pack"],
			TypeName: "alicloud_config_compliance_pack",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CompliancePack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationRecorder",
	}:
		if err := (&controllersconfig.ConfigurationRecorderReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConfigurationRecorder"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_configuration_recorder"],
			TypeName: "alicloud_config_configuration_recorder",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigurationRecorder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeliveryChannel",
	}:
		if err := (&controllersconfig.DeliveryChannelReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DeliveryChannel"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_delivery_channel"],
			TypeName: "alicloud_config_delivery_channel",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeliveryChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllersconfig.RuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_config_rule"],
			TypeName: "alicloud_config_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerscontainer.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_container_cluster"],
			TypeName: "alicloud_container_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "copy.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&controllerscopy.ImageReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Image"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_copy_image"],
			TypeName: "alicloud_copy_image",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeInstance",
	}:
		if err := (&controllerscr.EeInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EeInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_ee_instance"],
			TypeName: "alicloud_cr_ee_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EeInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeNamespace",
	}:
		if err := (&controllerscr.EeNamespaceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EeNamespace"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_ee_namespace"],
			TypeName: "alicloud_cr_ee_namespace",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EeNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeRepo",
	}:
		if err := (&controllerscr.EeRepoReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EeRepo"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_ee_repo"],
			TypeName: "alicloud_cr_ee_repo",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EeRepo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeSyncRule",
	}:
		if err := (&controllerscr.EeSyncRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EeSyncRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_ee_sync_rule"],
			TypeName: "alicloud_cr_ee_sync_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EeSyncRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointACLPolicy",
	}:
		if err := (&controllerscr.EndpointACLPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EndpointACLPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_endpoint_acl_policy"],
			TypeName: "alicloud_cr_endpoint_acl_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointACLPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&controllerscr.NamespaceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Namespace"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_namespace"],
			TypeName: "alicloud_cr_namespace",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repo",
	}:
		if err := (&controllerscr.RepoReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Repo"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cr_repo"],
			TypeName: "alicloud_cr_repo",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Repo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllerscs.ApplicationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_application"],
			TypeName: "alicloud_cs_application",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoscalingConfig",
	}:
		if err := (&controllerscs.AutoscalingConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AutoscalingConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_autoscaling_config"],
			TypeName: "alicloud_cs_autoscaling_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AutoscalingConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EdgeKubernetes",
	}:
		if err := (&controllerscs.EdgeKubernetesReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EdgeKubernetes"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_edge_kubernetes"],
			TypeName: "alicloud_cs_edge_kubernetes",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EdgeKubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Kubernetes",
	}:
		if err := (&controllerscs.KubernetesReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Kubernetes"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_kubernetes"],
			TypeName: "alicloud_cs_kubernetes",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Kubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesAutoscaler",
	}:
		if err := (&controllerscs.KubernetesAutoscalerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KubernetesAutoscaler"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_kubernetes_autoscaler"],
			TypeName: "alicloud_cs_kubernetes_autoscaler",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KubernetesAutoscaler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesNodePool",
	}:
		if err := (&controllerscs.KubernetesNodePoolReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KubernetesNodePool"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_kubernetes_node_pool"],
			TypeName: "alicloud_cs_kubernetes_node_pool",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KubernetesNodePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesPermissions",
	}:
		if err := (&controllerscs.KubernetesPermissionsReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KubernetesPermissions"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_kubernetes_permissions"],
			TypeName: "alicloud_cs_kubernetes_permissions",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KubernetesPermissions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedKubernetes",
	}:
		if err := (&controllerscs.ManagedKubernetesReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagedKubernetes"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_managed_kubernetes"],
			TypeName: "alicloud_cs_managed_kubernetes",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedKubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerlessKubernetes",
	}:
		if err := (&controllerscs.ServerlessKubernetesReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ServerlessKubernetes"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_serverless_kubernetes"],
			TypeName: "alicloud_cs_serverless_kubernetes",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerlessKubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Swarm",
	}:
		if err := (&controllerscs.SwarmReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Swarm"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_cs_swarm"],
			TypeName: "alicloud_cs_swarm",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Swarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WorksFolder",
	}:
		if err := (&controllersdata.WorksFolderReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("WorksFolder"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_data_works_folder"],
			TypeName: "alicloud_data_works_folder",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WorksFolder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "database.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayGateway",
	}:
		if err := (&controllersdatabase.GatewayGatewayReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("GatewayGateway"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_database_gateway_gateway"],
			TypeName: "alicloud_database_gateway_gateway",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datahub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllersdatahub.ProjectReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_datahub_project"],
			TypeName: "alicloud_datahub_project",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datahub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&controllersdatahub.SubscriptionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Subscription"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_datahub_subscription"],
			TypeName: "alicloud_datahub_subscription",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datahub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllersdatahub.TopicReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_datahub_topic"],
			TypeName: "alicloud_datahub_topic",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersdb.AccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_account"],
			TypeName: "alicloud_db_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPrivilege",
	}:
		if err := (&controllersdb.AccountPrivilegeReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccountPrivilege"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_account_privilege"],
			TypeName: "alicloud_db_account_privilege",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountPrivilege")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&controllersdb.BackupPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BackupPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_backup_policy"],
			TypeName: "alicloud_db_backup_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersdb.ConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_connection"],
			TypeName: "alicloud_db_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllersdb.DatabaseReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_database"],
			TypeName: "alicloud_db_database",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersdb.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_instance"],
			TypeName: "alicloud_db_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReadWriteSplittingConnection",
	}:
		if err := (&controllersdb.ReadWriteSplittingConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ReadWriteSplittingConnection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_read_write_splitting_connection"],
			TypeName: "alicloud_db_read_write_splitting_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReadWriteSplittingConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReadonlyInstance",
	}:
		if err := (&controllersdb.ReadonlyInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ReadonlyInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_db_readonly_instance"],
			TypeName: "alicloud_db_readonly_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReadonlyInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dbfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersdbfs.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dbfs_instance"],
			TypeName: "alicloud_dbfs_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dcdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllersdcdn.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dcdn_domain"],
			TypeName: "alicloud_dcdn_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dcdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainConfig",
	}:
		if err := (&controllersdcdn.DomainConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dcdn_domain_config"],
			TypeName: "alicloud_dcdn_domain_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddosbgp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersddosbgp.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ddosbgp_instance"],
			TypeName: "alicloud_ddosbgp_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainResource",
	}:
		if err := (&controllersddoscoo.DomainResourceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainResource"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ddoscoo_domain_resource"],
			TypeName: "alicloud_ddoscoo_domain_resource",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersddoscoo.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ddoscoo_instance"],
			TypeName: "alicloud_ddoscoo_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Port",
	}:
		if err := (&controllersddoscoo.PortReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Port"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ddoscoo_port"],
			TypeName: "alicloud_ddoscoo_port",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Port")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SchedulerRule",
	}:
		if err := (&controllersddoscoo.SchedulerRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SchedulerRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ddoscoo_scheduler_rule"],
			TypeName: "alicloud_ddoscoo_scheduler_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SchedulerRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessGroup",
	}:
		if err := (&controllersdfs.AccessGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccessGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dfs_access_group"],
			TypeName: "alicloud_dfs_access_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessRule",
	}:
		if err := (&controllersdfs.AccessRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccessRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dfs_access_rule"],
			TypeName: "alicloud_dfs_access_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystem",
	}:
		if err := (&controllersdfs.FileSystemReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FileSystem"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dfs_file_system"],
			TypeName: "alicloud_dfs_file_system",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MountPoint",
	}:
		if err := (&controllersdfs.MountPointReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MountPoint"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dfs_mount_point"],
			TypeName: "alicloud_dfs_mount_point",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MountPoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "direct.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MailDomain",
	}:
		if err := (&controllersdirect.MailDomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MailDomain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_direct_mail_domain"],
			TypeName: "alicloud_direct_mail_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MailDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "direct.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MailMailAddress",
	}:
		if err := (&controllersdirect.MailMailAddressReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MailMailAddress"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_direct_mail_mail_address"],
			TypeName: "alicloud_direct_mail_mail_address",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MailMailAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "direct.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MailReceivers",
	}:
		if err := (&controllersdirect.MailReceiversReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MailReceivers"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_direct_mail_receivers"],
			TypeName: "alicloud_direct_mail_receivers",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MailReceivers")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&controllersdisk.DiskReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Disk"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_disk"],
			TypeName: "alicloud_disk",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllersdisk.AttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_disk_attachment"],
			TypeName: "alicloud_disk_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseInstance",
	}:
		if err := (&controllersdms.EnterpriseInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EnterpriseInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dms_enterprise_instance"],
			TypeName: "alicloud_dms_enterprise_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EnterpriseInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseUser",
	}:
		if err := (&controllersdms.EnterpriseUserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EnterpriseUser"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dms_enterprise_user"],
			TypeName: "alicloud_dms_enterprise_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EnterpriseUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dns",
	}:
		if err := (&controllersdns.DnsReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Dns"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dns"],
			TypeName: "alicloud_dns",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dns")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllersdns.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dns_domain"],
			TypeName: "alicloud_dns_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainAttachment",
	}:
		if err := (&controllersdns.DomainAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dns_domain_attachment"],
			TypeName: "alicloud_dns_domain_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersdns.GroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dns_group"],
			TypeName: "alicloud_dns_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersdns.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dns_instance"],
			TypeName: "alicloud_dns_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Record",
	}:
		if err := (&controllersdns.RecordReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Record"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dns_record"],
			TypeName: "alicloud_dns_record",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Record")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "drds.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersdrds.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_drds_instance"],
			TypeName: "alicloud_drds_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobMonitorRule",
	}:
		if err := (&controllersdts.JobMonitorRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("JobMonitorRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dts_job_monitor_rule"],
			TypeName: "alicloud_dts_job_monitor_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobMonitorRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionJob",
	}:
		if err := (&controllersdts.SubscriptionJobReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SubscriptionJob"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dts_subscription_job"],
			TypeName: "alicloud_dts_subscription_job",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubscriptionJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SynchronizationInstance",
	}:
		if err := (&controllersdts.SynchronizationInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SynchronizationInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dts_synchronization_instance"],
			TypeName: "alicloud_dts_synchronization_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SynchronizationInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SynchronizationJob",
	}:
		if err := (&controllersdts.SynchronizationJobReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SynchronizationJob"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_dts_synchronization_job"],
			TypeName: "alicloud_dts_synchronization_job",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SynchronizationJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eais.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerseais.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eais_instance"],
			TypeName: "alicloud_eais_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecd.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyGroup",
	}:
		if err := (&controllersecd.PolicyGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("PolicyGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecd_policy_group"],
			TypeName: "alicloud_ecd_policy_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecd.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SimpleOfficeSite",
	}:
		if err := (&controllersecd.SimpleOfficeSiteReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SimpleOfficeSite"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecd_simple_office_site"],
			TypeName: "alicloud_ecd_simple_office_site",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SimpleOfficeSite")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eci.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ContainerGroup",
	}:
		if err := (&controllerseci.ContainerGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ContainerGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eci_container_group"],
			TypeName: "alicloud_eci_container_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ContainerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eci.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageCache",
	}:
		if err := (&controllerseci.ImageCacheReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ImageCache"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eci_image_cache"],
			TypeName: "alicloud_eci_image_cache",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImageCache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eci.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OpenapiImageCache",
	}:
		if err := (&controllerseci.OpenapiImageCacheReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("OpenapiImageCache"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eci_openapi_image_cache"],
			TypeName: "alicloud_eci_openapi_image_cache",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OpenapiImageCache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&controllersecp.KeyPairReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KeyPair"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecp_key_pair"],
			TypeName: "alicloud_ecp_key_pair",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoSnapshotPolicy",
	}:
		if err := (&controllersecs.AutoSnapshotPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AutoSnapshotPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_auto_snapshot_policy"],
			TypeName: "alicloud_ecs_auto_snapshot_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AutoSnapshotPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoSnapshotPolicyAttachment",
	}:
		if err := (&controllersecs.AutoSnapshotPolicyAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AutoSnapshotPolicyAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_auto_snapshot_policy_attachment"],
			TypeName: "alicloud_ecs_auto_snapshot_policy_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AutoSnapshotPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Command",
	}:
		if err := (&controllersecs.CommandReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Command"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_command"],
			TypeName: "alicloud_ecs_command",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Command")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DedicatedHost",
	}:
		if err := (&controllersecs.DedicatedHostReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DedicatedHost"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_dedicated_host"],
			TypeName: "alicloud_ecs_dedicated_host",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DedicatedHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeploymentSet",
	}:
		if err := (&controllersecs.DeploymentSetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DeploymentSet"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_deployment_set"],
			TypeName: "alicloud_ecs_deployment_set",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeploymentSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&controllersecs.DiskReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Disk"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_disk"],
			TypeName: "alicloud_ecs_disk",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskAttachment",
	}:
		if err := (&controllersecs.DiskAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DiskAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_disk_attachment"],
			TypeName: "alicloud_ecs_disk_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DiskAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HpcCluster",
	}:
		if err := (&controllersecs.HpcClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("HpcCluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_hpc_cluster"],
			TypeName: "alicloud_ecs_hpc_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HpcCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&controllersecs.KeyPairReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KeyPair"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_key_pair"],
			TypeName: "alicloud_ecs_key_pair",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPairAttachment",
	}:
		if err := (&controllersecs.KeyPairAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KeyPairAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_key_pair_attachment"],
			TypeName: "alicloud_ecs_key_pair_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyPairAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LaunchTemplate",
	}:
		if err := (&controllersecs.LaunchTemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("LaunchTemplate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_launch_template"],
			TypeName: "alicloud_ecs_launch_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LaunchTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkInterface",
	}:
		if err := (&controllersecs.NetworkInterfaceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("NetworkInterface"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_network_interface"],
			TypeName: "alicloud_ecs_network_interface",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkInterfaceAttachment",
	}:
		if err := (&controllersecs.NetworkInterfaceAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("NetworkInterfaceAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_network_interface_attachment"],
			TypeName: "alicloud_ecs_network_interface_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkInterfaceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllersecs.SnapshotReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ecs_snapshot"],
			TypeName: "alicloud_ecs_snapshot",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllersedas.ApplicationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_application"],
			TypeName: "alicloud_edas_application",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationDeployment",
	}:
		if err := (&controllersedas.ApplicationDeploymentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ApplicationDeployment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_application_deployment"],
			TypeName: "alicloud_edas_application_deployment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationScale",
	}:
		if err := (&controllersedas.ApplicationScaleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ApplicationScale"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_application_scale"],
			TypeName: "alicloud_edas_application_scale",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationScale")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersedas.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_cluster"],
			TypeName: "alicloud_edas_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeployGroup",
	}:
		if err := (&controllersedas.DeployGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DeployGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_deploy_group"],
			TypeName: "alicloud_edas_deploy_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeployGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceClusterAttachment",
	}:
		if err := (&controllersedas.InstanceClusterAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("InstanceClusterAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_instance_cluster_attachment"],
			TypeName: "alicloud_edas_instance_cluster_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceClusterAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "K8sApplication",
	}:
		if err := (&controllersedas.K8sApplicationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("K8sApplication"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_k8s_application"],
			TypeName: "alicloud_edas_k8s_application",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "K8sApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "K8sCluster",
	}:
		if err := (&controllersedas.K8sClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("K8sCluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_k8s_cluster"],
			TypeName: "alicloud_edas_k8s_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "K8sCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SlbAttachment",
	}:
		if err := (&controllersedas.SlbAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SlbAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_edas_slb_attachment"],
			TypeName: "alicloud_edas_slb_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SlbAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ehpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobTemplate",
	}:
		if err := (&controllersehpc.JobTemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("JobTemplate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ehpc_job_template"],
			TypeName: "alicloud_ehpc_job_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Eip",
	}:
		if err := (&controllerseip.EipReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Eip"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eip"],
			TypeName: "alicloud_eip",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Eip")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Address",
	}:
		if err := (&controllerseip.AddressReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Address"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eip_address"],
			TypeName: "alicloud_eip_address",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Address")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&controllerseip.AssociationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Association"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eip_association"],
			TypeName: "alicloud_eip_association",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eipanycast.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnycastEipAddress",
	}:
		if err := (&controllerseipanycast.AnycastEipAddressReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AnycastEipAddress"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eipanycast_anycast_eip_address"],
			TypeName: "alicloud_eipanycast_anycast_eip_address",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnycastEipAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eipanycast.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnycastEipAddressAttachment",
	}:
		if err := (&controllerseipanycast.AnycastEipAddressAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AnycastEipAddressAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_eipanycast_anycast_eip_address_attachment"],
			TypeName: "alicloud_eipanycast_anycast_eip_address_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnycastEipAddressAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearch.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerselasticsearch.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_elasticsearch_instance"],
			TypeName: "alicloud_elasticsearch_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersemr.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_emr_cluster"],
			TypeName: "alicloud_emr_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ens.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&controllersens.KeyPairReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KeyPair"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ens_key_pair"],
			TypeName: "alicloud_ens_key_pair",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alarm",
	}:
		if err := (&controllersess.AlarmReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Alarm"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_alarm"],
			TypeName: "alicloud_ess_alarm",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllersess.AttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_attachment"],
			TypeName: "alicloud_ess_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecycleHook",
	}:
		if err := (&controllersess.LifecycleHookReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("LifecycleHook"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_lifecycle_hook"],
			TypeName: "alicloud_ess_lifecycle_hook",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LifecycleHook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Notification",
	}:
		if err := (&controllersess.NotificationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Notification"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_notification"],
			TypeName: "alicloud_ess_notification",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Notification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingConfiguration",
	}:
		if err := (&controllersess.ScalingConfigurationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ScalingConfiguration"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_scaling_configuration"],
			TypeName: "alicloud_ess_scaling_configuration",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScalingConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingGroup",
	}:
		if err := (&controllersess.ScalingGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ScalingGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_scaling_group"],
			TypeName: "alicloud_ess_scaling_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScalingGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingRule",
	}:
		if err := (&controllersess.ScalingRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ScalingRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_scaling_rule"],
			TypeName: "alicloud_ess_scaling_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScalingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalinggroupVserverGroups",
	}:
		if err := (&controllersess.ScalinggroupVserverGroupsReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ScalinggroupVserverGroups"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_scalinggroup_vserver_groups"],
			TypeName: "alicloud_ess_scalinggroup_vserver_groups",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScalinggroupVserverGroups")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&controllersess.ScheduleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Schedule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_schedule"],
			TypeName: "alicloud_ess_schedule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledTask",
	}:
		if err := (&controllersess.ScheduledTaskReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ScheduledTask"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ess_scheduled_task"],
			TypeName: "alicloud_ess_scheduled_task",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScheduledTask")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeEventBus",
	}:
		if err := (&controllersevent.BridgeEventBusReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BridgeEventBus"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_event_bridge_event_bus"],
			TypeName: "alicloud_event_bridge_event_bus",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BridgeEventBus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeEventSource",
	}:
		if err := (&controllersevent.BridgeEventSourceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BridgeEventSource"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_event_bridge_event_source"],
			TypeName: "alicloud_event_bridge_event_source",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BridgeEventSource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeRule",
	}:
		if err := (&controllersevent.BridgeRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BridgeRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_event_bridge_rule"],
			TypeName: "alicloud_event_bridge_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BridgeRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeSlr",
	}:
		if err := (&controllersevent.BridgeSlrReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BridgeSlr"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_event_bridge_slr"],
			TypeName: "alicloud_event_bridge_slr",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BridgeSlr")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "express.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectPhysicalConnection",
	}:
		if err := (&controllersexpress.ConnectPhysicalConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConnectPhysicalConnection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_express_connect_physical_connection"],
			TypeName: "alicloud_express_connect_physical_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectPhysicalConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "express.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectVirtualBorderRouter",
	}:
		if err := (&controllersexpress.ConnectVirtualBorderRouterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConnectVirtualBorderRouter"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_express_connect_virtual_border_router"],
			TypeName: "alicloud_express_connect_virtual_border_router",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectVirtualBorderRouter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&controllersfc.AliasReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Alias"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fc_alias"],
			TypeName: "alicloud_fc_alias",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDomain",
	}:
		if err := (&controllersfc.CustomDomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("CustomDomain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fc_custom_domain"],
			TypeName: "alicloud_fc_custom_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&controllersfc.FunctionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Function"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fc_function"],
			TypeName: "alicloud_fc_function",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FunctionAsyncInvokeConfig",
	}:
		if err := (&controllersfc.FunctionAsyncInvokeConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FunctionAsyncInvokeConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fc_function_async_invoke_config"],
			TypeName: "alicloud_fc_function_async_invoke_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FunctionAsyncInvokeConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersfc.ServiceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fc_service"],
			TypeName: "alicloud_fc_service",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&controllersfc.TriggerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Trigger"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fc_trigger"],
			TypeName: "alicloud_fc_trigger",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fnf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Flow",
	}:
		if err := (&controllersfnf.FlowReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Flow"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fnf_flow"],
			TypeName: "alicloud_fnf_flow",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Flow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fnf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&controllersfnf.ScheduleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Schedule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_fnf_schedule"],
			TypeName: "alicloud_fnf_schedule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "forward.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Entry",
	}:
		if err := (&controllersforward.EntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Entry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_forward_entry"],
			TypeName: "alicloud_forward_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Entry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Accelerator",
	}:
		if err := (&controllersga.AcceleratorReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Accelerator"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_accelerator"],
			TypeName: "alicloud_ga_accelerator",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Accelerator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackage",
	}:
		if err := (&controllersga.BandwidthPackageReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthPackage"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_bandwidth_package"],
			TypeName: "alicloud_ga_bandwidth_package",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthPackage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackageAttachment",
	}:
		if err := (&controllersga.BandwidthPackageAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BandwidthPackageAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_bandwidth_package_attachment"],
			TypeName: "alicloud_ga_bandwidth_package_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BandwidthPackageAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointGroup",
	}:
		if err := (&controllersga.EndpointGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EndpointGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_endpoint_group"],
			TypeName: "alicloud_ga_endpoint_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ForwardingRule",
	}:
		if err := (&controllersga.ForwardingRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ForwardingRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_forwarding_rule"],
			TypeName: "alicloud_ga_forwarding_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ForwardingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IpSet",
	}:
		if err := (&controllersga.IpSetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("IpSet"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_ip_set"],
			TypeName: "alicloud_ga_ip_set",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IpSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&controllersga.ListenerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Listener"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ga_listener"],
			TypeName: "alicloud_ga_listener",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gpdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersgpdb.ConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_gpdb_connection"],
			TypeName: "alicloud_gpdb_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gpdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ElasticInstance",
	}:
		if err := (&controllersgpdb.ElasticInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ElasticInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_gpdb_elastic_instance"],
			TypeName: "alicloud_gpdb_elastic_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ElasticInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gpdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersgpdb.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_gpdb_instance"],
			TypeName: "alicloud_gpdb_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "graph.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseDbInstance",
	}:
		if err := (&controllersgraph.DatabaseDbInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DatabaseDbInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_graph_database_db_instance"],
			TypeName: "alicloud_graph_database_db_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseDbInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "havip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Havip",
	}:
		if err := (&controllershavip.HavipReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Havip"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_havip"],
			TypeName: "alicloud_havip",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Havip")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "havip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllershavip.AttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_havip_attachment"],
			TypeName: "alicloud_havip_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbase.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllershbase.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbase_instance"],
			TypeName: "alicloud_hbase_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EcsBackupClient",
	}:
		if err := (&controllershbr.EcsBackupClientReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EcsBackupClient"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbr_ecs_backup_client"],
			TypeName: "alicloud_hbr_ecs_backup_client",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EcsBackupClient")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EcsBackupPlan",
	}:
		if err := (&controllershbr.EcsBackupPlanReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EcsBackupPlan"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbr_ecs_backup_plan"],
			TypeName: "alicloud_hbr_ecs_backup_plan",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EcsBackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NasBackupPlan",
	}:
		if err := (&controllershbr.NasBackupPlanReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("NasBackupPlan"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbr_nas_backup_plan"],
			TypeName: "alicloud_hbr_nas_backup_plan",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NasBackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OssBackupPlan",
	}:
		if err := (&controllershbr.OssBackupPlanReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("OssBackupPlan"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbr_oss_backup_plan"],
			TypeName: "alicloud_hbr_oss_backup_plan",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OssBackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RestoreJob",
	}:
		if err := (&controllershbr.RestoreJobReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RestoreJob"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbr_restore_job"],
			TypeName: "alicloud_hbr_restore_job",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RestoreJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vault",
	}:
		if err := (&controllershbr.VaultReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Vault"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_hbr_vault"],
			TypeName: "alicloud_hbr_vault",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Vault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&controllersimage.ImageReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Image"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_image"],
			TypeName: "alicloud_image",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Copy",
	}:
		if err := (&controllersimage.CopyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Copy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_image_copy"],
			TypeName: "alicloud_image_copy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Copy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Export",
	}:
		if err := (&controllersimage.ExportReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Export"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_image_export"],
			TypeName: "alicloud_image_export",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Export")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Import",
	}:
		if err := (&controllersimage.ImportReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Import"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_image_import"],
			TypeName: "alicloud_image_import",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Import")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharePermission",
	}:
		if err := (&controllersimage.SharePermissionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SharePermission"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_image_share_permission"],
			TypeName: "alicloud_image_share_permission",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SharePermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imm.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllersimm.ProjectReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_imm_project"],
			TypeName: "alicloud_imm_project",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppTemplate",
	}:
		if err := (&controllersimp.AppTemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AppTemplate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_imp_app_template"],
			TypeName: "alicloud_imp_app_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "instance.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersinstance.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_instance"],
			TypeName: "alicloud_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeviceGroup",
	}:
		if err := (&controllersiot.DeviceGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DeviceGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_iot_device_group"],
			TypeName: "alicloud_iot_device_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeviceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "key.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pair",
	}:
		if err := (&controllerskey.PairReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Pair"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_key_pair"],
			TypeName: "alicloud_key_pair",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Pair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "key.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PairAttachment",
	}:
		if err := (&controllerskey.PairAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("PairAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_key_pair_attachment"],
			TypeName: "alicloud_key_pair_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PairAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&controllerskms.AliasReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Alias"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kms_alias"],
			TypeName: "alicloud_kms_alias",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ciphertext",
	}:
		if err := (&controllerskms.CiphertextReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Ciphertext"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kms_ciphertext"],
			TypeName: "alicloud_kms_ciphertext",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ciphertext")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Key",
	}:
		if err := (&controllerskms.KeyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Key"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kms_key"],
			TypeName: "alicloud_kms_key",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Key")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyVersion",
	}:
		if err := (&controllerskms.KeyVersionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("KeyVersion"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kms_key_version"],
			TypeName: "alicloud_kms_key_version",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Secret",
	}:
		if err := (&controllerskms.SecretReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Secret"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kms_secret"],
			TypeName: "alicloud_kms_secret",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Secret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllerskvstore.AccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kvstore_account"],
			TypeName: "alicloud_kvstore_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuditLogConfig",
	}:
		if err := (&controllerskvstore.AuditLogConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AuditLogConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kvstore_audit_log_config"],
			TypeName: "alicloud_kvstore_audit_log_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AuditLogConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&controllerskvstore.BackupPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BackupPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kvstore_backup_policy"],
			TypeName: "alicloud_kvstore_backup_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllerskvstore.ConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kvstore_connection"],
			TypeName: "alicloud_kvstore_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerskvstore.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_kvstore_instance"],
			TypeName: "alicloud_kvstore_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "launch.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&controllerslaunch.TemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Template"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_launch_template"],
			TypeName: "alicloud_launch_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lindorm.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerslindorm.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_lindorm_instance"],
			TypeName: "alicloud_lindorm_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alert",
	}:
		if err := (&controllerslog.AlertReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Alert"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_alert"],
			TypeName: "alicloud_log_alert",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Audit",
	}:
		if err := (&controllerslog.AuditReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Audit"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_audit"],
			TypeName: "alicloud_log_audit",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Audit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&controllerslog.DashboardReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Dashboard"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_dashboard"],
			TypeName: "alicloud_log_dashboard",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Etl",
	}:
		if err := (&controllerslog.EtlReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Etl"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_etl"],
			TypeName: "alicloud_log_etl",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Etl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineGroup",
	}:
		if err := (&controllerslog.MachineGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MachineGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_machine_group"],
			TypeName: "alicloud_log_machine_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MachineGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OssShipper",
	}:
		if err := (&controllerslog.OssShipperReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("OssShipper"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_oss_shipper"],
			TypeName: "alicloud_log_oss_shipper",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OssShipper")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllerslog.ProjectReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_project"],
			TypeName: "alicloud_log_project",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Store",
	}:
		if err := (&controllerslog.StoreReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Store"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_store"],
			TypeName: "alicloud_log_store",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Store")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoreIndex",
	}:
		if err := (&controllerslog.StoreIndexReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("StoreIndex"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_log_store_index"],
			TypeName: "alicloud_log_store_index",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StoreIndex")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logtail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllerslogtail.AttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_logtail_attachment"],
			TypeName: "alicloud_logtail_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logtail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Config",
	}:
		if err := (&controllerslogtail.ConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Config"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_logtail_config"],
			TypeName: "alicloud_logtail_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Config")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "market.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Order",
	}:
		if err := (&controllersmarket.OrderReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Order"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_market_order"],
			TypeName: "alicloud_market_order",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Order")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maxcompute.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllersmaxcompute.ProjectReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_maxcompute_project"],
			TypeName: "alicloud_maxcompute_project",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mhub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllersmhub.AppReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mhub_app"],
			TypeName: "alicloud_mhub_app",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mhub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Product",
	}:
		if err := (&controllersmhub.ProductReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Product"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mhub_product"],
			TypeName: "alicloud_mhub_product",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Product")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&controllersmns.QueueReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Queue"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mns_queue"],
			TypeName: "alicloud_mns_queue",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllersmns.TopicReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mns_topic"],
			TypeName: "alicloud_mns_topic",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicSubscription",
	}:
		if err := (&controllersmns.TopicSubscriptionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TopicSubscription"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mns_topic_subscription"],
			TypeName: "alicloud_mns_topic_subscription",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mongodb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersmongodb.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mongodb_instance"],
			TypeName: "alicloud_mongodb_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mongodb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShardingInstance",
	}:
		if err := (&controllersmongodb.ShardingInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ShardingInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mongodb_sharding_instance"],
			TypeName: "alicloud_mongodb_sharding_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShardingInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubContact",
	}:
		if err := (&controllersmsc.SubContactReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SubContact"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_msc_sub_contact"],
			TypeName: "alicloud_msc_sub_contact",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubSubscription",
	}:
		if err := (&controllersmsc.SubSubscriptionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SubSubscription"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_msc_sub_subscription"],
			TypeName: "alicloud_msc_sub_subscription",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mse.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersmse.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_mse_cluster"],
			TypeName: "alicloud_mse_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessGroup",
	}:
		if err := (&controllersnas.AccessGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccessGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_nas_access_group"],
			TypeName: "alicloud_nas_access_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessRule",
	}:
		if err := (&controllersnas.AccessRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccessRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_nas_access_rule"],
			TypeName: "alicloud_nas_access_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystem",
	}:
		if err := (&controllersnas.FileSystemReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FileSystem"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_nas_file_system"],
			TypeName: "alicloud_nas_file_system",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MountTarget",
	}:
		if err := (&controllersnas.MountTargetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MountTarget"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_nas_mount_target"],
			TypeName: "alicloud_nas_mount_target",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MountTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersnat.GatewayReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_nat_gateway"],
			TypeName: "alicloud_nat_gateway",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&controllersnetwork.AclReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Acl"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_network_acl"],
			TypeName: "alicloud_network_acl",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclAttachment",
	}:
		if err := (&controllersnetwork.AclAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AclAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_network_acl_attachment"],
			TypeName: "alicloud_network_acl_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AclAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclEntries",
	}:
		if err := (&controllersnetwork.AclEntriesReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AclEntries"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_network_acl_entries"],
			TypeName: "alicloud_network_acl_entries",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AclEntries")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&controllersnetwork.InterfaceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Interface"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_network_interface"],
			TypeName: "alicloud_network_interface",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceAttachment",
	}:
		if err := (&controllersnetwork.InterfaceAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("InterfaceAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_network_interface_attachment"],
			TypeName: "alicloud_network_interface_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ons.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersons.GroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ons_group"],
			TypeName: "alicloud_ons_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ons.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersons.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ons_instance"],
			TypeName: "alicloud_ons_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ons.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllersons.TopicReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ons_topic"],
			TypeName: "alicloud_ons_topic",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oos.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Execution",
	}:
		if err := (&controllersoos.ExecutionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Execution"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_oos_execution"],
			TypeName: "alicloud_oos_execution",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Execution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oos.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&controllersoos.TemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Template"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_oos_template"],
			TypeName: "alicloud_oos_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "open.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SearchAppGroup",
	}:
		if err := (&controllersopen.SearchAppGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SearchAppGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_open_search_app_group"],
			TypeName: "alicloud_open_search_app_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SearchAppGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oss.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&controllersoss.BucketReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Bucket"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_oss_bucket"],
			TypeName: "alicloud_oss_bucket",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oss.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketObject",
	}:
		if err := (&controllersoss.BucketObjectReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BucketObject"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_oss_bucket_object"],
			TypeName: "alicloud_oss_bucket_object",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketObject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ots.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersots.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ots_instance"],
			TypeName: "alicloud_ots_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ots.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceAttachment",
	}:
		if err := (&controllersots.InstanceAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("InstanceAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ots_instance_attachment"],
			TypeName: "alicloud_ots_instance_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ots.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersots.TableReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ots_table"],
			TypeName: "alicloud_ots_table",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllerspolardb.AccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_account"],
			TypeName: "alicloud_polardb_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPrivilege",
	}:
		if err := (&controllerspolardb.AccountPrivilegeReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccountPrivilege"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_account_privilege"],
			TypeName: "alicloud_polardb_account_privilege",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountPrivilege")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&controllerspolardb.BackupPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BackupPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_backup_policy"],
			TypeName: "alicloud_polardb_backup_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerspolardb.ClusterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_cluster"],
			TypeName: "alicloud_polardb_cluster",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllerspolardb.DatabaseReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_database"],
			TypeName: "alicloud_polardb_database",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllerspolardb.EndpointReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_endpoint"],
			TypeName: "alicloud_polardb_endpoint",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointAddress",
	}:
		if err := (&controllerspolardb.EndpointAddressReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("EndpointAddress"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_polardb_endpoint_address"],
			TypeName: "alicloud_polardb_endpoint_address",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpoint",
	}:
		if err := (&controllersprivatelink.VpcEndpointReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcEndpoint"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_privatelink_vpc_endpoint"],
			TypeName: "alicloud_privatelink_vpc_endpoint",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointConnection",
	}:
		if err := (&controllersprivatelink.VpcEndpointConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcEndpointConnection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_privatelink_vpc_endpoint_connection"],
			TypeName: "alicloud_privatelink_vpc_endpoint_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcEndpointConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointService",
	}:
		if err := (&controllersprivatelink.VpcEndpointServiceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcEndpointService"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_privatelink_vpc_endpoint_service"],
			TypeName: "alicloud_privatelink_vpc_endpoint_service",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcEndpointService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointServiceResource",
	}:
		if err := (&controllersprivatelink.VpcEndpointServiceResourceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcEndpointServiceResource"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_privatelink_vpc_endpoint_service_resource"],
			TypeName: "alicloud_privatelink_vpc_endpoint_service_resource",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcEndpointServiceResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointServiceUser",
	}:
		if err := (&controllersprivatelink.VpcEndpointServiceUserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcEndpointServiceUser"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_privatelink_vpc_endpoint_service_user"],
			TypeName: "alicloud_privatelink_vpc_endpoint_service_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcEndpointServiceUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointZone",
	}:
		if err := (&controllersprivatelink.VpcEndpointZoneReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpcEndpointZone"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_privatelink_vpc_endpoint_zone"],
			TypeName: "alicloud_privatelink_vpc_endpoint_zone",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcEndpointZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserVpcAuthorization",
	}:
		if err := (&controllerspvtz.UserVpcAuthorizationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("UserVpcAuthorization"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_pvtz_user_vpc_authorization"],
			TypeName: "alicloud_pvtz_user_vpc_authorization",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserVpcAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Zone",
	}:
		if err := (&controllerspvtz.ZoneReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Zone"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_pvtz_zone"],
			TypeName: "alicloud_pvtz_zone",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Zone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ZoneAttachment",
	}:
		if err := (&controllerspvtz.ZoneAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ZoneAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_pvtz_zone_attachment"],
			TypeName: "alicloud_pvtz_zone_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ZoneAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ZoneRecord",
	}:
		if err := (&controllerspvtz.ZoneRecordReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ZoneRecord"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_pvtz_zone_record"],
			TypeName: "alicloud_pvtz_zone_record",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ZoneRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quick.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BiUser",
	}:
		if err := (&controllersquick.BiUserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BiUser"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_quick_bi_user"],
			TypeName: "alicloud_quick_bi_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BiUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quotas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationInfo",
	}:
		if err := (&controllersquotas.ApplicationInfoReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ApplicationInfo"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_quotas_application_info"],
			TypeName: "alicloud_quotas_application_info",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationInfo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quotas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QuotaAlarm",
	}:
		if err := (&controllersquotas.QuotaAlarmReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("QuotaAlarm"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_quotas_quota_alarm"],
			TypeName: "alicloud_quotas_quota_alarm",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QuotaAlarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quotas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QuotaApplication",
	}:
		if err := (&controllersquotas.QuotaApplicationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("QuotaApplication"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_quotas_quota_application"],
			TypeName: "alicloud_quotas_quota_application",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QuotaApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessKey",
	}:
		if err := (&controllersram.AccessKeyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccessKey"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_access_key"],
			TypeName: "alicloud_ram_access_key",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountAlias",
	}:
		if err := (&controllersram.AccountAliasReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccountAlias"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_account_alias"],
			TypeName: "alicloud_ram_account_alias",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPasswordPolicy",
	}:
		if err := (&controllersram.AccountPasswordPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AccountPasswordPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_account_password_policy"],
			TypeName: "alicloud_ram_account_password_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountPasswordPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&controllersram.AliasReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Alias"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_alias"],
			TypeName: "alicloud_ram_alias",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersram.GroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_group"],
			TypeName: "alicloud_ram_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupMembership",
	}:
		if err := (&controllersram.GroupMembershipReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("GroupMembership"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_group_membership"],
			TypeName: "alicloud_ram_group_membership",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAttachment",
	}:
		if err := (&controllersram.GroupPolicyAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("GroupPolicyAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_group_policy_attachment"],
			TypeName: "alicloud_ram_group_policy_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoginProfile",
	}:
		if err := (&controllersram.LoginProfileReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("LoginProfile"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_login_profile"],
			TypeName: "alicloud_ram_login_profile",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LoginProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersram.PolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_policy"],
			TypeName: "alicloud_ram_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Role",
	}:
		if err := (&controllersram.RoleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Role"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_role"],
			TypeName: "alicloud_ram_role",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Role")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RoleAttachment",
	}:
		if err := (&controllersram.RoleAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RoleAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_role_attachment"],
			TypeName: "alicloud_ram_role_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RoleAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RolePolicyAttachment",
	}:
		if err := (&controllersram.RolePolicyAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RolePolicyAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_role_policy_attachment"],
			TypeName: "alicloud_ram_role_policy_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RolePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamlProvider",
	}:
		if err := (&controllersram.SamlProviderReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SamlProvider"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_saml_provider"],
			TypeName: "alicloud_ram_saml_provider",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SamlProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllersram.UserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_user"],
			TypeName: "alicloud_ram_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPolicyAttachment",
	}:
		if err := (&controllersram.UserPolicyAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("UserPolicyAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ram_user_policy_attachment"],
			TypeName: "alicloud_ram_user_policy_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rdc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Organization",
	}:
		if err := (&controllersrdc.OrganizationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Organization"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_rdc_organization"],
			TypeName: "alicloud_rdc_organization",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Organization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersrds.AccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_rds_account"],
			TypeName: "alicloud_rds_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&controllersrds.ParameterGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ParameterGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_rds_parameter_group"],
			TypeName: "alicloud_rds_parameter_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "reserved.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersreserved.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_reserved_instance"],
			TypeName: "alicloud_reserved_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccount",
	}:
		if err := (&controllersresource.ManagerAccountReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerAccount"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_account"],
			TypeName: "alicloud_resource_manager_account",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerControlPolicy",
	}:
		if err := (&controllersresource.ManagerControlPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerControlPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_control_policy"],
			TypeName: "alicloud_resource_manager_control_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerControlPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerControlPolicyAttachment",
	}:
		if err := (&controllersresource.ManagerControlPolicyAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerControlPolicyAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_control_policy_attachment"],
			TypeName: "alicloud_resource_manager_control_policy_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerControlPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerFolder",
	}:
		if err := (&controllersresource.ManagerFolderReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerFolder"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_folder"],
			TypeName: "alicloud_resource_manager_folder",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerFolder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerHandshake",
	}:
		if err := (&controllersresource.ManagerHandshakeReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerHandshake"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_handshake"],
			TypeName: "alicloud_resource_manager_handshake",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerHandshake")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerPolicy",
	}:
		if err := (&controllersresource.ManagerPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_policy"],
			TypeName: "alicloud_resource_manager_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerPolicyAttachment",
	}:
		if err := (&controllersresource.ManagerPolicyAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerPolicyAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_policy_attachment"],
			TypeName: "alicloud_resource_manager_policy_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerPolicyVersion",
	}:
		if err := (&controllersresource.ManagerPolicyVersionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerPolicyVersion"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_policy_version"],
			TypeName: "alicloud_resource_manager_policy_version",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerPolicyVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerResourceDirectory",
	}:
		if err := (&controllersresource.ManagerResourceDirectoryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerResourceDirectory"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_resource_directory"],
			TypeName: "alicloud_resource_manager_resource_directory",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerResourceDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerResourceGroup",
	}:
		if err := (&controllersresource.ManagerResourceGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerResourceGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_resource_group"],
			TypeName: "alicloud_resource_manager_resource_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerResourceShare",
	}:
		if err := (&controllersresource.ManagerResourceShareReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerResourceShare"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_resource_share"],
			TypeName: "alicloud_resource_manager_resource_share",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerResourceShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerRole",
	}:
		if err := (&controllersresource.ManagerRoleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerRole"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_role"],
			TypeName: "alicloud_resource_manager_role",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSharedResource",
	}:
		if err := (&controllersresource.ManagerSharedResourceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerSharedResource"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_shared_resource"],
			TypeName: "alicloud_resource_manager_shared_resource",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSharedResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSharedTarget",
	}:
		if err := (&controllersresource.ManagerSharedTargetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ManagerSharedTarget"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_resource_manager_shared_target"],
			TypeName: "alicloud_resource_manager_shared_target",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSharedTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChangeSet",
	}:
		if err := (&controllersros.ChangeSetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ChangeSet"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ros_change_set"],
			TypeName: "alicloud_ros_change_set",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ChangeSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stack",
	}:
		if err := (&controllersros.StackReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Stack"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ros_stack"],
			TypeName: "alicloud_ros_stack",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Stack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StackGroup",
	}:
		if err := (&controllersros.StackGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("StackGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ros_stack_group"],
			TypeName: "alicloud_ros_stack_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StackGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&controllersros.TemplateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Template"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ros_template"],
			TypeName: "alicloud_ros_template",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Entry",
	}:
		if err := (&controllersroute.EntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Entry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_route_entry"],
			TypeName: "alicloud_route_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Entry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersroute.TableReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_route_table"],
			TypeName: "alicloud_route_table",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableAttachment",
	}:
		if err := (&controllersroute.TableAttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TableAttachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_route_table_attachment"],
			TypeName: "alicloud_route_table_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "router.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&controllersrouter.InterfaceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Interface"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_router_interface"],
			TypeName: "alicloud_router_interface",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "router.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceConnection",
	}:
		if err := (&controllersrouter.InterfaceConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("InterfaceConnection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_router_interface_connection"],
			TypeName: "alicloud_router_interface_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllerssae.ApplicationReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sae_application"],
			TypeName: "alicloud_sae_application",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigMap",
	}:
		if err := (&controllerssae.ConfigMapReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ConfigMap"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sae_config_map"],
			TypeName: "alicloud_sae_config_map",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ingress",
	}:
		if err := (&controllerssae.IngressReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Ingress"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sae_ingress"],
			TypeName: "alicloud_sae_ingress",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ingress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&controllerssae.NamespaceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Namespace"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sae_namespace"],
			TypeName: "alicloud_sae_namespace",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&controllerssag.AclReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Acl"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_acl"],
			TypeName: "alicloud_sag_acl",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclRule",
	}:
		if err := (&controllerssag.AclRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("AclRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_acl_rule"],
			TypeName: "alicloud_sag_acl_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AclRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientUser",
	}:
		if err := (&controllerssag.ClientUserReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ClientUser"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_client_user"],
			TypeName: "alicloud_sag_client_user",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClientUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnatEntry",
	}:
		if err := (&controllerssag.DnatEntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DnatEntry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_dnat_entry"],
			TypeName: "alicloud_sag_dnat_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnatEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Qos",
	}:
		if err := (&controllerssag.QosReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Qos"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_qos"],
			TypeName: "alicloud_sag_qos",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Qos")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QosCar",
	}:
		if err := (&controllerssag.QosCarReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("QosCar"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_qos_car"],
			TypeName: "alicloud_sag_qos_car",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QosCar")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QosPolicy",
	}:
		if err := (&controllerssag.QosPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("QosPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_qos_policy"],
			TypeName: "alicloud_sag_qos_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QosPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnatEntry",
	}:
		if err := (&controllerssag.SnatEntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SnatEntry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sag_snat_entry"],
			TypeName: "alicloud_sag_snat_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SnatEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "scdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllersscdn.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_scdn_domain"],
			TypeName: "alicloud_scdn_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "scdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainConfig",
	}:
		if err := (&controllersscdn.DomainConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainConfig"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_scdn_domain_config"],
			TypeName: "alicloud_scdn_domain_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sddp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Config",
	}:
		if err := (&controllerssddp.ConfigReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Config"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sddp_config"],
			TypeName: "alicloud_sddp_config",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Config")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sddp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerssddp.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sddp_instance"],
			TypeName: "alicloud_sddp_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sddp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllerssddp.RuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_sddp_rule"],
			TypeName: "alicloud_sddp_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterGroup",
	}:
		if err := (&controllerssecurity.CenterGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("CenterGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_security_center_group"],
			TypeName: "alicloud_security_center_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllerssecurity.GroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_security_group"],
			TypeName: "alicloud_security_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupRule",
	}:
		if err := (&controllerssecurity.GroupRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("GroupRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_security_group_rule"],
			TypeName: "alicloud_security_group_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MeshServiceMesh",
	}:
		if err := (&controllersservice.MeshServiceMeshReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MeshServiceMesh"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_service_mesh_service_mesh"],
			TypeName: "alicloud_service_mesh_service_mesh",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MeshServiceMesh")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "simple.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationServerInstance",
	}:
		if err := (&controllerssimple.ApplicationServerInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ApplicationServerInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_simple_application_server_instance"],
			TypeName: "alicloud_simple_application_server_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationServerInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Slb",
	}:
		if err := (&controllersslb.SlbReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Slb"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb"],
			TypeName: "alicloud_slb",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Slb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&controllersslb.AclReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Acl"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_acl"],
			TypeName: "alicloud_slb_acl",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllersslb.AttachmentReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_attachment"],
			TypeName: "alicloud_slb_attachment",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendServer",
	}:
		if err := (&controllersslb.BackendServerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BackendServer"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_backend_server"],
			TypeName: "alicloud_slb_backend_server",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CaCertificate",
	}:
		if err := (&controllersslb.CaCertificateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("CaCertificate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_ca_certificate"],
			TypeName: "alicloud_slb_ca_certificate",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CaCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainExtension",
	}:
		if err := (&controllersslb.DomainExtensionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DomainExtension"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_domain_extension"],
			TypeName: "alicloud_slb_domain_extension",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainExtension")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&controllersslb.ListenerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Listener"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_listener"],
			TypeName: "alicloud_slb_listener",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoadBalancer",
	}:
		if err := (&controllersslb.LoadBalancerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("LoadBalancer"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_load_balancer"],
			TypeName: "alicloud_slb_load_balancer",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LoadBalancer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MasterSlaveServerGroup",
	}:
		if err := (&controllersslb.MasterSlaveServerGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("MasterSlaveServerGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_master_slave_server_group"],
			TypeName: "alicloud_slb_master_slave_server_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MasterSlaveServerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllersslb.RuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_rule"],
			TypeName: "alicloud_slb_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerCertificate",
	}:
		if err := (&controllersslb.ServerCertificateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ServerCertificate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_server_certificate"],
			TypeName: "alicloud_slb_server_certificate",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerGroup",
	}:
		if err := (&controllersslb.ServerGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("ServerGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_server_group"],
			TypeName: "alicloud_slb_server_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TlsCipherPolicy",
	}:
		if err := (&controllersslb.TlsCipherPolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TlsCipherPolicy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_slb_tls_cipher_policy"],
			TypeName: "alicloud_slb_tls_cipher_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TlsCipherPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllerssnapshot.SnapshotReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_snapshot"],
			TypeName: "alicloud_snapshot",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllerssnapshot.PolicyReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_snapshot_policy"],
			TypeName: "alicloud_snapshot_policy",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snat.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Entry",
	}:
		if err := (&controllerssnat.EntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Entry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_snat_entry"],
			TypeName: "alicloud_snat_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Entry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssl.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificatesServiceCertificate",
	}:
		if err := (&controllersssl.CertificatesServiceCertificateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("CertificatesServiceCertificate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ssl_certificates_service_certificate"],
			TypeName: "alicloud_ssl_certificates_service_certificate",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CertificatesServiceCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssl.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnClientCert",
	}:
		if err := (&controllersssl.VpnClientCertReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpnClientCert"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ssl_vpn_client_cert"],
			TypeName: "alicloud_ssl_vpn_client_cert",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpnClientCert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssl.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnServer",
	}:
		if err := (&controllersssl.VpnServerReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("VpnServer"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_ssl_vpn_server"],
			TypeName: "alicloud_ssl_vpn_server",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpnServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&controllerssubnet.SubnetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Subnet"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_subnet"],
			TypeName: "alicloud_subnet",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tsdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerstsdb.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_tsdb_instance"],
			TypeName: "alicloud_tsdb_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "video.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SurveillanceSystemGroup",
	}:
		if err := (&controllersvideo.SurveillanceSystemGroupReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("SurveillanceSystemGroup"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_video_surveillance_system_group"],
			TypeName: "alicloud_video_surveillance_system_group",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SurveillanceSystemGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vod.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllersvod.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vod_domain"],
			TypeName: "alicloud_vod_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vpc",
	}:
		if err := (&controllersvpc.VpcReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Vpc"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc"],
			TypeName: "alicloud_vpc",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Vpc")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DhcpOptionsSet",
	}:
		if err := (&controllersvpc.DhcpOptionsSetReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DhcpOptionsSet"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc_dhcp_options_set"],
			TypeName: "alicloud_vpc_dhcp_options_set",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DhcpOptionsSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlowLog",
	}:
		if err := (&controllersvpc.FlowLogReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("FlowLog"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc_flow_log"],
			TypeName: "alicloud_vpc_flow_log",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FlowLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatIP",
	}:
		if err := (&controllersvpc.NatIPReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("NatIP"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc_nat_ip"],
			TypeName: "alicloud_vpc_nat_ip",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NatIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatIPCIDR",
	}:
		if err := (&controllersvpc.NatIPCIDRReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("NatIPCIDR"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc_nat_ip_cidr"],
			TypeName: "alicloud_vpc_nat_ip_cidr",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NatIPCIDR")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilter",
	}:
		if err := (&controllersvpc.TrafficMirrorFilterReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TrafficMirrorFilter"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc_traffic_mirror_filter"],
			TypeName: "alicloud_vpc_traffic_mirror_filter",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TrafficMirrorFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilterEgressRule",
	}:
		if err := (&controllersvpc.TrafficMirrorFilterEgressRuleReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("TrafficMirrorFilterEgressRule"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpc_traffic_mirror_filter_egress_rule"],
			TypeName: "alicloud_vpc_traffic_mirror_filter_egress_rule",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TrafficMirrorFilterEgressRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersvpn.ConnectionReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpn_connection"],
			TypeName: "alicloud_vpn_connection",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomerGateway",
	}:
		if err := (&controllersvpn.CustomerGatewayReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("CustomerGateway"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpn_customer_gateway"],
			TypeName: "alicloud_vpn_customer_gateway",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomerGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersvpn.GatewayReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpn_gateway"],
			TypeName: "alicloud_vpn_gateway",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteEntry",
	}:
		if err := (&controllersvpn.RouteEntryReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("RouteEntry"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vpn_route_entry"],
			TypeName: "alicloud_vpn_route_entry",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vswitch.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vswitch",
	}:
		if err := (&controllersvswitch.VswitchReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Vswitch"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_vswitch"],
			TypeName: "alicloud_vswitch",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Vswitch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllerswaf.CertificateReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_waf_certificate"],
			TypeName: "alicloud_waf_certificate",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerswaf.DomainReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_waf_domain"],
			TypeName: "alicloud_waf_domain",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerswaf.InstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_waf_instance"],
			TypeName: "alicloud_waf_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "yundun.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BastionhostInstance",
	}:
		if err := (&controllersyundun.BastionhostInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("BastionhostInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_yundun_bastionhost_instance"],
			TypeName: "alicloud_yundun_bastionhost_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BastionhostInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "yundun.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DbauditInstance",
	}:
		if err := (&controllersyundun.DbauditInstanceReconciler{
			Client:   mgr.GetClient(),
			Log:      ctrl.Log.WithName("controllers").WithName("DbauditInstance"),
			Scheme:   mgr.GetScheme(),
			Gvk:      gvk,
			Provider: _provider,
			Resource: _provider.ResourcesMap["alicloud_yundun_dbaudit_instance"],
			TypeName: "alicloud_yundun_dbaudit_instance",
		}).SetupWithManager(ctx, mgr, auditor, restrictToNamespace); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DbauditInstance")
			return err
		}

	default:
		return fmt.Errorf("Invalid CRD")
	}

	return nil
}

func SetupWebhook(mgr manager.Manager, gvk schema.GroupVersionKind) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "actiontrail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Actiontrail",
	}:
		if err := (&actiontrailv1alpha1.Actiontrail{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Actiontrail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "actiontrail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HistoryDeliveryJob",
	}:
		if err := (&actiontrailv1alpha1.HistoryDeliveryJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HistoryDeliveryJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "actiontrail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trail",
	}:
		if err := (&actiontrailv1alpha1.Trail{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Trail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&adbv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&adbv1alpha1.BackupPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&adbv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&adbv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "adb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DbCluster",
	}:
		if err := (&adbv1alpha1.DbCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DbCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&albv1alpha1.Acl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HealthCheckTemplate",
	}:
		if err := (&albv1alpha1.HealthCheckTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HealthCheckTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&albv1alpha1.Listener{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoadBalancer",
	}:
		if err := (&albv1alpha1.LoadBalancer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LoadBalancer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&albv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityPolicy",
	}:
		if err := (&albv1alpha1.SecurityPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerGroup",
	}:
		if err := (&albv1alpha1.ServerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&alidnsv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainAttachment",
	}:
		if err := (&alidnsv1alpha1.DomainAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainGroup",
	}:
		if err := (&alidnsv1alpha1.DomainGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&alidnsv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alidns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Record",
	}:
		if err := (&alidnsv1alpha1.Record{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Record")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsumerGroup",
	}:
		if err := (&alikafkav1alpha1.ConsumerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsumerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&alikafkav1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SaslACL",
	}:
		if err := (&alikafkav1alpha1.SaslACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SaslACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SaslUser",
	}:
		if err := (&alikafkav1alpha1.SaslUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SaslUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alikafka.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&alikafkav1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Binding",
	}:
		if err := (&amqpv1alpha1.Binding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Binding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Exchange",
	}:
		if err := (&amqpv1alpha1.Exchange{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Exchange")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&amqpv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&amqpv1alpha1.Queue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amqp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualHost",
	}:
		if err := (&amqpv1alpha1.VirtualHost{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Api",
	}:
		if err := (&apigatewayv1alpha1.Api{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Api")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&apigatewayv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppAttachment",
	}:
		if err := (&apigatewayv1alpha1.AppAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&apigatewayv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcAccess",
	}:
		if err := (&apigatewayv1alpha1.VpcAccess{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcAccess")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertContact",
	}:
		if err := (&armsv1alpha1.AlertContact{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertContactGroup",
	}:
		if err := (&armsv1alpha1.AlertContactGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertContactGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DispatchRule",
	}:
		if err := (&armsv1alpha1.DispatchRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DispatchRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "arms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrometheusAlertRule",
	}:
		if err := (&armsv1alpha1.PrometheusAlertRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrometheusAlertRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "auto.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProvisioningGroup",
	}:
		if err := (&autov1alpha1.ProvisioningGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProvisioningGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Host",
	}:
		if err := (&bastionhostv1alpha1.Host{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Host")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAccount",
	}:
		if err := (&bastionhostv1alpha1.HostAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAccountUserAttachment",
	}:
		if err := (&bastionhostv1alpha1.HostAccountUserAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostAccountUserAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAccountUserGroupAttachment",
	}:
		if err := (&bastionhostv1alpha1.HostAccountUserGroupAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostAccountUserGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostAttachment",
	}:
		if err := (&bastionhostv1alpha1.HostAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostGroup",
	}:
		if err := (&bastionhostv1alpha1.HostGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostGroupAccountUserAttachment",
	}:
		if err := (&bastionhostv1alpha1.HostGroupAccountUserAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostGroupAccountUserAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostGroupAccountUserGroupAttachment",
	}:
		if err := (&bastionhostv1alpha1.HostGroupAccountUserGroupAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostGroupAccountUserGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&bastionhostv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&bastionhostv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserAttachment",
	}:
		if err := (&bastionhostv1alpha1.UserAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastionhost.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserGroup",
	}:
		if err := (&bastionhostv1alpha1.UserGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "brain.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IndustrialPidLoop",
	}:
		if err := (&brainv1alpha1.IndustrialPidLoop{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IndustrialPidLoop")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "brain.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IndustrialPidOrganization",
	}:
		if err := (&brainv1alpha1.IndustrialPidOrganization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IndustrialPidOrganization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "brain.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IndustrialPidProject",
	}:
		if err := (&brainv1alpha1.IndustrialPidProject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IndustrialPidProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&casv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cassandra.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPlan",
	}:
		if err := (&cassandrav1alpha1.BackupPlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cassandra.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&cassandrav1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cassandra.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataCenter",
	}:
		if err := (&cassandrav1alpha1.DataCenter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataCenter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cddc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DedicatedHostGroup",
	}:
		if err := (&cddcv1alpha1.DedicatedHostGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DedicatedHostGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&cdnv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainConfig",
	}:
		if err := (&cdnv1alpha1.DomainConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainNew",
	}:
		if err := (&cdnv1alpha1.DomainNew{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainNew")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RealTimeLogDelivery",
	}:
		if err := (&cdnv1alpha1.RealTimeLogDelivery{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RealTimeLogDelivery")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthLimit",
	}:
		if err := (&cenv1alpha1.BandwidthLimit{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthLimit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackage",
	}:
		if err := (&cenv1alpha1.BandwidthPackage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthPackage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackageAttachment",
	}:
		if err := (&cenv1alpha1.BandwidthPackageAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthPackageAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Flowlog",
	}:
		if err := (&cenv1alpha1.Flowlog{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Flowlog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&cenv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceAttachment",
	}:
		if err := (&cenv1alpha1.InstanceAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGrant",
	}:
		if err := (&cenv1alpha1.InstanceGrant{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceGrant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateZone",
	}:
		if err := (&cenv1alpha1.PrivateZone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrivateZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteEntry",
	}:
		if err := (&cenv1alpha1.RouteEntry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteMap",
	}:
		if err := (&cenv1alpha1.RouteMap{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteService",
	}:
		if err := (&cenv1alpha1.RouteService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouter",
	}:
		if err := (&cenv1alpha1.TransitRouter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterPeerAttachment",
	}:
		if err := (&cenv1alpha1.TransitRouterPeerAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterPeerAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteEntry",
	}:
		if err := (&cenv1alpha1.TransitRouterRouteEntry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterRouteEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteTable",
	}:
		if err := (&cenv1alpha1.TransitRouterRouteTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterRouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteTableAssociation",
	}:
		if err := (&cenv1alpha1.TransitRouterRouteTableAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterRouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterRouteTablePropagation",
	}:
		if err := (&cenv1alpha1.TransitRouterRouteTablePropagation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterRouteTablePropagation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterVbrAttachment",
	}:
		if err := (&cenv1alpha1.TransitRouterVbrAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterVbrAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitRouterVpcAttachment",
	}:
		if err := (&cenv1alpha1.TransitRouterVpcAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitRouterVpcAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cen.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VbrHealthCheck",
	}:
		if err := (&cenv1alpha1.VbrHealthCheck{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VbrHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "click.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HouseAccount",
	}:
		if err := (&clickv1alpha1.HouseAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HouseAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "click.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HouseDbCluster",
	}:
		if err := (&clickv1alpha1.HouseDbCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HouseDbCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectNetwork",
	}:
		if err := (&cloudv1alpha1.ConnectNetwork{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectNetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectNetworkAttachment",
	}:
		if err := (&cloudv1alpha1.ConnectNetworkAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectNetworkAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectNetworkGrant",
	}:
		if err := (&cloudv1alpha1.ConnectNetworkGrant{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectNetworkGrant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallControlPolicy",
	}:
		if err := (&cloudv1alpha1.FirewallControlPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallControlPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallControlPolicyOrder",
	}:
		if err := (&cloudv1alpha1.FirewallControlPolicyOrder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallControlPolicyOrder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallInstance",
	}:
		if err := (&cloudv1alpha1.FirewallInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoAccessConfiguration",
	}:
		if err := (&cloudv1alpha1.SsoAccessConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SsoAccessConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoDirectory",
	}:
		if err := (&cloudv1alpha1.SsoDirectory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SsoDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoGroup",
	}:
		if err := (&cloudv1alpha1.SsoGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SsoGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoScimServerCredential",
	}:
		if err := (&cloudv1alpha1.SsoScimServerCredential{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SsoScimServerCredential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SsoUser",
	}:
		if err := (&cloudv1alpha1.SsoUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SsoUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StorageGatewayGateway",
	}:
		if err := (&cloudv1alpha1.StorageGatewayGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StorageGatewayGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StorageGatewayStorageBundle",
	}:
		if err := (&cloudv1alpha1.StorageGatewayStorageBundle{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StorageGatewayStorageBundle")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudauth.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FaceConfig",
	}:
		if err := (&cloudauthv1alpha1.FaceConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FaceConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alarm",
	}:
		if err := (&cmsv1alpha1.Alarm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlarmContact",
	}:
		if err := (&cmsv1alpha1.AlarmContact{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlarmContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlarmContactGroup",
	}:
		if err := (&cmsv1alpha1.AlarmContactGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlarmContactGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupMetricRule",
	}:
		if err := (&cmsv1alpha1.GroupMetricRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupMetricRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricRuleTemplate",
	}:
		if err := (&cmsv1alpha1.MetricRuleTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MetricRuleTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MonitorGroup",
	}:
		if err := (&cmsv1alpha1.MonitorGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MonitorGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MonitorGroupInstances",
	}:
		if err := (&cmsv1alpha1.MonitorGroupInstances{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MonitorGroupInstances")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SiteMonitor",
	}:
		if err := (&cmsv1alpha1.SiteMonitor{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SiteMonitor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "common.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackage",
	}:
		if err := (&commonv1alpha1.BandwidthPackage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthPackage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "common.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackageAttachment",
	}:
		if err := (&commonv1alpha1.BandwidthPackageAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthPackageAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AggregateCompliancePack",
	}:
		if err := (&configv1alpha1.AggregateCompliancePack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AggregateCompliancePack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AggregateConfigRule",
	}:
		if err := (&configv1alpha1.AggregateConfigRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AggregateConfigRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Aggregator",
	}:
		if err := (&configv1alpha1.Aggregator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Aggregator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CompliancePack",
	}:
		if err := (&configv1alpha1.CompliancePack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CompliancePack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationRecorder",
	}:
		if err := (&configv1alpha1.ConfigurationRecorder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigurationRecorder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeliveryChannel",
	}:
		if err := (&configv1alpha1.DeliveryChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeliveryChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&configv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&containerv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "copy.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&copyv1alpha1.Image{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeInstance",
	}:
		if err := (&crv1alpha1.EeInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EeInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeNamespace",
	}:
		if err := (&crv1alpha1.EeNamespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EeNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeRepo",
	}:
		if err := (&crv1alpha1.EeRepo{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EeRepo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EeSyncRule",
	}:
		if err := (&crv1alpha1.EeSyncRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EeSyncRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointACLPolicy",
	}:
		if err := (&crv1alpha1.EndpointACLPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointACLPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&crv1alpha1.Namespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repo",
	}:
		if err := (&crv1alpha1.Repo{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Repo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&csv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoscalingConfig",
	}:
		if err := (&csv1alpha1.AutoscalingConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AutoscalingConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EdgeKubernetes",
	}:
		if err := (&csv1alpha1.EdgeKubernetes{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EdgeKubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Kubernetes",
	}:
		if err := (&csv1alpha1.Kubernetes{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Kubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesAutoscaler",
	}:
		if err := (&csv1alpha1.KubernetesAutoscaler{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KubernetesAutoscaler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesNodePool",
	}:
		if err := (&csv1alpha1.KubernetesNodePool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KubernetesNodePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesPermissions",
	}:
		if err := (&csv1alpha1.KubernetesPermissions{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KubernetesPermissions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedKubernetes",
	}:
		if err := (&csv1alpha1.ManagedKubernetes{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedKubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerlessKubernetes",
	}:
		if err := (&csv1alpha1.ServerlessKubernetes{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerlessKubernetes")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Swarm",
	}:
		if err := (&csv1alpha1.Swarm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Swarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WorksFolder",
	}:
		if err := (&datav1alpha1.WorksFolder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WorksFolder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "database.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayGateway",
	}:
		if err := (&databasev1alpha1.GatewayGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datahub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&datahubv1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datahub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&datahubv1alpha1.Subscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datahub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&datahubv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&dbv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPrivilege",
	}:
		if err := (&dbv1alpha1.AccountPrivilege{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountPrivilege")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&dbv1alpha1.BackupPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&dbv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&dbv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&dbv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReadWriteSplittingConnection",
	}:
		if err := (&dbv1alpha1.ReadWriteSplittingConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReadWriteSplittingConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReadonlyInstance",
	}:
		if err := (&dbv1alpha1.ReadonlyInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReadonlyInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dbfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&dbfsv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dcdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&dcdnv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dcdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainConfig",
	}:
		if err := (&dcdnv1alpha1.DomainConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddosbgp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&ddosbgpv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainResource",
	}:
		if err := (&ddoscoov1alpha1.DomainResource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&ddoscoov1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Port",
	}:
		if err := (&ddoscoov1alpha1.Port{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Port")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ddoscoo.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SchedulerRule",
	}:
		if err := (&ddoscoov1alpha1.SchedulerRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SchedulerRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessGroup",
	}:
		if err := (&dfsv1alpha1.AccessGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessRule",
	}:
		if err := (&dfsv1alpha1.AccessRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystem",
	}:
		if err := (&dfsv1alpha1.FileSystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dfs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MountPoint",
	}:
		if err := (&dfsv1alpha1.MountPoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MountPoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "direct.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MailDomain",
	}:
		if err := (&directv1alpha1.MailDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MailDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "direct.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MailMailAddress",
	}:
		if err := (&directv1alpha1.MailMailAddress{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MailMailAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "direct.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MailReceivers",
	}:
		if err := (&directv1alpha1.MailReceivers{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MailReceivers")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&diskv1alpha1.Disk{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&diskv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseInstance",
	}:
		if err := (&dmsv1alpha1.EnterpriseInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EnterpriseInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseUser",
	}:
		if err := (&dmsv1alpha1.EnterpriseUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EnterpriseUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dns",
	}:
		if err := (&dnsv1alpha1.Dns{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dns")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&dnsv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainAttachment",
	}:
		if err := (&dnsv1alpha1.DomainAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&dnsv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&dnsv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Record",
	}:
		if err := (&dnsv1alpha1.Record{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Record")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "drds.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&drdsv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobMonitorRule",
	}:
		if err := (&dtsv1alpha1.JobMonitorRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobMonitorRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionJob",
	}:
		if err := (&dtsv1alpha1.SubscriptionJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubscriptionJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SynchronizationInstance",
	}:
		if err := (&dtsv1alpha1.SynchronizationInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SynchronizationInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dts.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SynchronizationJob",
	}:
		if err := (&dtsv1alpha1.SynchronizationJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SynchronizationJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eais.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&eaisv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecd.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyGroup",
	}:
		if err := (&ecdv1alpha1.PolicyGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecd.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SimpleOfficeSite",
	}:
		if err := (&ecdv1alpha1.SimpleOfficeSite{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SimpleOfficeSite")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eci.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ContainerGroup",
	}:
		if err := (&eciv1alpha1.ContainerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ContainerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eci.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageCache",
	}:
		if err := (&eciv1alpha1.ImageCache{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImageCache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eci.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OpenapiImageCache",
	}:
		if err := (&eciv1alpha1.OpenapiImageCache{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OpenapiImageCache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&ecpv1alpha1.KeyPair{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoSnapshotPolicy",
	}:
		if err := (&ecsv1alpha1.AutoSnapshotPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AutoSnapshotPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoSnapshotPolicyAttachment",
	}:
		if err := (&ecsv1alpha1.AutoSnapshotPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AutoSnapshotPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Command",
	}:
		if err := (&ecsv1alpha1.Command{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Command")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DedicatedHost",
	}:
		if err := (&ecsv1alpha1.DedicatedHost{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DedicatedHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeploymentSet",
	}:
		if err := (&ecsv1alpha1.DeploymentSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeploymentSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&ecsv1alpha1.Disk{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskAttachment",
	}:
		if err := (&ecsv1alpha1.DiskAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DiskAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HpcCluster",
	}:
		if err := (&ecsv1alpha1.HpcCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HpcCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&ecsv1alpha1.KeyPair{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPairAttachment",
	}:
		if err := (&ecsv1alpha1.KeyPairAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyPairAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LaunchTemplate",
	}:
		if err := (&ecsv1alpha1.LaunchTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LaunchTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkInterface",
	}:
		if err := (&ecsv1alpha1.NetworkInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkInterfaceAttachment",
	}:
		if err := (&ecsv1alpha1.NetworkInterfaceAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkInterfaceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&ecsv1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&edasv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationDeployment",
	}:
		if err := (&edasv1alpha1.ApplicationDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationScale",
	}:
		if err := (&edasv1alpha1.ApplicationScale{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationScale")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&edasv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeployGroup",
	}:
		if err := (&edasv1alpha1.DeployGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeployGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceClusterAttachment",
	}:
		if err := (&edasv1alpha1.InstanceClusterAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceClusterAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "K8sApplication",
	}:
		if err := (&edasv1alpha1.K8sApplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "K8sApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "K8sCluster",
	}:
		if err := (&edasv1alpha1.K8sCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "K8sCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "edas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SlbAttachment",
	}:
		if err := (&edasv1alpha1.SlbAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SlbAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ehpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobTemplate",
	}:
		if err := (&ehpcv1alpha1.JobTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Eip",
	}:
		if err := (&eipv1alpha1.Eip{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Eip")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Address",
	}:
		if err := (&eipv1alpha1.Address{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Address")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&eipv1alpha1.Association{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eipanycast.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnycastEipAddress",
	}:
		if err := (&eipanycastv1alpha1.AnycastEipAddress{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnycastEipAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eipanycast.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnycastEipAddressAttachment",
	}:
		if err := (&eipanycastv1alpha1.AnycastEipAddressAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnycastEipAddressAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearch.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&elasticsearchv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&emrv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ens.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&ensv1alpha1.KeyPair{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alarm",
	}:
		if err := (&essv1alpha1.Alarm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&essv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecycleHook",
	}:
		if err := (&essv1alpha1.LifecycleHook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LifecycleHook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Notification",
	}:
		if err := (&essv1alpha1.Notification{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Notification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingConfiguration",
	}:
		if err := (&essv1alpha1.ScalingConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScalingConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingGroup",
	}:
		if err := (&essv1alpha1.ScalingGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScalingGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingRule",
	}:
		if err := (&essv1alpha1.ScalingRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScalingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalinggroupVserverGroups",
	}:
		if err := (&essv1alpha1.ScalinggroupVserverGroups{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScalinggroupVserverGroups")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&essv1alpha1.Schedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ess.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledTask",
	}:
		if err := (&essv1alpha1.ScheduledTask{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScheduledTask")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeEventBus",
	}:
		if err := (&eventv1alpha1.BridgeEventBus{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BridgeEventBus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeEventSource",
	}:
		if err := (&eventv1alpha1.BridgeEventSource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BridgeEventSource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeRule",
	}:
		if err := (&eventv1alpha1.BridgeRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BridgeRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "event.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BridgeSlr",
	}:
		if err := (&eventv1alpha1.BridgeSlr{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BridgeSlr")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "express.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectPhysicalConnection",
	}:
		if err := (&expressv1alpha1.ConnectPhysicalConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectPhysicalConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "express.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectVirtualBorderRouter",
	}:
		if err := (&expressv1alpha1.ConnectVirtualBorderRouter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectVirtualBorderRouter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&fcv1alpha1.Alias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDomain",
	}:
		if err := (&fcv1alpha1.CustomDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&fcv1alpha1.Function{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FunctionAsyncInvokeConfig",
	}:
		if err := (&fcv1alpha1.FunctionAsyncInvokeConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FunctionAsyncInvokeConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&fcv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&fcv1alpha1.Trigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fnf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Flow",
	}:
		if err := (&fnfv1alpha1.Flow{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Flow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fnf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&fnfv1alpha1.Schedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "forward.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Entry",
	}:
		if err := (&forwardv1alpha1.Entry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Entry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Accelerator",
	}:
		if err := (&gav1alpha1.Accelerator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Accelerator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackage",
	}:
		if err := (&gav1alpha1.BandwidthPackage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthPackage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BandwidthPackageAttachment",
	}:
		if err := (&gav1alpha1.BandwidthPackageAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BandwidthPackageAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointGroup",
	}:
		if err := (&gav1alpha1.EndpointGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ForwardingRule",
	}:
		if err := (&gav1alpha1.ForwardingRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ForwardingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IpSet",
	}:
		if err := (&gav1alpha1.IpSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IpSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ga.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&gav1alpha1.Listener{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gpdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&gpdbv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gpdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ElasticInstance",
	}:
		if err := (&gpdbv1alpha1.ElasticInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ElasticInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gpdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&gpdbv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "graph.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseDbInstance",
	}:
		if err := (&graphv1alpha1.DatabaseDbInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseDbInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "havip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Havip",
	}:
		if err := (&havipv1alpha1.Havip{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Havip")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "havip.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&havipv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbase.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&hbasev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EcsBackupClient",
	}:
		if err := (&hbrv1alpha1.EcsBackupClient{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EcsBackupClient")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EcsBackupPlan",
	}:
		if err := (&hbrv1alpha1.EcsBackupPlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EcsBackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NasBackupPlan",
	}:
		if err := (&hbrv1alpha1.NasBackupPlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NasBackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OssBackupPlan",
	}:
		if err := (&hbrv1alpha1.OssBackupPlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OssBackupPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RestoreJob",
	}:
		if err := (&hbrv1alpha1.RestoreJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RestoreJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hbr.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vault",
	}:
		if err := (&hbrv1alpha1.Vault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Vault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&imagev1alpha1.Image{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Copy",
	}:
		if err := (&imagev1alpha1.Copy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Copy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Export",
	}:
		if err := (&imagev1alpha1.Export{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Export")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Import",
	}:
		if err := (&imagev1alpha1.Import{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Import")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharePermission",
	}:
		if err := (&imagev1alpha1.SharePermission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SharePermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imm.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&immv1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppTemplate",
	}:
		if err := (&impv1alpha1.AppTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "instance.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&instancev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeviceGroup",
	}:
		if err := (&iotv1alpha1.DeviceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeviceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "key.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pair",
	}:
		if err := (&keyv1alpha1.Pair{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Pair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "key.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PairAttachment",
	}:
		if err := (&keyv1alpha1.PairAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PairAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&kmsv1alpha1.Alias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ciphertext",
	}:
		if err := (&kmsv1alpha1.Ciphertext{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ciphertext")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Key",
	}:
		if err := (&kmsv1alpha1.Key{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Key")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyVersion",
	}:
		if err := (&kmsv1alpha1.KeyVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Secret",
	}:
		if err := (&kmsv1alpha1.Secret{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Secret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&kvstorev1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuditLogConfig",
	}:
		if err := (&kvstorev1alpha1.AuditLogConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AuditLogConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&kvstorev1alpha1.BackupPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&kvstorev1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kvstore.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&kvstorev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "launch.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&launchv1alpha1.Template{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lindorm.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&lindormv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alert",
	}:
		if err := (&logv1alpha1.Alert{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Audit",
	}:
		if err := (&logv1alpha1.Audit{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Audit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&logv1alpha1.Dashboard{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Etl",
	}:
		if err := (&logv1alpha1.Etl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Etl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineGroup",
	}:
		if err := (&logv1alpha1.MachineGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MachineGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OssShipper",
	}:
		if err := (&logv1alpha1.OssShipper{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OssShipper")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&logv1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Store",
	}:
		if err := (&logv1alpha1.Store{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Store")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "log.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoreIndex",
	}:
		if err := (&logv1alpha1.StoreIndex{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StoreIndex")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logtail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&logtailv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logtail.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Config",
	}:
		if err := (&logtailv1alpha1.Config{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Config")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "market.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Order",
	}:
		if err := (&marketv1alpha1.Order{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Order")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maxcompute.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&maxcomputev1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mhub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&mhubv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mhub.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Product",
	}:
		if err := (&mhubv1alpha1.Product{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Product")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&mnsv1alpha1.Queue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&mnsv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mns.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicSubscription",
	}:
		if err := (&mnsv1alpha1.TopicSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mongodb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&mongodbv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mongodb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShardingInstance",
	}:
		if err := (&mongodbv1alpha1.ShardingInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShardingInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubContact",
	}:
		if err := (&mscv1alpha1.SubContact{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubSubscription",
	}:
		if err := (&mscv1alpha1.SubSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mse.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&msev1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessGroup",
	}:
		if err := (&nasv1alpha1.AccessGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessRule",
	}:
		if err := (&nasv1alpha1.AccessRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystem",
	}:
		if err := (&nasv1alpha1.FileSystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MountTarget",
	}:
		if err := (&nasv1alpha1.MountTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MountTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&natv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&networkv1alpha1.Acl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclAttachment",
	}:
		if err := (&networkv1alpha1.AclAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AclAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclEntries",
	}:
		if err := (&networkv1alpha1.AclEntries{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AclEntries")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&networkv1alpha1.Interface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceAttachment",
	}:
		if err := (&networkv1alpha1.InterfaceAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ons.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&onsv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ons.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&onsv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ons.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&onsv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oos.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Execution",
	}:
		if err := (&oosv1alpha1.Execution{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Execution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oos.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&oosv1alpha1.Template{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "open.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SearchAppGroup",
	}:
		if err := (&openv1alpha1.SearchAppGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SearchAppGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oss.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&ossv1alpha1.Bucket{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "oss.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketObject",
	}:
		if err := (&ossv1alpha1.BucketObject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketObject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ots.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&otsv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ots.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceAttachment",
	}:
		if err := (&otsv1alpha1.InstanceAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ots.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&otsv1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&polardbv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPrivilege",
	}:
		if err := (&polardbv1alpha1.AccountPrivilege{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountPrivilege")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&polardbv1alpha1.BackupPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&polardbv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&polardbv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&polardbv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "polardb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointAddress",
	}:
		if err := (&polardbv1alpha1.EndpointAddress{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpoint",
	}:
		if err := (&privatelinkv1alpha1.VpcEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointConnection",
	}:
		if err := (&privatelinkv1alpha1.VpcEndpointConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcEndpointConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointService",
	}:
		if err := (&privatelinkv1alpha1.VpcEndpointService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcEndpointService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointServiceResource",
	}:
		if err := (&privatelinkv1alpha1.VpcEndpointServiceResource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcEndpointServiceResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointServiceUser",
	}:
		if err := (&privatelinkv1alpha1.VpcEndpointServiceUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcEndpointServiceUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "privatelink.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcEndpointZone",
	}:
		if err := (&privatelinkv1alpha1.VpcEndpointZone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcEndpointZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserVpcAuthorization",
	}:
		if err := (&pvtzv1alpha1.UserVpcAuthorization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserVpcAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Zone",
	}:
		if err := (&pvtzv1alpha1.Zone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Zone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ZoneAttachment",
	}:
		if err := (&pvtzv1alpha1.ZoneAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ZoneAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pvtz.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ZoneRecord",
	}:
		if err := (&pvtzv1alpha1.ZoneRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ZoneRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quick.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BiUser",
	}:
		if err := (&quickv1alpha1.BiUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BiUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quotas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationInfo",
	}:
		if err := (&quotasv1alpha1.ApplicationInfo{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationInfo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quotas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QuotaAlarm",
	}:
		if err := (&quotasv1alpha1.QuotaAlarm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QuotaAlarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quotas.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QuotaApplication",
	}:
		if err := (&quotasv1alpha1.QuotaApplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QuotaApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessKey",
	}:
		if err := (&ramv1alpha1.AccessKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountAlias",
	}:
		if err := (&ramv1alpha1.AccountAlias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPasswordPolicy",
	}:
		if err := (&ramv1alpha1.AccountPasswordPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountPasswordPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&ramv1alpha1.Alias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&ramv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupMembership",
	}:
		if err := (&ramv1alpha1.GroupMembership{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAttachment",
	}:
		if err := (&ramv1alpha1.GroupPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoginProfile",
	}:
		if err := (&ramv1alpha1.LoginProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LoginProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&ramv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Role",
	}:
		if err := (&ramv1alpha1.Role{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Role")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RoleAttachment",
	}:
		if err := (&ramv1alpha1.RoleAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RoleAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RolePolicyAttachment",
	}:
		if err := (&ramv1alpha1.RolePolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RolePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamlProvider",
	}:
		if err := (&ramv1alpha1.SamlProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SamlProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&ramv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPolicyAttachment",
	}:
		if err := (&ramv1alpha1.UserPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rdc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Organization",
	}:
		if err := (&rdcv1alpha1.Organization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Organization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&rdsv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&rdsv1alpha1.ParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "reserved.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&reservedv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccount",
	}:
		if err := (&resourcev1alpha1.ManagerAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerControlPolicy",
	}:
		if err := (&resourcev1alpha1.ManagerControlPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerControlPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerControlPolicyAttachment",
	}:
		if err := (&resourcev1alpha1.ManagerControlPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerControlPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerFolder",
	}:
		if err := (&resourcev1alpha1.ManagerFolder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerFolder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerHandshake",
	}:
		if err := (&resourcev1alpha1.ManagerHandshake{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerHandshake")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerPolicy",
	}:
		if err := (&resourcev1alpha1.ManagerPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerPolicyAttachment",
	}:
		if err := (&resourcev1alpha1.ManagerPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerPolicyVersion",
	}:
		if err := (&resourcev1alpha1.ManagerPolicyVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerPolicyVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerResourceDirectory",
	}:
		if err := (&resourcev1alpha1.ManagerResourceDirectory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerResourceDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerResourceGroup",
	}:
		if err := (&resourcev1alpha1.ManagerResourceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerResourceShare",
	}:
		if err := (&resourcev1alpha1.ManagerResourceShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerResourceShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerRole",
	}:
		if err := (&resourcev1alpha1.ManagerRole{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSharedResource",
	}:
		if err := (&resourcev1alpha1.ManagerSharedResource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSharedResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSharedTarget",
	}:
		if err := (&resourcev1alpha1.ManagerSharedTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSharedTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChangeSet",
	}:
		if err := (&rosv1alpha1.ChangeSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ChangeSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stack",
	}:
		if err := (&rosv1alpha1.Stack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Stack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StackGroup",
	}:
		if err := (&rosv1alpha1.StackGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StackGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ros.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&rosv1alpha1.Template{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Entry",
	}:
		if err := (&routev1alpha1.Entry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Entry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&routev1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableAttachment",
	}:
		if err := (&routev1alpha1.TableAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "router.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&routerv1alpha1.Interface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "router.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceConnection",
	}:
		if err := (&routerv1alpha1.InterfaceConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&saev1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigMap",
	}:
		if err := (&saev1alpha1.ConfigMap{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ingress",
	}:
		if err := (&saev1alpha1.Ingress{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ingress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sae.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&saev1alpha1.Namespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&sagv1alpha1.Acl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclRule",
	}:
		if err := (&sagv1alpha1.AclRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AclRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientUser",
	}:
		if err := (&sagv1alpha1.ClientUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClientUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnatEntry",
	}:
		if err := (&sagv1alpha1.DnatEntry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnatEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Qos",
	}:
		if err := (&sagv1alpha1.Qos{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Qos")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QosCar",
	}:
		if err := (&sagv1alpha1.QosCar{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QosCar")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QosPolicy",
	}:
		if err := (&sagv1alpha1.QosPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QosPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sag.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnatEntry",
	}:
		if err := (&sagv1alpha1.SnatEntry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SnatEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "scdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&scdnv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "scdn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainConfig",
	}:
		if err := (&scdnv1alpha1.DomainConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sddp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Config",
	}:
		if err := (&sddpv1alpha1.Config{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Config")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sddp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&sddpv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sddp.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&sddpv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterGroup",
	}:
		if err := (&securityv1alpha1.CenterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&securityv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupRule",
	}:
		if err := (&securityv1alpha1.GroupRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MeshServiceMesh",
	}:
		if err := (&servicev1alpha1.MeshServiceMesh{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MeshServiceMesh")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "simple.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationServerInstance",
	}:
		if err := (&simplev1alpha1.ApplicationServerInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationServerInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Slb",
	}:
		if err := (&slbv1alpha1.Slb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Slb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&slbv1alpha1.Acl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&slbv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendServer",
	}:
		if err := (&slbv1alpha1.BackendServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CaCertificate",
	}:
		if err := (&slbv1alpha1.CaCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CaCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainExtension",
	}:
		if err := (&slbv1alpha1.DomainExtension{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainExtension")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&slbv1alpha1.Listener{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoadBalancer",
	}:
		if err := (&slbv1alpha1.LoadBalancer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LoadBalancer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MasterSlaveServerGroup",
	}:
		if err := (&slbv1alpha1.MasterSlaveServerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MasterSlaveServerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&slbv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerCertificate",
	}:
		if err := (&slbv1alpha1.ServerCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerGroup",
	}:
		if err := (&slbv1alpha1.ServerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "slb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TlsCipherPolicy",
	}:
		if err := (&slbv1alpha1.TlsCipherPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TlsCipherPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&snapshotv1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&snapshotv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snat.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Entry",
	}:
		if err := (&snatv1alpha1.Entry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Entry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssl.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificatesServiceCertificate",
	}:
		if err := (&sslv1alpha1.CertificatesServiceCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CertificatesServiceCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssl.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnClientCert",
	}:
		if err := (&sslv1alpha1.VpnClientCert{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpnClientCert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssl.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnServer",
	}:
		if err := (&sslv1alpha1.VpnServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpnServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&subnetv1alpha1.Subnet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tsdb.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&tsdbv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "video.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SurveillanceSystemGroup",
	}:
		if err := (&videov1alpha1.SurveillanceSystemGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SurveillanceSystemGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vod.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&vodv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vpc",
	}:
		if err := (&vpcv1alpha1.Vpc{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Vpc")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DhcpOptionsSet",
	}:
		if err := (&vpcv1alpha1.DhcpOptionsSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DhcpOptionsSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlowLog",
	}:
		if err := (&vpcv1alpha1.FlowLog{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FlowLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatIP",
	}:
		if err := (&vpcv1alpha1.NatIP{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NatIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatIPCIDR",
	}:
		if err := (&vpcv1alpha1.NatIPCIDR{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NatIPCIDR")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilter",
	}:
		if err := (&vpcv1alpha1.TrafficMirrorFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TrafficMirrorFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilterEgressRule",
	}:
		if err := (&vpcv1alpha1.TrafficMirrorFilterEgressRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TrafficMirrorFilterEgressRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&vpnv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomerGateway",
	}:
		if err := (&vpnv1alpha1.CustomerGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomerGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&vpnv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteEntry",
	}:
		if err := (&vpnv1alpha1.RouteEntry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vswitch.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vswitch",
	}:
		if err := (&vswitchv1alpha1.Vswitch{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Vswitch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&wafv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&wafv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&wafv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "yundun.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BastionhostInstance",
	}:
		if err := (&yundunv1alpha1.BastionhostInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BastionhostInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "yundun.alicloud.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DbauditInstance",
	}:
		if err := (&yundunv1alpha1.DbauditInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DbauditInstance")
			return err
		}

	default:
		return fmt.Errorf("Invalid Webhook")
	}

	return nil
}
