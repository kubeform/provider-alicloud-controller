/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecFcServiceConfig{}).Type1()):      ApiSpecFcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpServiceConfig{}).Type1()):    ApiSpecHttpServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpVpcServiceConfig{}).Type1()): ApiSpecHttpVpcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecMockServiceConfig{}).Type1()):    ApiSpecMockServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecRequestConfig{}).Type1()):        ApiSpecRequestConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecFcServiceConfig{}).Type1()):      ApiSpecFcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpServiceConfig{}).Type1()):    ApiSpecHttpServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpVpcServiceConfig{}).Type1()): ApiSpecHttpVpcServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecMockServiceConfig{}).Type1()):    ApiSpecMockServiceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecRequestConfig{}).Type1()):        ApiSpecRequestConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ApiSpecFcServiceConfigCodec struct {
}

func (ApiSpecFcServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApiSpecFcServiceConfig)(ptr) == nil
}

func (ApiSpecFcServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApiSpecFcServiceConfig)(ptr)
	var objs []ApiSpecFcServiceConfig
	if obj != nil {
		objs = []ApiSpecFcServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecFcServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApiSpecFcServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApiSpecFcServiceConfig)(ptr) = ApiSpecFcServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApiSpecFcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecFcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApiSpecFcServiceConfig)(ptr) = objs[0]
			} else {
				*(*ApiSpecFcServiceConfig)(ptr) = ApiSpecFcServiceConfig{}
			}
		} else {
			*(*ApiSpecFcServiceConfig)(ptr) = ApiSpecFcServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApiSpecFcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecFcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApiSpecFcServiceConfig)(ptr) = obj
		} else {
			*(*ApiSpecFcServiceConfig)(ptr) = ApiSpecFcServiceConfig{}
		}
	default:
		iter.ReportError("decode ApiSpecFcServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ApiSpecHttpServiceConfigCodec struct {
}

func (ApiSpecHttpServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApiSpecHttpServiceConfig)(ptr) == nil
}

func (ApiSpecHttpServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApiSpecHttpServiceConfig)(ptr)
	var objs []ApiSpecHttpServiceConfig
	if obj != nil {
		objs = []ApiSpecHttpServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApiSpecHttpServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApiSpecHttpServiceConfig)(ptr) = ApiSpecHttpServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApiSpecHttpServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApiSpecHttpServiceConfig)(ptr) = objs[0]
			} else {
				*(*ApiSpecHttpServiceConfig)(ptr) = ApiSpecHttpServiceConfig{}
			}
		} else {
			*(*ApiSpecHttpServiceConfig)(ptr) = ApiSpecHttpServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApiSpecHttpServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApiSpecHttpServiceConfig)(ptr) = obj
		} else {
			*(*ApiSpecHttpServiceConfig)(ptr) = ApiSpecHttpServiceConfig{}
		}
	default:
		iter.ReportError("decode ApiSpecHttpServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ApiSpecHttpVpcServiceConfigCodec struct {
}

func (ApiSpecHttpVpcServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApiSpecHttpVpcServiceConfig)(ptr) == nil
}

func (ApiSpecHttpVpcServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApiSpecHttpVpcServiceConfig)(ptr)
	var objs []ApiSpecHttpVpcServiceConfig
	if obj != nil {
		objs = []ApiSpecHttpVpcServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpVpcServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApiSpecHttpVpcServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApiSpecHttpVpcServiceConfig)(ptr) = ApiSpecHttpVpcServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApiSpecHttpVpcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpVpcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApiSpecHttpVpcServiceConfig)(ptr) = objs[0]
			} else {
				*(*ApiSpecHttpVpcServiceConfig)(ptr) = ApiSpecHttpVpcServiceConfig{}
			}
		} else {
			*(*ApiSpecHttpVpcServiceConfig)(ptr) = ApiSpecHttpVpcServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApiSpecHttpVpcServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecHttpVpcServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApiSpecHttpVpcServiceConfig)(ptr) = obj
		} else {
			*(*ApiSpecHttpVpcServiceConfig)(ptr) = ApiSpecHttpVpcServiceConfig{}
		}
	default:
		iter.ReportError("decode ApiSpecHttpVpcServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ApiSpecMockServiceConfigCodec struct {
}

func (ApiSpecMockServiceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApiSpecMockServiceConfig)(ptr) == nil
}

func (ApiSpecMockServiceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApiSpecMockServiceConfig)(ptr)
	var objs []ApiSpecMockServiceConfig
	if obj != nil {
		objs = []ApiSpecMockServiceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecMockServiceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApiSpecMockServiceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApiSpecMockServiceConfig)(ptr) = ApiSpecMockServiceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApiSpecMockServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecMockServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApiSpecMockServiceConfig)(ptr) = objs[0]
			} else {
				*(*ApiSpecMockServiceConfig)(ptr) = ApiSpecMockServiceConfig{}
			}
		} else {
			*(*ApiSpecMockServiceConfig)(ptr) = ApiSpecMockServiceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApiSpecMockServiceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecMockServiceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApiSpecMockServiceConfig)(ptr) = obj
		} else {
			*(*ApiSpecMockServiceConfig)(ptr) = ApiSpecMockServiceConfig{}
		}
	default:
		iter.ReportError("decode ApiSpecMockServiceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ApiSpecRequestConfigCodec struct {
}

func (ApiSpecRequestConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApiSpecRequestConfig)(ptr) == nil
}

func (ApiSpecRequestConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApiSpecRequestConfig)(ptr)
	var objs []ApiSpecRequestConfig
	if obj != nil {
		objs = []ApiSpecRequestConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecRequestConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApiSpecRequestConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApiSpecRequestConfig)(ptr) = ApiSpecRequestConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApiSpecRequestConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecRequestConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApiSpecRequestConfig)(ptr) = objs[0]
			} else {
				*(*ApiSpecRequestConfig)(ptr) = ApiSpecRequestConfig{}
			}
		} else {
			*(*ApiSpecRequestConfig)(ptr) = ApiSpecRequestConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApiSpecRequestConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecRequestConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApiSpecRequestConfig)(ptr) = obj
		} else {
			*(*ApiSpecRequestConfig)(ptr) = ApiSpecRequestConfig{}
		}
	default:
		iter.ReportError("decode ApiSpecRequestConfig", "unexpected JSON type")
	}
}
