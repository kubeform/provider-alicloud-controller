/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BridgeRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BridgeRuleSpec   `json:"spec,omitempty"`
	Status            BridgeRuleStatus `json:"status,omitempty"`
}

type BridgeRuleSpecTargetsParamList struct {
	Form        *string `json:"form" tf:"form"`
	ResourceKey *string `json:"resourceKey" tf:"resource_key"`
	// +optional
	Template *string `json:"template,omitempty" tf:"template"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type BridgeRuleSpecTargets struct {
	Endpoint  *string                          `json:"endpoint" tf:"endpoint"`
	ParamList []BridgeRuleSpecTargetsParamList `json:"paramList" tf:"param_list"`
	TargetID  *string                          `json:"targetID" tf:"target_id"`
	Type      *string                          `json:"type" tf:"type"`
}

type BridgeRuleSpec struct {
	State *BridgeRuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource BridgeRuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type BridgeRuleSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description   *string `json:"description,omitempty" tf:"description"`
	EventBusName  *string `json:"eventBusName" tf:"event_bus_name"`
	FilterPattern *string `json:"filterPattern" tf:"filter_pattern"`
	RuleName      *string `json:"ruleName" tf:"rule_name"`
	// +optional
	Status  *string                 `json:"status,omitempty" tf:"status"`
	Targets []BridgeRuleSpecTargets `json:"targets" tf:"targets"`
}

type BridgeRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BridgeRuleList is a list of BridgeRules
type BridgeRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BridgeRule CRD objects
	Items []BridgeRule `json:"items,omitempty"`
}
