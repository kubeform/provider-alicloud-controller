//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "kubeform.dev/apimachinery/api/v1alpha1"

	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "kmodules.xyz/client-go/api/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Application) DeepCopyInto(out *Application) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Application.
func (in *Application) DeepCopy() *Application {
	if in == nil {
		return nil
	}
	out := new(Application)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Application) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationList) DeepCopyInto(out *ApplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Application, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationList.
func (in *ApplicationList) DeepCopy() *ApplicationList {
	if in == nil {
		return nil
	}
	out := new(ApplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ApplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationSpec) DeepCopyInto(out *ApplicationSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(ApplicationSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationSpec.
func (in *ApplicationSpec) DeepCopy() *ApplicationSpec {
	if in == nil {
		return nil
	}
	out := new(ApplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationSpecResource) DeepCopyInto(out *ApplicationSpecResource) {
	*out = *in
	if in.BlueGreen != nil {
		in, out := &in.BlueGreen, &out.BlueGreen
		*out = new(bool)
		**out = **in
	}
	if in.BlueGreenConfirm != nil {
		in, out := &in.BlueGreenConfirm, &out.BlueGreenConfirm
		*out = new(bool)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.DefaultDomain != nil {
		in, out := &in.DefaultDomain, &out.DefaultDomain
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LatestImage != nil {
		in, out := &in.LatestImage, &out.LatestImage
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]ApplicationSpecServices, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationSpecResource.
func (in *ApplicationSpecResource) DeepCopy() *ApplicationSpecResource {
	if in == nil {
		return nil
	}
	out := new(ApplicationSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationSpecServices) DeepCopyInto(out *ApplicationSpecServices) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationSpecServices.
func (in *ApplicationSpecServices) DeepCopy() *ApplicationSpecServices {
	if in == nil {
		return nil
	}
	out := new(ApplicationSpecServices)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationStatus) DeepCopyInto(out *ApplicationStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationStatus.
func (in *ApplicationStatus) DeepCopy() *ApplicationStatus {
	if in == nil {
		return nil
	}
	out := new(ApplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfig) DeepCopyInto(out *AutoscalingConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfig.
func (in *AutoscalingConfig) DeepCopy() *AutoscalingConfig {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoscalingConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigList) DeepCopyInto(out *AutoscalingConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AutoscalingConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigList.
func (in *AutoscalingConfigList) DeepCopy() *AutoscalingConfigList {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoscalingConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigSpec) DeepCopyInto(out *AutoscalingConfigSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(AutoscalingConfigSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigSpec.
func (in *AutoscalingConfigSpec) DeepCopy() *AutoscalingConfigSpec {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigSpecResource) DeepCopyInto(out *AutoscalingConfigSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.GpuUtilizationThreshold != nil {
		in, out := &in.GpuUtilizationThreshold, &out.GpuUtilizationThreshold
		*out = new(string)
		**out = **in
	}
	if in.ScanInterval != nil {
		in, out := &in.ScanInterval, &out.ScanInterval
		*out = new(string)
		**out = **in
	}
	if in.UnneededDuration != nil {
		in, out := &in.UnneededDuration, &out.UnneededDuration
		*out = new(string)
		**out = **in
	}
	if in.UtilizationThreshold != nil {
		in, out := &in.UtilizationThreshold, &out.UtilizationThreshold
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigSpecResource.
func (in *AutoscalingConfigSpecResource) DeepCopy() *AutoscalingConfigSpecResource {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigStatus) DeepCopyInto(out *AutoscalingConfigStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigStatus.
func (in *AutoscalingConfigStatus) DeepCopy() *AutoscalingConfigStatus {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetes) DeepCopyInto(out *EdgeKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetes.
func (in *EdgeKubernetes) DeepCopy() *EdgeKubernetes {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesList) DeepCopyInto(out *EdgeKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EdgeKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesList.
func (in *EdgeKubernetesList) DeepCopy() *EdgeKubernetesList {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpec) DeepCopyInto(out *EdgeKubernetesSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(EdgeKubernetesSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpec.
func (in *EdgeKubernetesSpec) DeepCopy() *EdgeKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecAddons) DeepCopyInto(out *EdgeKubernetesSpecAddons) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecAddons.
func (in *EdgeKubernetesSpecAddons) DeepCopy() *EdgeKubernetesSpecAddons {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecAddons)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecCertificateAuthority) DeepCopyInto(out *EdgeKubernetesSpecCertificateAuthority) {
	*out = *in
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCert != nil {
		in, out := &in.ClusterCert, &out.ClusterCert
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecCertificateAuthority.
func (in *EdgeKubernetesSpecCertificateAuthority) DeepCopy() *EdgeKubernetesSpecCertificateAuthority {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecCertificateAuthority)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecConnections) DeepCopyInto(out *EdgeKubernetesSpecConnections) {
	*out = *in
	if in.ApiServerInternet != nil {
		in, out := &in.ApiServerInternet, &out.ApiServerInternet
		*out = new(string)
		**out = **in
	}
	if in.ApiServerIntranet != nil {
		in, out := &in.ApiServerIntranet, &out.ApiServerIntranet
		*out = new(string)
		**out = **in
	}
	if in.MasterPublicIP != nil {
		in, out := &in.MasterPublicIP, &out.MasterPublicIP
		*out = new(string)
		**out = **in
	}
	if in.ServiceDomain != nil {
		in, out := &in.ServiceDomain, &out.ServiceDomain
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecConnections.
func (in *EdgeKubernetesSpecConnections) DeepCopy() *EdgeKubernetesSpecConnections {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecConnections)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecLogConfig) DeepCopyInto(out *EdgeKubernetesSpecLogConfig) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecLogConfig.
func (in *EdgeKubernetesSpecLogConfig) DeepCopy() *EdgeKubernetesSpecLogConfig {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecLogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecResource) DeepCopyInto(out *EdgeKubernetesSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]EdgeKubernetesSpecAddons, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]EdgeKubernetesSpecCertificateAuthority, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCaCert != nil {
		in, out := &in.ClusterCaCert, &out.ClusterCaCert
		*out = new(string)
		**out = **in
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]EdgeKubernetesSpecConnections, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = new(EdgeKubernetesSpecLogConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NamePrefix != nil {
		in, out := &in.NamePrefix, &out.NamePrefix
		*out = new(string)
		**out = **in
	}
	if in.NatGatewayID != nil {
		in, out := &in.NatGatewayID, &out.NatGatewayID
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCIDRMask != nil {
		in, out := &in.NodeCIDRMask, &out.NodeCIDRMask
		*out = new(int64)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PodCIDR != nil {
		in, out := &in.PodCIDR, &out.PodCIDR
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RdsInstances != nil {
		in, out := &in.RdsInstances, &out.RdsInstances
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceCIDR != nil {
		in, out := &in.ServiceCIDR, &out.ServiceCIDR
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VpcID != nil {
		in, out := &in.VpcID, &out.VpcID
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]EdgeKubernetesSpecWorkerDataDisks, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]EdgeKubernetesSpecWorkerNodes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(int64)
		**out = **in
	}
	if in.WorkerVswitchIDS != nil {
		in, out := &in.WorkerVswitchIDS, &out.WorkerVswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecResource.
func (in *EdgeKubernetesSpecResource) DeepCopy() *EdgeKubernetesSpecResource {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecWorkerDataDisks) DeepCopyInto(out *EdgeKubernetesSpecWorkerDataDisks) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KmsKeyID != nil {
		in, out := &in.KmsKeyID, &out.KmsKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecWorkerDataDisks.
func (in *EdgeKubernetesSpecWorkerDataDisks) DeepCopy() *EdgeKubernetesSpecWorkerDataDisks {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecWorkerDataDisks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpecWorkerNodes) DeepCopyInto(out *EdgeKubernetesSpecWorkerNodes) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpecWorkerNodes.
func (in *EdgeKubernetesSpecWorkerNodes) DeepCopy() *EdgeKubernetesSpecWorkerNodes {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpecWorkerNodes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesStatus) DeepCopyInto(out *EdgeKubernetesStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesStatus.
func (in *EdgeKubernetesStatus) DeepCopy() *EdgeKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Kubernetes) DeepCopyInto(out *Kubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Kubernetes.
func (in *Kubernetes) DeepCopy() *Kubernetes {
	if in == nil {
		return nil
	}
	out := new(Kubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Kubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscaler) DeepCopyInto(out *KubernetesAutoscaler) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscaler.
func (in *KubernetesAutoscaler) DeepCopy() *KubernetesAutoscaler {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscaler)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAutoscaler) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerList) DeepCopyInto(out *KubernetesAutoscalerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesAutoscaler, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerList.
func (in *KubernetesAutoscalerList) DeepCopy() *KubernetesAutoscalerList {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAutoscalerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerSpec) DeepCopyInto(out *KubernetesAutoscalerSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(KubernetesAutoscalerSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerSpec.
func (in *KubernetesAutoscalerSpec) DeepCopy() *KubernetesAutoscalerSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerSpecNodepools) DeepCopyInto(out *KubernetesAutoscalerSpecNodepools) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerSpecNodepools.
func (in *KubernetesAutoscalerSpecNodepools) DeepCopy() *KubernetesAutoscalerSpecNodepools {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerSpecNodepools)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerSpecResource) DeepCopyInto(out *KubernetesAutoscalerSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.DeferScaleInDuration != nil {
		in, out := &in.DeferScaleInDuration, &out.DeferScaleInDuration
		*out = new(string)
		**out = **in
	}
	if in.Nodepools != nil {
		in, out := &in.Nodepools, &out.Nodepools
		*out = make([]KubernetesAutoscalerSpecNodepools, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UseEcsRAMRoleToken != nil {
		in, out := &in.UseEcsRAMRoleToken, &out.UseEcsRAMRoleToken
		*out = new(bool)
		**out = **in
	}
	if in.Utilization != nil {
		in, out := &in.Utilization, &out.Utilization
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerSpecResource.
func (in *KubernetesAutoscalerSpecResource) DeepCopy() *KubernetesAutoscalerSpecResource {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerStatus) DeepCopyInto(out *KubernetesAutoscalerStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerStatus.
func (in *KubernetesAutoscalerStatus) DeepCopy() *KubernetesAutoscalerStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesList) DeepCopyInto(out *KubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Kubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesList.
func (in *KubernetesList) DeepCopy() *KubernetesList {
	if in == nil {
		return nil
	}
	out := new(KubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePool) DeepCopyInto(out *KubernetesNodePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePool.
func (in *KubernetesNodePool) DeepCopy() *KubernetesNodePool {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesNodePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolList) DeepCopyInto(out *KubernetesNodePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesNodePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolList.
func (in *KubernetesNodePoolList) DeepCopy() *KubernetesNodePoolList {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesNodePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpec) DeepCopyInto(out *KubernetesNodePoolSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(KubernetesNodePoolSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpec.
func (in *KubernetesNodePoolSpec) DeepCopy() *KubernetesNodePoolSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecDataDisks) DeepCopyInto(out *KubernetesNodePoolSpecDataDisks) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KmsKeyID != nil {
		in, out := &in.KmsKeyID, &out.KmsKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(int64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecDataDisks.
func (in *KubernetesNodePoolSpecDataDisks) DeepCopy() *KubernetesNodePoolSpecDataDisks {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecDataDisks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecLabels) DeepCopyInto(out *KubernetesNodePoolSpecLabels) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecLabels.
func (in *KubernetesNodePoolSpecLabels) DeepCopy() *KubernetesNodePoolSpecLabels {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecLabels)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecManagement) DeepCopyInto(out *KubernetesNodePoolSpecManagement) {
	*out = *in
	if in.AutoRepair != nil {
		in, out := &in.AutoRepair, &out.AutoRepair
		*out = new(bool)
		**out = **in
	}
	if in.AutoUpgrade != nil {
		in, out := &in.AutoUpgrade, &out.AutoUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(int64)
		**out = **in
	}
	if in.Surge != nil {
		in, out := &in.Surge, &out.Surge
		*out = new(int64)
		**out = **in
	}
	if in.SurgePercentage != nil {
		in, out := &in.SurgePercentage, &out.SurgePercentage
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecManagement.
func (in *KubernetesNodePoolSpecManagement) DeepCopy() *KubernetesNodePoolSpecManagement {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecManagement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecResource) DeepCopyInto(out *KubernetesNodePoolSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(int64)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]KubernetesNodePoolSpecDataDisks, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FormatDisk != nil {
		in, out := &in.FormatDisk, &out.FormatDisk
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceTypes != nil {
		in, out := &in.InstanceTypes, &out.InstanceTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(int64)
		**out = **in
	}
	if in.KeepInstanceName != nil {
		in, out := &in.KeepInstanceName, &out.KeepInstanceName
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KmsEncryptedPassword != nil {
		in, out := &in.KmsEncryptedPassword, &out.KmsEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]KubernetesNodePoolSpecLabels, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = new(KubernetesNodePoolSpecManagement)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(int64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(int64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.ScalingConfig != nil {
		in, out := &in.ScalingConfig, &out.ScalingConfig
		*out = new(KubernetesNodePoolSpecScalingConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ScalingGroupID != nil {
		in, out := &in.ScalingGroupID, &out.ScalingGroupID
		*out = new(string)
		**out = **in
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SpotPriceLimit != nil {
		in, out := &in.SpotPriceLimit, &out.SpotPriceLimit
		*out = make([]KubernetesNodePoolSpecSpotPriceLimit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SpotStrategy != nil {
		in, out := &in.SpotStrategy, &out.SpotStrategy
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskCategory != nil {
		in, out := &in.SystemDiskCategory, &out.SystemDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskPerformanceLevel != nil {
		in, out := &in.SystemDiskPerformanceLevel, &out.SystemDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]KubernetesNodePoolSpecTaints, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(bool)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VpcID != nil {
		in, out := &in.VpcID, &out.VpcID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDS != nil {
		in, out := &in.VswitchIDS, &out.VswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecResource.
func (in *KubernetesNodePoolSpecResource) DeepCopy() *KubernetesNodePoolSpecResource {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecScalingConfig) DeepCopyInto(out *KubernetesNodePoolSpecScalingConfig) {
	*out = *in
	if in.EipBandwidth != nil {
		in, out := &in.EipBandwidth, &out.EipBandwidth
		*out = new(int64)
		**out = **in
	}
	if in.EipInternetChargeType != nil {
		in, out := &in.EipInternetChargeType, &out.EipInternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.IsBondEip != nil {
		in, out := &in.IsBondEip, &out.IsBondEip
		*out = new(bool)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(int64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecScalingConfig.
func (in *KubernetesNodePoolSpecScalingConfig) DeepCopy() *KubernetesNodePoolSpecScalingConfig {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecScalingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecSpotPriceLimit) DeepCopyInto(out *KubernetesNodePoolSpecSpotPriceLimit) {
	*out = *in
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.PriceLimit != nil {
		in, out := &in.PriceLimit, &out.PriceLimit
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecSpotPriceLimit.
func (in *KubernetesNodePoolSpecSpotPriceLimit) DeepCopy() *KubernetesNodePoolSpecSpotPriceLimit {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecSpotPriceLimit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpecTaints) DeepCopyInto(out *KubernetesNodePoolSpecTaints) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpecTaints.
func (in *KubernetesNodePoolSpecTaints) DeepCopy() *KubernetesNodePoolSpecTaints {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpecTaints)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolStatus) DeepCopyInto(out *KubernetesNodePoolStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolStatus.
func (in *KubernetesNodePoolStatus) DeepCopy() *KubernetesNodePoolStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissions) DeepCopyInto(out *KubernetesPermissions) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissions.
func (in *KubernetesPermissions) DeepCopy() *KubernetesPermissions {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesPermissions) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsList) DeepCopyInto(out *KubernetesPermissionsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesPermissions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsList.
func (in *KubernetesPermissionsList) DeepCopy() *KubernetesPermissionsList {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesPermissionsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsSpec) DeepCopyInto(out *KubernetesPermissionsSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(KubernetesPermissionsSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsSpec.
func (in *KubernetesPermissionsSpec) DeepCopy() *KubernetesPermissionsSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsSpecPermissions) DeepCopyInto(out *KubernetesPermissionsSpecPermissions) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.IsCustom != nil {
		in, out := &in.IsCustom, &out.IsCustom
		*out = new(bool)
		**out = **in
	}
	if in.IsRAMRole != nil {
		in, out := &in.IsRAMRole, &out.IsRAMRole
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.RoleType != nil {
		in, out := &in.RoleType, &out.RoleType
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsSpecPermissions.
func (in *KubernetesPermissionsSpecPermissions) DeepCopy() *KubernetesPermissionsSpecPermissions {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsSpecPermissions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsSpecResource) DeepCopyInto(out *KubernetesPermissionsSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]KubernetesPermissionsSpecPermissions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Uid != nil {
		in, out := &in.Uid, &out.Uid
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsSpecResource.
func (in *KubernetesPermissionsSpecResource) DeepCopy() *KubernetesPermissionsSpecResource {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsStatus) DeepCopyInto(out *KubernetesPermissionsStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsStatus.
func (in *KubernetesPermissionsStatus) DeepCopy() *KubernetesPermissionsStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpec) DeepCopyInto(out *KubernetesSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(KubernetesSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpec.
func (in *KubernetesSpec) DeepCopy() *KubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecAddons) DeepCopyInto(out *KubernetesSpecAddons) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecAddons.
func (in *KubernetesSpecAddons) DeepCopy() *KubernetesSpecAddons {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecAddons)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecCertificateAuthority) DeepCopyInto(out *KubernetesSpecCertificateAuthority) {
	*out = *in
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCert != nil {
		in, out := &in.ClusterCert, &out.ClusterCert
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecCertificateAuthority.
func (in *KubernetesSpecCertificateAuthority) DeepCopy() *KubernetesSpecCertificateAuthority {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecCertificateAuthority)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecConnections) DeepCopyInto(out *KubernetesSpecConnections) {
	*out = *in
	if in.ApiServerInternet != nil {
		in, out := &in.ApiServerInternet, &out.ApiServerInternet
		*out = new(string)
		**out = **in
	}
	if in.ApiServerIntranet != nil {
		in, out := &in.ApiServerIntranet, &out.ApiServerIntranet
		*out = new(string)
		**out = **in
	}
	if in.MasterPublicIP != nil {
		in, out := &in.MasterPublicIP, &out.MasterPublicIP
		*out = new(string)
		**out = **in
	}
	if in.ServiceDomain != nil {
		in, out := &in.ServiceDomain, &out.ServiceDomain
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecConnections.
func (in *KubernetesSpecConnections) DeepCopy() *KubernetesSpecConnections {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecConnections)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecLogConfig) DeepCopyInto(out *KubernetesSpecLogConfig) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecLogConfig.
func (in *KubernetesSpecLogConfig) DeepCopy() *KubernetesSpecLogConfig {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecLogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecMasterNodes) DeepCopyInto(out *KubernetesSpecMasterNodes) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecMasterNodes.
func (in *KubernetesSpecMasterNodes) DeepCopy() *KubernetesSpecMasterNodes {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecMasterNodes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecResource) DeepCopyInto(out *KubernetesSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]KubernetesSpecAddons, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ApiAudiences != nil {
		in, out := &in.ApiAudiences, &out.ApiAudiences
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]KubernetesSpecCertificateAuthority, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCaCert != nil {
		in, out := &in.ClusterCaCert, &out.ClusterCaCert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]KubernetesSpecConnections, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.CpuPolicy != nil {
		in, out := &in.CpuPolicy, &out.CpuPolicy
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KmsEncryptedPassword != nil {
		in, out := &in.KmsEncryptedPassword, &out.KmsEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KmsEncryptionContext != nil {
		in, out := &in.KmsEncryptionContext, &out.KmsEncryptionContext
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = new(KubernetesSpecLogConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.MasterAutoRenew != nil {
		in, out := &in.MasterAutoRenew, &out.MasterAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.MasterAutoRenewPeriod != nil {
		in, out := &in.MasterAutoRenewPeriod, &out.MasterAutoRenewPeriod
		*out = new(int64)
		**out = **in
	}
	if in.MasterDiskCategory != nil {
		in, out := &in.MasterDiskCategory, &out.MasterDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskPerformanceLevel != nil {
		in, out := &in.MasterDiskPerformanceLevel, &out.MasterDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskSize != nil {
		in, out := &in.MasterDiskSize, &out.MasterDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.MasterDiskSnapshotPolicyID != nil {
		in, out := &in.MasterDiskSnapshotPolicyID, &out.MasterDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceChargeType != nil {
		in, out := &in.MasterInstanceChargeType, &out.MasterInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceType != nil {
		in, out := &in.MasterInstanceType, &out.MasterInstanceType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceTypes != nil {
		in, out := &in.MasterInstanceTypes, &out.MasterInstanceTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MasterNodes != nil {
		in, out := &in.MasterNodes, &out.MasterNodes
		*out = make([]KubernetesSpecMasterNodes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterPeriod != nil {
		in, out := &in.MasterPeriod, &out.MasterPeriod
		*out = new(int64)
		**out = **in
	}
	if in.MasterPeriodUnit != nil {
		in, out := &in.MasterPeriodUnit, &out.MasterPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.MasterVswitchIDS != nil {
		in, out := &in.MasterVswitchIDS, &out.MasterVswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NamePrefix != nil {
		in, out := &in.NamePrefix, &out.NamePrefix
		*out = new(string)
		**out = **in
	}
	if in.NatGatewayID != nil {
		in, out := &in.NatGatewayID, &out.NatGatewayID
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCIDRMask != nil {
		in, out := &in.NodeCIDRMask, &out.NodeCIDRMask
		*out = new(int64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCIDR != nil {
		in, out := &in.PodCIDR, &out.PodCIDR
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIDS != nil {
		in, out := &in.PodVswitchIDS, &out.PodVswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RdsInstances != nil {
		in, out := &in.RdsInstances, &out.RdsInstances
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]KubernetesSpecRuntime, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCIDR != nil {
		in, out := &in.ServiceCIDR, &out.ServiceCIDR
		*out = new(string)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]KubernetesSpecTaints, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCa != nil {
		in, out := &in.UserCa, &out.UserCa
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VpcID != nil {
		in, out := &in.VpcID, &out.VpcID
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDS != nil {
		in, out := &in.VswitchIDS, &out.VswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]KubernetesSpecWorkerDataDisks, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]KubernetesSpecWorkerNodes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(int64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(int64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIDS != nil {
		in, out := &in.WorkerVswitchIDS, &out.WorkerVswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecResource.
func (in *KubernetesSpecResource) DeepCopy() *KubernetesSpecResource {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecRuntime) DeepCopyInto(out *KubernetesSpecRuntime) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecRuntime.
func (in *KubernetesSpecRuntime) DeepCopy() *KubernetesSpecRuntime {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecRuntime)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecTaints) DeepCopyInto(out *KubernetesSpecTaints) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecTaints.
func (in *KubernetesSpecTaints) DeepCopy() *KubernetesSpecTaints {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecTaints)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecWorkerDataDisks) DeepCopyInto(out *KubernetesSpecWorkerDataDisks) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KmsKeyID != nil {
		in, out := &in.KmsKeyID, &out.KmsKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecWorkerDataDisks.
func (in *KubernetesSpecWorkerDataDisks) DeepCopy() *KubernetesSpecWorkerDataDisks {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecWorkerDataDisks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpecWorkerNodes) DeepCopyInto(out *KubernetesSpecWorkerNodes) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpecWorkerNodes.
func (in *KubernetesSpecWorkerNodes) DeepCopy() *KubernetesSpecWorkerNodes {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpecWorkerNodes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesStatus) DeepCopyInto(out *KubernetesStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesStatus.
func (in *KubernetesStatus) DeepCopy() *KubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetes) DeepCopyInto(out *ManagedKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetes.
func (in *ManagedKubernetes) DeepCopy() *ManagedKubernetes {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesList) DeepCopyInto(out *ManagedKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesList.
func (in *ManagedKubernetesList) DeepCopy() *ManagedKubernetesList {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpec) DeepCopyInto(out *ManagedKubernetesSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(ManagedKubernetesSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpec.
func (in *ManagedKubernetesSpec) DeepCopy() *ManagedKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecAddons) DeepCopyInto(out *ManagedKubernetesSpecAddons) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecAddons.
func (in *ManagedKubernetesSpecAddons) DeepCopy() *ManagedKubernetesSpecAddons {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecAddons)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecCertificateAuthority) DeepCopyInto(out *ManagedKubernetesSpecCertificateAuthority) {
	*out = *in
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCert != nil {
		in, out := &in.ClusterCert, &out.ClusterCert
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecCertificateAuthority.
func (in *ManagedKubernetesSpecCertificateAuthority) DeepCopy() *ManagedKubernetesSpecCertificateAuthority {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecCertificateAuthority)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecConnections) DeepCopyInto(out *ManagedKubernetesSpecConnections) {
	*out = *in
	if in.ApiServerInternet != nil {
		in, out := &in.ApiServerInternet, &out.ApiServerInternet
		*out = new(string)
		**out = **in
	}
	if in.ApiServerIntranet != nil {
		in, out := &in.ApiServerIntranet, &out.ApiServerIntranet
		*out = new(string)
		**out = **in
	}
	if in.MasterPublicIP != nil {
		in, out := &in.MasterPublicIP, &out.MasterPublicIP
		*out = new(string)
		**out = **in
	}
	if in.ServiceDomain != nil {
		in, out := &in.ServiceDomain, &out.ServiceDomain
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecConnections.
func (in *ManagedKubernetesSpecConnections) DeepCopy() *ManagedKubernetesSpecConnections {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecConnections)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecLogConfig) DeepCopyInto(out *ManagedKubernetesSpecLogConfig) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecLogConfig.
func (in *ManagedKubernetesSpecLogConfig) DeepCopy() *ManagedKubernetesSpecLogConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecLogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecMaintenanceWindow) DeepCopyInto(out *ManagedKubernetesSpecMaintenanceWindow) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecMaintenanceWindow.
func (in *ManagedKubernetesSpecMaintenanceWindow) DeepCopy() *ManagedKubernetesSpecMaintenanceWindow {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecMaintenanceWindow)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecResource) DeepCopyInto(out *ManagedKubernetesSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ManagedKubernetesSpecAddons, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ApiAudiences != nil {
		in, out := &in.ApiAudiences, &out.ApiAudiences
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]ManagedKubernetesSpecCertificateAuthority, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCaCert != nil {
		in, out := &in.ClusterCaCert, &out.ClusterCaCert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]ManagedKubernetesSpecConnections, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.CpuPolicy != nil {
		in, out := &in.CpuPolicy, &out.CpuPolicy
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionProviderKey != nil {
		in, out := &in.EncryptionProviderKey, &out.EncryptionProviderKey
		*out = new(string)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KmsEncryptedPassword != nil {
		in, out := &in.KmsEncryptedPassword, &out.KmsEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KmsEncryptionContext != nil {
		in, out := &in.KmsEncryptionContext, &out.KmsEncryptionContext
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = new(ManagedKubernetesSpecLogConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = new(ManagedKubernetesSpecMaintenanceWindow)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NamePrefix != nil {
		in, out := &in.NamePrefix, &out.NamePrefix
		*out = new(string)
		**out = **in
	}
	if in.NatGatewayID != nil {
		in, out := &in.NatGatewayID, &out.NatGatewayID
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCIDRMask != nil {
		in, out := &in.NodeCIDRMask, &out.NodeCIDRMask
		*out = new(int64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCIDR != nil {
		in, out := &in.PodCIDR, &out.PodCIDR
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIDS != nil {
		in, out := &in.PodVswitchIDS, &out.PodVswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RdsInstances != nil {
		in, out := &in.RdsInstances, &out.RdsInstances
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]ManagedKubernetesSpecRuntime, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCIDR != nil {
		in, out := &in.ServiceCIDR, &out.ServiceCIDR
		*out = new(string)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ManagedKubernetesSpecTaints, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCa != nil {
		in, out := &in.UserCa, &out.UserCa
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VpcID != nil {
		in, out := &in.VpcID, &out.VpcID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDS != nil {
		in, out := &in.VswitchIDS, &out.VswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]ManagedKubernetesSpecWorkerDataDisks, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(int64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]ManagedKubernetesSpecWorkerNodes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(int64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(int64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIDS != nil {
		in, out := &in.WorkerVswitchIDS, &out.WorkerVswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecResource.
func (in *ManagedKubernetesSpecResource) DeepCopy() *ManagedKubernetesSpecResource {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecRuntime) DeepCopyInto(out *ManagedKubernetesSpecRuntime) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecRuntime.
func (in *ManagedKubernetesSpecRuntime) DeepCopy() *ManagedKubernetesSpecRuntime {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecRuntime)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecTaints) DeepCopyInto(out *ManagedKubernetesSpecTaints) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecTaints.
func (in *ManagedKubernetesSpecTaints) DeepCopy() *ManagedKubernetesSpecTaints {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecTaints)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecWorkerDataDisks) DeepCopyInto(out *ManagedKubernetesSpecWorkerDataDisks) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KmsKeyID != nil {
		in, out := &in.KmsKeyID, &out.KmsKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecWorkerDataDisks.
func (in *ManagedKubernetesSpecWorkerDataDisks) DeepCopy() *ManagedKubernetesSpecWorkerDataDisks {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecWorkerDataDisks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpecWorkerNodes) DeepCopyInto(out *ManagedKubernetesSpecWorkerNodes) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpecWorkerNodes.
func (in *ManagedKubernetesSpecWorkerNodes) DeepCopy() *ManagedKubernetesSpecWorkerNodes {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpecWorkerNodes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesStatus) DeepCopyInto(out *ManagedKubernetesStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesStatus.
func (in *ManagedKubernetesStatus) DeepCopy() *ManagedKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetes) DeepCopyInto(out *ServerlessKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetes.
func (in *ServerlessKubernetes) DeepCopy() *ServerlessKubernetes {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServerlessKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesList) DeepCopyInto(out *ServerlessKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ServerlessKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesList.
func (in *ServerlessKubernetesList) DeepCopy() *ServerlessKubernetesList {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServerlessKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesSpec) DeepCopyInto(out *ServerlessKubernetesSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(ServerlessKubernetesSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesSpec.
func (in *ServerlessKubernetesSpec) DeepCopy() *ServerlessKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesSpecAddons) DeepCopyInto(out *ServerlessKubernetesSpecAddons) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesSpecAddons.
func (in *ServerlessKubernetesSpecAddons) DeepCopy() *ServerlessKubernetesSpecAddons {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesSpecAddons)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesSpecResource) DeepCopyInto(out *ServerlessKubernetesSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ServerlessKubernetesSpecAddons, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCaCert != nil {
		in, out := &in.ClusterCaCert, &out.ClusterCaCert
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EndpointPublicAccessEnabled != nil {
		in, out := &in.EndpointPublicAccessEnabled, &out.EndpointPublicAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LoggingType != nil {
		in, out := &in.LoggingType, &out.LoggingType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NamePrefix != nil {
		in, out := &in.NamePrefix, &out.NamePrefix
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.PrivateZone != nil {
		in, out := &in.PrivateZone, &out.PrivateZone
		*out = new(bool)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceCIDR != nil {
		in, out := &in.ServiceCIDR, &out.ServiceCIDR
		*out = new(string)
		**out = **in
	}
	if in.ServiceDiscoveryTypes != nil {
		in, out := &in.ServiceDiscoveryTypes, &out.ServiceDiscoveryTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VpcID != nil {
		in, out := &in.VpcID, &out.VpcID
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDS != nil {
		in, out := &in.VswitchIDS, &out.VswitchIDS
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesSpecResource.
func (in *ServerlessKubernetesSpecResource) DeepCopy() *ServerlessKubernetesSpecResource {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesStatus) DeepCopyInto(out *ServerlessKubernetesStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesStatus.
func (in *ServerlessKubernetesStatus) DeepCopy() *ServerlessKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Swarm) DeepCopyInto(out *Swarm) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Swarm.
func (in *Swarm) DeepCopy() *Swarm {
	if in == nil {
		return nil
	}
	out := new(Swarm)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Swarm) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmList) DeepCopyInto(out *SwarmList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Swarm, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmList.
func (in *SwarmList) DeepCopy() *SwarmList {
	if in == nil {
		return nil
	}
	out := new(SwarmList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SwarmList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmSpec) DeepCopyInto(out *SwarmSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(SwarmSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmSpec.
func (in *SwarmSpec) DeepCopy() *SwarmSpec {
	if in == nil {
		return nil
	}
	out := new(SwarmSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmSpecNodes) DeepCopyInto(out *SwarmSpecNodes) {
	*out = *in
	if in.Eip != nil {
		in, out := &in.Eip, &out.Eip
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmSpecNodes.
func (in *SwarmSpecNodes) DeepCopy() *SwarmSpecNodes {
	if in == nil {
		return nil
	}
	out := new(SwarmSpecNodes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmSpecResource) DeepCopyInto(out *SwarmSpecResource) {
	*out = *in
	if in.AgentVersion != nil {
		in, out := &in.AgentVersion, &out.AgentVersion
		*out = new(string)
		**out = **in
	}
	if in.CidrBlock != nil {
		in, out := &in.CidrBlock, &out.CidrBlock
		*out = new(string)
		**out = **in
	}
	if in.DiskCategory != nil {
		in, out := &in.DiskCategory, &out.DiskCategory
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.IsOutdated != nil {
		in, out := &in.IsOutdated, &out.IsOutdated
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NamePrefix != nil {
		in, out := &in.NamePrefix, &out.NamePrefix
		*out = new(string)
		**out = **in
	}
	if in.NeedSlb != nil {
		in, out := &in.NeedSlb, &out.NeedSlb
		*out = new(bool)
		**out = **in
	}
	if in.NodeNumber != nil {
		in, out := &in.NodeNumber, &out.NodeNumber
		*out = new(int64)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]SwarmSpecNodes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.ReleaseEip != nil {
		in, out := &in.ReleaseEip, &out.ReleaseEip
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(int64)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.VpcID != nil {
		in, out := &in.VpcID, &out.VpcID
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmSpecResource.
func (in *SwarmSpecResource) DeepCopy() *SwarmSpecResource {
	if in == nil {
		return nil
	}
	out := new(SwarmSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmStatus) DeepCopyInto(out *SwarmStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmStatus.
func (in *SwarmStatus) DeepCopy() *SwarmStatus {
	if in == nil {
		return nil
	}
	out := new(SwarmStatus)
	in.DeepCopyInto(out)
	return out
}
