/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DispatchRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DispatchRuleSpec   `json:"spec,omitempty"`
	Status            DispatchRuleStatus `json:"status,omitempty"`
}

type DispatchRuleSpecGroupRules struct {
	// +optional
	GroupID        *int64   `json:"groupID,omitempty" tf:"group_id"`
	GroupInterval  *int64   `json:"groupInterval" tf:"group_interval"`
	GroupWaitTime  *int64   `json:"groupWaitTime" tf:"group_wait_time"`
	GroupingFields []string `json:"groupingFields" tf:"grouping_fields"`
	// +optional
	RepeatInterval *int64 `json:"repeatInterval,omitempty" tf:"repeat_interval"`
}

type DispatchRuleSpecLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions struct {
	Key      *string `json:"key" tf:"key"`
	Operator *string `json:"operator" tf:"operator"`
	Value    *string `json:"value" tf:"value"`
}

type DispatchRuleSpecLabelMatchExpressionGridLabelMatchExpressionGroups struct {
	LabelMatchExpressions []DispatchRuleSpecLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions `json:"labelMatchExpressions" tf:"label_match_expressions"`
}

type DispatchRuleSpecLabelMatchExpressionGrid struct {
	LabelMatchExpressionGroups []DispatchRuleSpecLabelMatchExpressionGridLabelMatchExpressionGroups `json:"labelMatchExpressionGroups" tf:"label_match_expression_groups"`
}

type DispatchRuleSpecNotifyRulesNotifyObjects struct {
	Name           *string `json:"name" tf:"name"`
	NotifyObjectID *string `json:"notifyObjectID" tf:"notify_object_id"`
	NotifyType     *string `json:"notifyType" tf:"notify_type"`
}

type DispatchRuleSpecNotifyRules struct {
	NotifyChannels []string                                   `json:"notifyChannels" tf:"notify_channels"`
	NotifyObjects  []DispatchRuleSpecNotifyRulesNotifyObjects `json:"notifyObjects" tf:"notify_objects"`
}

type DispatchRuleSpec struct {
	State *DispatchRuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource DispatchRuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DispatchRuleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	DispatchRuleName *string `json:"dispatchRuleName" tf:"dispatch_rule_name"`
	// +optional
	DispatchType *string                      `json:"dispatchType,omitempty" tf:"dispatch_type"`
	GroupRules   []DispatchRuleSpecGroupRules `json:"groupRules" tf:"group_rules"`
	// +optional
	IsRecover                *bool                                      `json:"isRecover,omitempty" tf:"is_recover"`
	LabelMatchExpressionGrid []DispatchRuleSpecLabelMatchExpressionGrid `json:"labelMatchExpressionGrid" tf:"label_match_expression_grid"`
	NotifyRules              []DispatchRuleSpecNotifyRules              `json:"notifyRules" tf:"notify_rules"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type DispatchRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DispatchRuleList is a list of DispatchRules
type DispatchRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DispatchRule CRD objects
	Items []DispatchRule `json:"items,omitempty"`
}
