/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec,omitempty"`
	Status            ClusterStatus `json:"status,omitempty"`
}

type ClusterSpecDbClusterIPArray struct {
	// +optional
	DbClusterIPArrayName *string `json:"dbClusterIPArrayName,omitempty" tf:"db_cluster_ip_array_name"`
	// +optional
	ModifyMode *string `json:"modifyMode,omitempty" tf:"modify_mode"`
	// +optional
	SecurityIPS []string `json:"securityIPS,omitempty" tf:"security_ips"`
}

type ClusterSpecParameters struct {
	Name  *string `json:"name" tf:"name"`
	Value *string `json:"value" tf:"value"`
}

type ClusterSpec struct {
	State *ClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource ClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoRenewPeriod *int64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period"`
	// +optional
	CollectorStatus *string `json:"collectorStatus,omitempty" tf:"collector_status"`
	// +optional
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string"`
	// +optional
	DbClusterIPArray []ClusterSpecDbClusterIPArray `json:"dbClusterIPArray,omitempty" tf:"db_cluster_ip_array"`
	DbNodeClass      *string                       `json:"dbNodeClass" tf:"db_node_class"`
	// +optional
	DbNodeCount *int64  `json:"dbNodeCount,omitempty" tf:"db_node_count"`
	DbType      *string `json:"dbType" tf:"db_type"`
	DbVersion   *string `json:"dbVersion" tf:"db_version"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EncryptNewTables *string `json:"encryptNewTables,omitempty" tf:"encrypt_new_tables"`
	// +optional
	MaintainTime *string `json:"maintainTime,omitempty" tf:"maintain_time"`
	// +optional
	ModifyType *string `json:"modifyType,omitempty" tf:"modify_type"`
	// +optional
	Parameters []ClusterSpecParameters `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	PayType *string `json:"payType,omitempty" tf:"pay_type"`
	// +optional
	Period *int64 `json:"period,omitempty" tf:"period"`
	// +optional
	RenewalStatus *string `json:"renewalStatus,omitempty" tf:"renewal_status"`
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// +optional
	SecurityGroupIDS []string `json:"securityGroupIDS,omitempty" tf:"security_group_ids"`
	// +optional
	SecurityIPS []string `json:"securityIPS,omitempty" tf:"security_ips"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TdeStatus *string `json:"tdeStatus,omitempty" tf:"tde_status"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type ClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterList is a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cluster CRD objects
	Items []Cluster `json:"items,omitempty"`
}
