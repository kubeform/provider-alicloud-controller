/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DbCluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbClusterSpec   `json:"spec,omitempty"`
	Status            DbClusterStatus `json:"status,omitempty"`
}

type DbClusterSpec struct {
	State *DbClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource DbClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type DbClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoRenewPeriod *int64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period"`
	// +optional
	ComputeResource *string `json:"computeResource,omitempty" tf:"compute_resource"`
	// +optional
	ConnectionString  *string `json:"connectionString,omitempty" tf:"connection_string"`
	DbClusterCategory *string `json:"dbClusterCategory" tf:"db_cluster_category"`
	// +optional
	// Deprecated
	DbClusterClass *string `json:"dbClusterClass,omitempty" tf:"db_cluster_class"`
	// +optional
	DbClusterVersion *string `json:"dbClusterVersion,omitempty" tf:"db_cluster_version"`
	// +optional
	DbNodeClass *string `json:"dbNodeClass,omitempty" tf:"db_node_class"`
	// +optional
	DbNodeCount *int64 `json:"dbNodeCount,omitempty" tf:"db_node_count"`
	// +optional
	DbNodeStorage *int64 `json:"dbNodeStorage,omitempty" tf:"db_node_storage"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	ElasticIoResource *int64 `json:"elasticIoResource,omitempty" tf:"elastic_io_resource"`
	// +optional
	MaintainTime *string `json:"maintainTime,omitempty" tf:"maintain_time"`
	Mode         *string `json:"mode" tf:"mode"`
	// +optional
	ModifyType *string `json:"modifyType,omitempty" tf:"modify_type"`
	// +optional
	PayType *string `json:"payType,omitempty" tf:"pay_type"`
	// +optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type"`
	// +optional
	Period *int64 `json:"period,omitempty" tf:"period"`
	// +optional
	RenewalStatus *string `json:"renewalStatus,omitempty" tf:"renewal_status"`
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// +optional
	SecurityIPS []string `json:"securityIPS,omitempty" tf:"security_ips"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type DbClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DbClusterList is a list of DbClusters
type DbClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DbCluster CRD objects
	Items []DbCluster `json:"items,omitempty"`
}
