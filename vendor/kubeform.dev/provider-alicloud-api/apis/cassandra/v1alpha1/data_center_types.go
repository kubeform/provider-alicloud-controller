/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DataCenter struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataCenterSpec   `json:"spec,omitempty"`
	Status            DataCenterStatus `json:"status,omitempty"`
}

type DataCenterSpec struct {
	State *DataCenterSpecResource `json:"state,omitempty" tf:"-"`

	Resource DataCenterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DataCenterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew"`
	// +optional
	AutoRenewPeriod *int64  `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period"`
	ClusterID       *string `json:"clusterID" tf:"cluster_id"`
	// +optional
	DataCenterID *string `json:"dataCenterID,omitempty" tf:"data_center_id"`
	// +optional
	DataCenterName *string `json:"dataCenterName,omitempty" tf:"data_center_name"`
	// +optional
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size"`
	// +optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type"`
	// +optional
	EnablePublic *bool   `json:"enablePublic,omitempty" tf:"enable_public"`
	InstanceType *string `json:"instanceType" tf:"instance_type"`
	NodeCount    *int64  `json:"nodeCount" tf:"node_count"`
	PayType      *string `json:"payType" tf:"pay_type"`
	// +optional
	Period *int64 `json:"period,omitempty" tf:"period"`
	// +optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit"`
	// +optional
	PublicPoints []string `json:"publicPoints,omitempty" tf:"public_points"`
	// +optional
	Status    *string `json:"status,omitempty" tf:"status"`
	VswitchID *string `json:"vswitchID" tf:"vswitch_id"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type DataCenterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DataCenterList is a list of DataCenters
type DataCenterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DataCenter CRD objects
	Items []DataCenter `json:"items,omitempty"`
}
