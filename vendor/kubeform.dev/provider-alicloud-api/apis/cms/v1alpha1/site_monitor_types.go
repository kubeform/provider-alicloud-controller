/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SiteMonitor struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SiteMonitorSpec   `json:"spec,omitempty"`
	Status            SiteMonitorStatus `json:"status,omitempty"`
}

type SiteMonitorSpecIspCities struct {
	City *string `json:"city" tf:"city"`
	Isp  *string `json:"isp" tf:"isp"`
}

type SiteMonitorSpec struct {
	State *SiteMonitorSpecResource `json:"state,omitempty" tf:"-"`

	Resource SiteMonitorSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type SiteMonitorSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Address *string `json:"address" tf:"address"`
	// +optional
	AlertIDS []string `json:"alertIDS,omitempty" tf:"alert_ids"`
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// +optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`
	// +optional
	IspCities []SiteMonitorSpecIspCities `json:"ispCities,omitempty" tf:"isp_cities"`
	// +optional
	OptionsJSON *string `json:"optionsJSON,omitempty" tf:"options_json"`
	TaskName    *string `json:"taskName" tf:"task_name"`
	// +optional
	TaskState *string `json:"taskState,omitempty" tf:"task_state"`
	TaskType  *string `json:"taskType" tf:"task_type"`
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type SiteMonitorStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SiteMonitorList is a list of SiteMonitors
type SiteMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SiteMonitor CRD objects
	Items []SiteMonitor `json:"items,omitempty"`
}
