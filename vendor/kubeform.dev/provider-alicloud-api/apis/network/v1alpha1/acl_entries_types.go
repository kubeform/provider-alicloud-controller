/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AclEntries struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AclEntriesSpec   `json:"spec,omitempty"`
	Status            AclEntriesStatus `json:"status,omitempty"`
}

type AclEntriesSpecEgress struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DestinationCIDRIP *string `json:"destinationCIDRIP,omitempty" tf:"destination_cidr_ip"`
	// +optional
	EntryType *string `json:"entryType,omitempty" tf:"entry_type"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
	// +optional
	Port *string `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type AclEntriesSpecIngress struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EntryType *string `json:"entryType,omitempty" tf:"entry_type"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
	// +optional
	Port *string `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	SourceCIDRIP *string `json:"sourceCIDRIP,omitempty" tf:"source_cidr_ip"`
}

type AclEntriesSpec struct {
	State *AclEntriesSpecResource `json:"state,omitempty" tf:"-"`

	Resource AclEntriesSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AclEntriesSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Egress []AclEntriesSpecEgress `json:"egress,omitempty" tf:"egress"`
	// +optional
	Ingress      []AclEntriesSpecIngress `json:"ingress,omitempty" tf:"ingress"`
	NetworkACLID *string                 `json:"networkACLID" tf:"network_acl_id"`
}

type AclEntriesStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AclEntriesList is a list of AclEntriess
type AclEntriesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AclEntries CRD objects
	Items []AclEntries `json:"items,omitempty"`
}
