/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Acl struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AclSpec   `json:"spec,omitempty"`
	Status            AclStatus `json:"status,omitempty"`
}

type AclSpecEgressACLEntries struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DestinationCIDRIP *string `json:"destinationCIDRIP,omitempty" tf:"destination_cidr_ip"`
	// +optional
	NetworkACLEntryName *string `json:"networkACLEntryName,omitempty" tf:"network_acl_entry_name"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
	// +optional
	Port *string `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type AclSpecIngressACLEntries struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	NetworkACLEntryName *string `json:"networkACLEntryName,omitempty" tf:"network_acl_entry_name"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
	// +optional
	Port *string `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	SourceCIDRIP *string `json:"sourceCIDRIP,omitempty" tf:"source_cidr_ip"`
}

type AclSpecResources struct {
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
}

type AclSpec struct {
	State *AclSpecResource `json:"state,omitempty" tf:"-"`

	Resource AclSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AclSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EgressACLEntries []AclSpecEgressACLEntries `json:"egressACLEntries,omitempty" tf:"egress_acl_entries"`
	// +optional
	IngressACLEntries []AclSpecIngressACLEntries `json:"ingressACLEntries,omitempty" tf:"ingress_acl_entries"`
	// +optional
	// Deprecated
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NetworkACLName *string `json:"networkACLName,omitempty" tf:"network_acl_name"`
	// +optional
	Resources []AclSpecResources `json:"resources,omitempty" tf:"resources"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	VpcID  *string `json:"vpcID" tf:"vpc_id"`
}

type AclStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AclList is a list of Acls
type AclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Acl CRD objects
	Items []Acl `json:"items,omitempty"`
}
