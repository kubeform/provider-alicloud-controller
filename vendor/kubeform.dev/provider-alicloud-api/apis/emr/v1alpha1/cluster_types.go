/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec,omitempty"`
	Status            ClusterStatus `json:"status,omitempty"`
}

type ClusterSpecBootstrapAction struct {
	// +optional
	Arg *string `json:"arg,omitempty" tf:"arg"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
}

type ClusterSpecHostGroup struct {
	// +optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew"`
	// +optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type"`
	// +optional
	DiskCapacity *string `json:"diskCapacity,omitempty" tf:"disk_capacity"`
	// +optional
	DiskCount *string `json:"diskCount,omitempty" tf:"disk_count"`
	// +optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type"`
	// +optional
	GpuDriver *string `json:"gpuDriver,omitempty" tf:"gpu_driver"`
	// +optional
	HostGroupName *string `json:"hostGroupName,omitempty" tf:"host_group_name"`
	// +optional
	HostGroupType *string `json:"hostGroupType,omitempty" tf:"host_group_type"`
	// +optional
	InstanceList *string `json:"instanceList,omitempty" tf:"instance_list"`
	// +optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`
	// +optional
	NodeCount *string `json:"nodeCount,omitempty" tf:"node_count"`
	// +optional
	Period *int64 `json:"period,omitempty" tf:"period"`
	// +optional
	SysDiskCapacity *string `json:"sysDiskCapacity,omitempty" tf:"sys_disk_capacity"`
	// +optional
	SysDiskType *string `json:"sysDiskType,omitempty" tf:"sys_disk_type"`
}

type ClusterSpec struct {
	State *ClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource ClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BootstrapAction []ClusterSpecBootstrapAction `json:"bootstrapAction,omitempty" tf:"bootstrap_action"`
	// +optional
	ChargeType  *string `json:"chargeType,omitempty" tf:"charge_type"`
	ClusterType *string `json:"clusterType" tf:"cluster_type"`
	// +optional
	DepositType *string `json:"depositType,omitempty" tf:"deposit_type"`
	// +optional
	EasEnable *bool   `json:"easEnable,omitempty" tf:"eas_enable"`
	EmrVer    *string `json:"emrVer" tf:"emr_ver"`
	// +optional
	HighAvailabilityEnable *bool `json:"highAvailabilityEnable,omitempty" tf:"high_availability_enable"`
	// +optional
	HostGroup []ClusterSpecHostGroup `json:"hostGroup,omitempty" tf:"host_group"`
	// +optional
	IsOpenPublicIP *bool `json:"isOpenPublicIP,omitempty" tf:"is_open_public_ip"`
	// +optional
	KeyPairName *string `json:"keyPairName,omitempty" tf:"key_pair_name"`
	// +optional
	MasterPwd *string `json:"masterPwd,omitempty" tf:"master_pwd"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	OptionSoftwareList []string `json:"optionSoftwareList,omitempty" tf:"option_software_list"`
	// +optional
	Period *int64 `json:"period,omitempty" tf:"period"`
	// +optional
	RelatedClusterID *string `json:"relatedClusterID,omitempty" tf:"related_cluster_id"`
	// +optional
	SecurityGroupID *string `json:"securityGroupID,omitempty" tf:"security_group_id"`
	// +optional
	SshEnable *bool `json:"sshEnable,omitempty" tf:"ssh_enable"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UseLocalMetadb *bool `json:"useLocalMetadb,omitempty" tf:"use_local_metadb"`
	// +optional
	UserDefinedEmrEcsRole *string `json:"userDefinedEmrEcsRole,omitempty" tf:"user_defined_emr_ecs_role"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
	ZoneID    *string `json:"zoneID" tf:"zone_id"`
}

type ClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterList is a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cluster CRD objects
	Items []Cluster `json:"items,omitempty"`
}
