/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Etl struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EtlSpec   `json:"spec,omitempty"`
	Status            EtlStatus `json:"status,omitempty"`
}

type EtlSpecEtlSinks struct {
	// +optional
	AccessKeyID *string `json:"-" sensitive:"true" tf:"access_key_id"`
	// +optional
	AccessKeySecret *string `json:"-" sensitive:"true" tf:"access_key_secret"`
	Endpoint        *string `json:"endpoint" tf:"endpoint"`
	// +optional
	KmsEncryptedAccessKeyID *string `json:"kmsEncryptedAccessKeyID,omitempty" tf:"kms_encrypted_access_key_id"`
	// +optional
	KmsEncryptedAccessKeySecret *string `json:"kmsEncryptedAccessKeySecret,omitempty" tf:"kms_encrypted_access_key_secret"`
	Logstore                    *string `json:"logstore" tf:"logstore"`
	Name                        *string `json:"name" tf:"name"`
	Project                     *string `json:"project" tf:"project"`
	// +optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type EtlSpec struct {
	State *EtlSpecResource `json:"state,omitempty" tf:"-"`

	Resource EtlSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type EtlSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessKeyID *string `json:"-" sensitive:"true" tf:"access_key_id"`
	// +optional
	AccessKeySecret *string `json:"-" sensitive:"true" tf:"access_key_secret"`
	// +optional
	CreateTime *int64 `json:"createTime,omitempty" tf:"create_time"`
	// +optional
	Description *string           `json:"description,omitempty" tf:"description"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	EtlName     *string           `json:"etlName" tf:"etl_name"`
	EtlSinks    []EtlSpecEtlSinks `json:"etlSinks" tf:"etl_sinks"`
	// +optional
	EtlType *string `json:"etlType,omitempty" tf:"etl_type"`
	// +optional
	FromTime *int64 `json:"fromTime,omitempty" tf:"from_time"`
	// +optional
	KmsEncryptedAccessKeyID *string `json:"kmsEncryptedAccessKeyID,omitempty" tf:"kms_encrypted_access_key_id"`
	// +optional
	KmsEncryptedAccessKeySecret *string `json:"kmsEncryptedAccessKeySecret,omitempty" tf:"kms_encrypted_access_key_secret"`
	// +optional
	KmsEncryptionAccessKeyIDContext map[string]string `json:"kmsEncryptionAccessKeyIDContext,omitempty" tf:"kms_encryption_access_key_id_context"`
	// +optional
	KmsEncryptionAccessKeySecretContext map[string]string `json:"kmsEncryptionAccessKeySecretContext,omitempty" tf:"kms_encryption_access_key_secret_context"`
	// +optional
	LastModifiedTime *int64  `json:"lastModifiedTime,omitempty" tf:"last_modified_time"`
	Logstore         *string `json:"logstore" tf:"logstore"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
	Project    *string            `json:"project" tf:"project"`
	// +optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`
	// +optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule"`
	Script   *string `json:"script" tf:"script"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	ToTime *int64 `json:"toTime,omitempty" tf:"to_time"`
	// +optional
	Version *int64 `json:"version,omitempty" tf:"version"`
}

type EtlStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EtlList is a list of Etls
type EtlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Etl CRD objects
	Items []Etl `json:"items,omitempty"`
}
