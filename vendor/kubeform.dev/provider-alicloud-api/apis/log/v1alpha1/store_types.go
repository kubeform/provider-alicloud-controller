/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Store struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoreSpec   `json:"spec,omitempty"`
	Status            StoreStatus `json:"status,omitempty"`
}

type StoreSpecEncryptConfUserCmkInfo struct {
	Arn      *string `json:"arn" tf:"arn"`
	CmkKeyID *string `json:"cmkKeyID" tf:"cmk_key_id"`
	RegionID *string `json:"regionID" tf:"region_id"`
}

type StoreSpecEncryptConf struct {
	// +optional
	Enable *bool `json:"enable,omitempty" tf:"enable"`
	// +optional
	EncryptType *string `json:"encryptType,omitempty" tf:"encrypt_type"`
	// +optional
	UserCmkInfo *StoreSpecEncryptConfUserCmkInfo `json:"userCmkInfo,omitempty" tf:"user_cmk_info"`
}

type StoreSpecShards struct {
	// +optional
	BeginKey *string `json:"beginKey,omitempty" tf:"begin_key"`
	// +optional
	EndKey *string `json:"endKey,omitempty" tf:"end_key"`
	// +optional
	ID *int64 `json:"ID,omitempty" tf:"id"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type StoreSpec struct {
	State *StoreSpecResource `json:"state,omitempty" tf:"-"`

	Resource StoreSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type StoreSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AppendMeta *bool `json:"appendMeta,omitempty" tf:"append_meta"`
	// +optional
	AutoSplit *bool `json:"autoSplit,omitempty" tf:"auto_split"`
	// +optional
	EnableWebTracking *bool `json:"enableWebTracking,omitempty" tf:"enable_web_tracking"`
	// +optional
	EncryptConf *StoreSpecEncryptConf `json:"encryptConf,omitempty" tf:"encrypt_conf"`
	// +optional
	MaxSplitShardCount *int64  `json:"maxSplitShardCount,omitempty" tf:"max_split_shard_count"`
	Name               *string `json:"name" tf:"name"`
	Project            *string `json:"project" tf:"project"`
	// +optional
	RetentionPeriod *int64 `json:"retentionPeriod,omitempty" tf:"retention_period"`
	// +optional
	ShardCount *int64 `json:"shardCount,omitempty" tf:"shard_count"`
	// +optional
	Shards []StoreSpecShards `json:"shards,omitempty" tf:"shards"`
}

type StoreStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StoreList is a list of Stores
type StoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Store CRD objects
	Items []Store `json:"items,omitempty"`
}
