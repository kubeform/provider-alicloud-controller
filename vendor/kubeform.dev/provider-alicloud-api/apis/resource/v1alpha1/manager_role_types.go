/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ManagerRole struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerRoleSpec   `json:"spec,omitempty"`
	Status            ManagerRoleStatus `json:"status,omitempty"`
}

type ManagerRoleSpec struct {
	State *ManagerRoleSpecResource `json:"state,omitempty" tf:"-"`

	Resource ManagerRoleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ManagerRoleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn                      *string `json:"arn,omitempty" tf:"arn"`
	AssumeRolePolicyDocument *string `json:"assumeRolePolicyDocument" tf:"assume_role_policy_document"`
	// +optional
	CreateDate *string `json:"createDate,omitempty" tf:"create_date"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	MaxSessionDuration *int64 `json:"maxSessionDuration,omitempty" tf:"max_session_duration"`
	// +optional
	RoleID   *string `json:"roleID,omitempty" tf:"role_id"`
	RoleName *string `json:"roleName" tf:"role_name"`
	// +optional
	UpdateDate *string `json:"updateDate,omitempty" tf:"update_date"`
}

type ManagerRoleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ManagerRoleList is a list of ManagerRoles
type ManagerRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ManagerRole CRD objects
	Items []ManagerRole `json:"items,omitempty"`
}
