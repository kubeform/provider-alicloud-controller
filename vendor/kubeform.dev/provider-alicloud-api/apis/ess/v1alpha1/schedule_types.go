/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Schedule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScheduleSpec   `json:"spec,omitempty"`
	Status            ScheduleStatus `json:"status,omitempty"`
}

type ScheduleSpec struct {
	State *ScheduleSpecResource `json:"state,omitempty" tf:"-"`

	Resource ScheduleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ScheduleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty" tf:"desired_capacity"`
	// +optional
	LaunchExpirationTime *int64 `json:"launchExpirationTime,omitempty" tf:"launch_expiration_time"`
	// +optional
	LaunchTime *string `json:"launchTime,omitempty" tf:"launch_time"`
	// +optional
	MaxValue *int64 `json:"maxValue,omitempty" tf:"max_value"`
	// +optional
	MinValue *int64 `json:"minValue,omitempty" tf:"min_value"`
	// +optional
	RecurrenceEndTime *string `json:"recurrenceEndTime,omitempty" tf:"recurrence_end_time"`
	// +optional
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type"`
	// +optional
	RecurrenceValue *string `json:"recurrenceValue,omitempty" tf:"recurrence_value"`
	// +optional
	ScalingGroupID *string `json:"scalingGroupID,omitempty" tf:"scaling_group_id"`
	// +optional
	ScheduledAction *string `json:"scheduledAction,omitempty" tf:"scheduled_action"`
	// +optional
	ScheduledTaskName *string `json:"scheduledTaskName,omitempty" tf:"scheduled_task_name"`
	// +optional
	TaskEnabled *bool `json:"taskEnabled,omitempty" tf:"task_enabled"`
}

type ScheduleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ScheduleList is a list of Schedules
type ScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Schedule CRD objects
	Items []Schedule `json:"items,omitempty"`
}
