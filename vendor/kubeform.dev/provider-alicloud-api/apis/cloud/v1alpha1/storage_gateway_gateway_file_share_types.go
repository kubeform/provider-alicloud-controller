/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StorageGatewayGatewayFileShare struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageGatewayGatewayFileShareSpec   `json:"spec,omitempty"`
	Status            StorageGatewayGatewayFileShareStatus `json:"status,omitempty"`
}

type StorageGatewayGatewayFileShareSpec struct {
	State *StorageGatewayGatewayFileShareSpecResource `json:"state,omitempty" tf:"-"`

	Resource StorageGatewayGatewayFileShareSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type StorageGatewayGatewayFileShareSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessBasedEnumeration *bool `json:"accessBasedEnumeration,omitempty" tf:"access_based_enumeration"`
	// +optional
	BackendLimit *int64 `json:"backendLimit,omitempty" tf:"backend_limit"`
	// +optional
	Browsable *bool `json:"browsable,omitempty" tf:"browsable"`
	// +optional
	BypassCacheRead *bool `json:"bypassCacheRead,omitempty" tf:"bypass_cache_read"`
	// +optional
	CacheMode *string `json:"cacheMode,omitempty" tf:"cache_mode"`
	// +optional
	DirectIo *bool `json:"directIo,omitempty" tf:"direct_io"`
	// +optional
	DownloadLimit *int64 `json:"downloadLimit,omitempty" tf:"download_limit"`
	// +optional
	FastReclaim *bool `json:"fastReclaim,omitempty" tf:"fast_reclaim"`
	// +optional
	FeLimit              *int64  `json:"feLimit,omitempty" tf:"fe_limit"`
	GatewayFileShareName *string `json:"gatewayFileShareName" tf:"gateway_file_share_name"`
	GatewayID            *string `json:"gatewayID" tf:"gateway_id"`
	// +optional
	IgnoreDelete *bool `json:"ignoreDelete,omitempty" tf:"ignore_delete"`
	// +optional
	InPlace *bool `json:"inPlace,omitempty" tf:"in_place"`
	// +optional
	IndexID *string `json:"indexID,omitempty" tf:"index_id"`
	// +optional
	LagPeriod *int64  `json:"lagPeriod,omitempty" tf:"lag_period"`
	LocalPath *string `json:"localPath" tf:"local_path"`
	// +optional
	NfsV4Optimization *bool   `json:"nfsV4Optimization,omitempty" tf:"nfs_v4_optimization"`
	OssBucketName     *string `json:"ossBucketName" tf:"oss_bucket_name"`
	// +optional
	OssBucketSsl *bool   `json:"ossBucketSsl,omitempty" tf:"oss_bucket_ssl"`
	OssEndpoint  *string `json:"ossEndpoint" tf:"oss_endpoint"`
	// +optional
	PartialSyncPaths *string `json:"partialSyncPaths,omitempty" tf:"partial_sync_paths"`
	// +optional
	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix"`
	// +optional
	PollingInterval *int64  `json:"pollingInterval,omitempty" tf:"polling_interval"`
	Protocol        *string `json:"protocol" tf:"protocol"`
	// +optional
	RemoteSync *bool `json:"remoteSync,omitempty" tf:"remote_sync"`
	// +optional
	RemoteSyncDownload *bool `json:"remoteSyncDownload,omitempty" tf:"remote_sync_download"`
	// +optional
	RoClientList *string `json:"roClientList,omitempty" tf:"ro_client_list"`
	// +optional
	RoUserList *string `json:"roUserList,omitempty" tf:"ro_user_list"`
	// +optional
	RwClientList *string `json:"rwClientList,omitempty" tf:"rw_client_list"`
	// +optional
	RwUserList *string `json:"rwUserList,omitempty" tf:"rw_user_list"`
	// +optional
	Squash *string `json:"squash,omitempty" tf:"squash"`
	// +optional
	SupportArchive *bool `json:"supportArchive,omitempty" tf:"support_archive"`
	// +optional
	TransferAcceleration *bool `json:"transferAcceleration,omitempty" tf:"transfer_acceleration"`
	// +optional
	WindowsACL *bool `json:"windowsACL,omitempty" tf:"windows_acl"`
}

type StorageGatewayGatewayFileShareStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StorageGatewayGatewayFileShareList is a list of StorageGatewayGatewayFileShares
type StorageGatewayGatewayFileShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StorageGatewayGatewayFileShare CRD objects
	Items []StorageGatewayGatewayFileShare `json:"items,omitempty"`
}
