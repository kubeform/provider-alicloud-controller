/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Import struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImportSpec   `json:"spec,omitempty"`
	Status            ImportStatus `json:"status,omitempty"`
}

type ImportSpecDiskDeviceMapping struct {
	// +optional
	Device *string `json:"device,omitempty" tf:"device"`
	// +optional
	DiskImageSize *int64 `json:"diskImageSize,omitempty" tf:"disk_image_size"`
	// +optional
	Format *string `json:"format,omitempty" tf:"format"`
	// +optional
	OssBucket *string `json:"ossBucket,omitempty" tf:"oss_bucket"`
	// +optional
	OssObject *string `json:"ossObject,omitempty" tf:"oss_object"`
}

type ImportSpec struct {
	State *ImportSpecResource `json:"state,omitempty" tf:"-"`

	Resource ImportSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ImportSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture"`
	// +optional
	Description       *string                       `json:"description,omitempty" tf:"description"`
	DiskDeviceMapping []ImportSpecDiskDeviceMapping `json:"diskDeviceMapping" tf:"disk_device_mapping"`
	// +optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name"`
	// +optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`
	// +optional
	OsType *string `json:"osType,omitempty" tf:"os_type"`
	// +optional
	Platform *string `json:"platform,omitempty" tf:"platform"`
}

type ImportStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ImportList is a list of Imports
type ImportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Import CRD objects
	Items []Import `json:"items,omitempty"`
}
