/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DedicatedHostSpecNetworkAttributes{}).Type1()):  DedicatedHostSpecNetworkAttributesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecNetworkInterfaces{}).Type1()): LaunchTemplateSpecNetworkInterfacesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecSystemDisk{}).Type1()):        LaunchTemplateSpecSystemDiskCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DedicatedHostSpecNetworkAttributes{}).Type1()):  DedicatedHostSpecNetworkAttributesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecNetworkInterfaces{}).Type1()): LaunchTemplateSpecNetworkInterfacesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecSystemDisk{}).Type1()):        LaunchTemplateSpecSystemDiskCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DedicatedHostSpecNetworkAttributesCodec struct {
}

func (DedicatedHostSpecNetworkAttributesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DedicatedHostSpecNetworkAttributes)(ptr) == nil
}

func (DedicatedHostSpecNetworkAttributesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DedicatedHostSpecNetworkAttributes)(ptr)
	var objs []DedicatedHostSpecNetworkAttributes
	if obj != nil {
		objs = []DedicatedHostSpecNetworkAttributes{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DedicatedHostSpecNetworkAttributes{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DedicatedHostSpecNetworkAttributesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DedicatedHostSpecNetworkAttributes)(ptr) = DedicatedHostSpecNetworkAttributes{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DedicatedHostSpecNetworkAttributes

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DedicatedHostSpecNetworkAttributes{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DedicatedHostSpecNetworkAttributes)(ptr) = objs[0]
			} else {
				*(*DedicatedHostSpecNetworkAttributes)(ptr) = DedicatedHostSpecNetworkAttributes{}
			}
		} else {
			*(*DedicatedHostSpecNetworkAttributes)(ptr) = DedicatedHostSpecNetworkAttributes{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DedicatedHostSpecNetworkAttributes

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DedicatedHostSpecNetworkAttributes{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DedicatedHostSpecNetworkAttributes)(ptr) = obj
		} else {
			*(*DedicatedHostSpecNetworkAttributes)(ptr) = DedicatedHostSpecNetworkAttributes{}
		}
	default:
		iter.ReportError("decode DedicatedHostSpecNetworkAttributes", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LaunchTemplateSpecNetworkInterfacesCodec struct {
}

func (LaunchTemplateSpecNetworkInterfacesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LaunchTemplateSpecNetworkInterfaces)(ptr) == nil
}

func (LaunchTemplateSpecNetworkInterfacesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LaunchTemplateSpecNetworkInterfaces)(ptr)
	var objs []LaunchTemplateSpecNetworkInterfaces
	if obj != nil {
		objs = []LaunchTemplateSpecNetworkInterfaces{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecNetworkInterfaces{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LaunchTemplateSpecNetworkInterfacesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LaunchTemplateSpecNetworkInterfaces)(ptr) = LaunchTemplateSpecNetworkInterfaces{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LaunchTemplateSpecNetworkInterfaces

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecNetworkInterfaces{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LaunchTemplateSpecNetworkInterfaces)(ptr) = objs[0]
			} else {
				*(*LaunchTemplateSpecNetworkInterfaces)(ptr) = LaunchTemplateSpecNetworkInterfaces{}
			}
		} else {
			*(*LaunchTemplateSpecNetworkInterfaces)(ptr) = LaunchTemplateSpecNetworkInterfaces{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj LaunchTemplateSpecNetworkInterfaces

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecNetworkInterfaces{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*LaunchTemplateSpecNetworkInterfaces)(ptr) = obj
		} else {
			*(*LaunchTemplateSpecNetworkInterfaces)(ptr) = LaunchTemplateSpecNetworkInterfaces{}
		}
	default:
		iter.ReportError("decode LaunchTemplateSpecNetworkInterfaces", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LaunchTemplateSpecSystemDiskCodec struct {
}

func (LaunchTemplateSpecSystemDiskCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LaunchTemplateSpecSystemDisk)(ptr) == nil
}

func (LaunchTemplateSpecSystemDiskCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LaunchTemplateSpecSystemDisk)(ptr)
	var objs []LaunchTemplateSpecSystemDisk
	if obj != nil {
		objs = []LaunchTemplateSpecSystemDisk{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecSystemDisk{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LaunchTemplateSpecSystemDiskCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LaunchTemplateSpecSystemDisk)(ptr) = LaunchTemplateSpecSystemDisk{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LaunchTemplateSpecSystemDisk

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecSystemDisk{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LaunchTemplateSpecSystemDisk)(ptr) = objs[0]
			} else {
				*(*LaunchTemplateSpecSystemDisk)(ptr) = LaunchTemplateSpecSystemDisk{}
			}
		} else {
			*(*LaunchTemplateSpecSystemDisk)(ptr) = LaunchTemplateSpecSystemDisk{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj LaunchTemplateSpecSystemDisk

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LaunchTemplateSpecSystemDisk{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*LaunchTemplateSpecSystemDisk)(ptr) = obj
		} else {
			*(*LaunchTemplateSpecSystemDisk)(ptr) = LaunchTemplateSpecSystemDisk{}
		}
	default:
		iter.ReportError("decode LaunchTemplateSpecSystemDisk", "unexpected JSON type")
	}
}
