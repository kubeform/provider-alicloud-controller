/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DedicatedHost struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedHostSpec   `json:"spec,omitempty"`
	Status            DedicatedHostStatus `json:"status,omitempty"`
}

type DedicatedHostSpec struct {
	State *DedicatedHostSpecResource `json:"state,omitempty" tf:"-"`

	Resource DedicatedHostSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DedicatedHostSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AllocationStatus *string `json:"allocationStatus,omitempty" tf:"allocation_status"`
	// +optional
	AutoRenew            *bool   `json:"autoRenew,omitempty" tf:"auto_renew"`
	DedicatedHostGroupID *string `json:"dedicatedHostGroupID" tf:"dedicated_host_group_id"`
	// +optional
	DedicatedHostID *string `json:"dedicatedHostID,omitempty" tf:"dedicated_host_id"`
	HostClass       *string `json:"hostClass" tf:"host_class"`
	// +optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`
	// +optional
	ImageCategory *string `json:"imageCategory,omitempty" tf:"image_category"`
	// +optional
	OsPassword  *string `json:"-" sensitive:"true" tf:"os_password"`
	PaymentType *string `json:"paymentType" tf:"payment_type"`
	// +optional
	Period *string `json:"period,omitempty" tf:"period"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UsedTime  *int64  `json:"usedTime,omitempty" tf:"used_time"`
	VswitchID *string `json:"vswitchID" tf:"vswitch_id"`
	ZoneID    *string `json:"zoneID" tf:"zone_id"`
}

type DedicatedHostStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DedicatedHostList is a list of DedicatedHosts
type DedicatedHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DedicatedHost CRD objects
	Items []DedicatedHost `json:"items,omitempty"`
}
