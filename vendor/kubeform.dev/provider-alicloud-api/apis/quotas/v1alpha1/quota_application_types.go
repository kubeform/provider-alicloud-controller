/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type QuotaApplication struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuotaApplicationSpec   `json:"spec,omitempty"`
	Status            QuotaApplicationStatus `json:"status,omitempty"`
}

type QuotaApplicationSpecDimensions struct {
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type QuotaApplicationSpec struct {
	State *QuotaApplicationSpecResource `json:"state,omitempty" tf:"-"`

	Resource QuotaApplicationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type QuotaApplicationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ApproveValue *string `json:"approveValue,omitempty" tf:"approve_value"`
	// +optional
	AuditMode *string `json:"auditMode,omitempty" tf:"audit_mode"`
	// +optional
	AuditReason *string  `json:"auditReason,omitempty" tf:"audit_reason"`
	DesireValue *float64 `json:"desireValue" tf:"desire_value"`
	// +optional
	Dimensions []QuotaApplicationSpecDimensions `json:"dimensions,omitempty" tf:"dimensions"`
	// +optional
	EffectiveTime *string `json:"effectiveTime,omitempty" tf:"effective_time"`
	// +optional
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time"`
	// +optional
	NoticeType      *int64  `json:"noticeType,omitempty" tf:"notice_type"`
	ProductCode     *string `json:"productCode" tf:"product_code"`
	QuotaActionCode *string `json:"quotaActionCode" tf:"quota_action_code"`
	// +optional
	QuotaCategory *string `json:"quotaCategory,omitempty" tf:"quota_category"`
	// +optional
	QuotaDescription *string `json:"quotaDescription,omitempty" tf:"quota_description"`
	// +optional
	QuotaName *string `json:"quotaName,omitempty" tf:"quota_name"`
	// +optional
	QuotaUnit *string `json:"quotaUnit,omitempty" tf:"quota_unit"`
	Reason    *string `json:"reason" tf:"reason"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type QuotaApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// QuotaApplicationList is a list of QuotaApplications
type QuotaApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of QuotaApplication CRD objects
	Items []QuotaApplication `json:"items,omitempty"`
}
