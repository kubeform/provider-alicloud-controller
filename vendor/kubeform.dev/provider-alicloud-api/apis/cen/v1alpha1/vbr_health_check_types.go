/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VbrHealthCheck struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VbrHealthCheckSpec   `json:"spec,omitempty"`
	Status            VbrHealthCheckStatus `json:"status,omitempty"`
}

type VbrHealthCheckSpec struct {
	State *VbrHealthCheckSpecResource `json:"state,omitempty" tf:"-"`

	Resource VbrHealthCheckSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type VbrHealthCheckSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CenID *string `json:"cenID" tf:"cen_id"`
	// +optional
	HealthCheckInterval *int64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval"`
	// +optional
	HealthCheckSourceIP *string `json:"healthCheckSourceIP,omitempty" tf:"health_check_source_ip"`
	HealthCheckTargetIP *string `json:"healthCheckTargetIP" tf:"health_check_target_ip"`
	// +optional
	HealthyThreshold *int64  `json:"healthyThreshold,omitempty" tf:"healthy_threshold"`
	VbrInstanceID    *string `json:"vbrInstanceID" tf:"vbr_instance_id"`
	// +optional
	VbrInstanceOwnerID  *int64  `json:"vbrInstanceOwnerID,omitempty" tf:"vbr_instance_owner_id"`
	VbrInstanceRegionID *string `json:"vbrInstanceRegionID" tf:"vbr_instance_region_id"`
}

type VbrHealthCheckStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VbrHealthCheckList is a list of VbrHealthChecks
type VbrHealthCheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VbrHealthCheck CRD objects
	Items []VbrHealthCheck `json:"items,omitempty"`
}
