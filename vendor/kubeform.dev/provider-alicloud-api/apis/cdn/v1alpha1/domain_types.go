/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Domain struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec,omitempty"`
	Status            DomainStatus `json:"status,omitempty"`
}

type DomainSpecAuthConfig struct {
	// +optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type"`
	// +optional
	MasterKey *string `json:"masterKey,omitempty" tf:"master_key"`
	// +optional
	SlaveKey *string `json:"slaveKey,omitempty" tf:"slave_key"`
	// +optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`
}

type DomainSpecCacheConfig struct {
	CacheContent *string `json:"cacheContent" tf:"cache_content"`
	// +optional
	CacheID   *string `json:"cacheID,omitempty" tf:"cache_id"`
	CacheType *string `json:"cacheType" tf:"cache_type"`
	Ttl       *int64  `json:"ttl" tf:"ttl"`
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type DomainSpecCertificateConfig struct {
	// +optional
	PrivateKey *string `json:"-" sensitive:"true" tf:"private_key"`
	// +optional
	ServerCertificate *string `json:"-" sensitive:"true" tf:"server_certificate"`
	// +optional
	ServerCertificateStatus *string `json:"serverCertificateStatus,omitempty" tf:"server_certificate_status"`
}

type DomainSpecHttpHeaderConfig struct {
	// +optional
	HeaderID    *string `json:"headerID,omitempty" tf:"header_id"`
	HeaderKey   *string `json:"headerKey" tf:"header_key"`
	HeaderValue *string `json:"headerValue" tf:"header_value"`
}

type DomainSpecPage404Config struct {
	// +optional
	CustomPageURL *string `json:"customPageURL,omitempty" tf:"custom_page_url"`
	// +optional
	ErrorCode *string `json:"errorCode,omitempty" tf:"error_code"`
	// +optional
	PageType *string `json:"pageType,omitempty" tf:"page_type"`
}

type DomainSpecParameterFilterConfig struct {
	// +optional
	Enable *string `json:"enable,omitempty" tf:"enable"`
	// +optional
	// +kubebuilder:validation:MaxItems=10
	HashKeyArgs []string `json:"hashKeyArgs,omitempty" tf:"hash_key_args"`
}

type DomainSpecReferConfig struct {
	// +optional
	AllowEmpty *string  `json:"allowEmpty,omitempty" tf:"allow_empty"`
	ReferList  []string `json:"referList" tf:"refer_list"`
	// +optional
	ReferType *string `json:"referType,omitempty" tf:"refer_type"`
}

type DomainSpec struct {
	State *DomainSpecResource `json:"state,omitempty" tf:"-"`

	Resource DomainSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DomainSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// Deprecated
	AuthConfig *DomainSpecAuthConfig `json:"authConfig,omitempty" tf:"auth_config"`
	// +optional
	// Deprecated
	BlockIPS []string `json:"blockIPS,omitempty" tf:"block_ips"`
	// +optional
	// Deprecated
	CacheConfig []DomainSpecCacheConfig `json:"cacheConfig,omitempty" tf:"cache_config"`
	CdnType     *string                 `json:"cdnType" tf:"cdn_type"`
	// +optional
	// Deprecated
	CertificateConfig *DomainSpecCertificateConfig `json:"certificateConfig,omitempty" tf:"certificate_config"`
	DomainName        *string                      `json:"domainName" tf:"domain_name"`
	// +optional
	// +kubebuilder:validation:MaxItems=10
	// Deprecated
	HttpHeaderConfig []DomainSpecHttpHeaderConfig `json:"httpHeaderConfig,omitempty" tf:"http_header_config"`
	// +optional
	// Deprecated
	OptimizeEnable *string `json:"optimizeEnable,omitempty" tf:"optimize_enable"`
	// +optional
	// Deprecated
	Page404Config *DomainSpecPage404Config `json:"page404Config,omitempty" tf:"page_404_config"`
	// +optional
	// Deprecated
	PageCompressEnable *string `json:"pageCompressEnable,omitempty" tf:"page_compress_enable"`
	// +optional
	// Deprecated
	ParameterFilterConfig *DomainSpecParameterFilterConfig `json:"parameterFilterConfig,omitempty" tf:"parameter_filter_config"`
	// +optional
	// Deprecated
	RangeEnable *string `json:"rangeEnable,omitempty" tf:"range_enable"`
	// +optional
	// Deprecated
	ReferConfig *DomainSpecReferConfig `json:"referConfig,omitempty" tf:"refer_config"`
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
	// +optional
	// Deprecated
	SourcePort *int64 `json:"sourcePort,omitempty" tf:"source_port"`
	// +optional
	// Deprecated
	SourceType *string `json:"sourceType,omitempty" tf:"source_type"`
	// +optional
	// +kubebuilder:validation:MaxItems=20
	// Deprecated
	Sources []string `json:"sources,omitempty" tf:"sources"`
	// +optional
	// Deprecated
	VideoSeekEnable *string `json:"videoSeekEnable,omitempty" tf:"video_seek_enable"`
}

type DomainStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DomainList is a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Domain CRD objects
	Items []Domain `json:"items,omitempty"`
}
