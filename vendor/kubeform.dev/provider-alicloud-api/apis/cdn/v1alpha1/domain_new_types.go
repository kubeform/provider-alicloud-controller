/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DomainNew struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainNewSpec   `json:"spec,omitempty"`
	Status            DomainNewStatus `json:"status,omitempty"`
}

type DomainNewSpecCertificateConfig struct {
	// +optional
	CertName *string `json:"certName,omitempty" tf:"cert_name"`
	// +optional
	CertType *string `json:"certType,omitempty" tf:"cert_type"`
	// +optional
	ForceSet *string `json:"forceSet,omitempty" tf:"force_set"`
	// +optional
	PrivateKey *string `json:"-" sensitive:"true" tf:"private_key"`
	// +optional
	ServerCertificate *string `json:"-" sensitive:"true" tf:"server_certificate"`
	// +optional
	ServerCertificateStatus *string `json:"serverCertificateStatus,omitempty" tf:"server_certificate_status"`
}

type DomainNewSpecSources struct {
	Content *string `json:"content" tf:"content"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Priority *int64  `json:"priority,omitempty" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type DomainNewSpec struct {
	State *DomainNewSpecResource `json:"state,omitempty" tf:"-"`

	Resource DomainNewSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DomainNewSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CdnType *string `json:"cdnType" tf:"cdn_type"`
	// +optional
	CertificateConfig *DomainNewSpecCertificateConfig `json:"certificateConfig,omitempty" tf:"certificate_config"`
	// +optional
	Cname      *string `json:"cname,omitempty" tf:"cname"`
	DomainName *string `json:"domainName" tf:"domain_name"`
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// +optional
	Scope   *string                `json:"scope,omitempty" tf:"scope"`
	Sources []DomainNewSpecSources `json:"sources" tf:"sources"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type DomainNewStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DomainNewList is a list of DomainNews
type DomainNewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DomainNew CRD objects
	Items []DomainNew `json:"items,omitempty"`
}
