/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecAuthConfig{}).Type1()):            DomainSpecAuthConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecCertificateConfig{}).Type1()):     DomainSpecCertificateConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecPage404Config{}).Type1()):         DomainSpecPage404ConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecParameterFilterConfig{}).Type1()): DomainSpecParameterFilterConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecReferConfig{}).Type1()):           DomainSpecReferConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNewSpecCertificateConfig{}).Type1()):  DomainNewSpecCertificateConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecAuthConfig{}).Type1()):            DomainSpecAuthConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecCertificateConfig{}).Type1()):     DomainSpecCertificateConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecPage404Config{}).Type1()):         DomainSpecPage404ConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecParameterFilterConfig{}).Type1()): DomainSpecParameterFilterConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecReferConfig{}).Type1()):           DomainSpecReferConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNewSpecCertificateConfig{}).Type1()):  DomainNewSpecCertificateConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DomainSpecAuthConfigCodec struct {
}

func (DomainSpecAuthConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecAuthConfig)(ptr) == nil
}

func (DomainSpecAuthConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecAuthConfig)(ptr)
	var objs []DomainSpecAuthConfig
	if obj != nil {
		objs = []DomainSpecAuthConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecAuthConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecAuthConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecAuthConfig)(ptr) = DomainSpecAuthConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecAuthConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecAuthConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecAuthConfig)(ptr) = objs[0]
			} else {
				*(*DomainSpecAuthConfig)(ptr) = DomainSpecAuthConfig{}
			}
		} else {
			*(*DomainSpecAuthConfig)(ptr) = DomainSpecAuthConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainSpecAuthConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecAuthConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainSpecAuthConfig)(ptr) = obj
		} else {
			*(*DomainSpecAuthConfig)(ptr) = DomainSpecAuthConfig{}
		}
	default:
		iter.ReportError("decode DomainSpecAuthConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecCertificateConfigCodec struct {
}

func (DomainSpecCertificateConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecCertificateConfig)(ptr) == nil
}

func (DomainSpecCertificateConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecCertificateConfig)(ptr)
	var objs []DomainSpecCertificateConfig
	if obj != nil {
		objs = []DomainSpecCertificateConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecCertificateConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecCertificateConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecCertificateConfig)(ptr) = DomainSpecCertificateConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecCertificateConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecCertificateConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecCertificateConfig)(ptr) = objs[0]
			} else {
				*(*DomainSpecCertificateConfig)(ptr) = DomainSpecCertificateConfig{}
			}
		} else {
			*(*DomainSpecCertificateConfig)(ptr) = DomainSpecCertificateConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainSpecCertificateConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecCertificateConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainSpecCertificateConfig)(ptr) = obj
		} else {
			*(*DomainSpecCertificateConfig)(ptr) = DomainSpecCertificateConfig{}
		}
	default:
		iter.ReportError("decode DomainSpecCertificateConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecPage404ConfigCodec struct {
}

func (DomainSpecPage404ConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecPage404Config)(ptr) == nil
}

func (DomainSpecPage404ConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecPage404Config)(ptr)
	var objs []DomainSpecPage404Config
	if obj != nil {
		objs = []DomainSpecPage404Config{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecPage404Config{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecPage404ConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecPage404Config)(ptr) = DomainSpecPage404Config{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecPage404Config

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecPage404Config{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecPage404Config)(ptr) = objs[0]
			} else {
				*(*DomainSpecPage404Config)(ptr) = DomainSpecPage404Config{}
			}
		} else {
			*(*DomainSpecPage404Config)(ptr) = DomainSpecPage404Config{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainSpecPage404Config

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecPage404Config{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainSpecPage404Config)(ptr) = obj
		} else {
			*(*DomainSpecPage404Config)(ptr) = DomainSpecPage404Config{}
		}
	default:
		iter.ReportError("decode DomainSpecPage404Config", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecParameterFilterConfigCodec struct {
}

func (DomainSpecParameterFilterConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecParameterFilterConfig)(ptr) == nil
}

func (DomainSpecParameterFilterConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecParameterFilterConfig)(ptr)
	var objs []DomainSpecParameterFilterConfig
	if obj != nil {
		objs = []DomainSpecParameterFilterConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecParameterFilterConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecParameterFilterConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecParameterFilterConfig)(ptr) = DomainSpecParameterFilterConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecParameterFilterConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecParameterFilterConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecParameterFilterConfig)(ptr) = objs[0]
			} else {
				*(*DomainSpecParameterFilterConfig)(ptr) = DomainSpecParameterFilterConfig{}
			}
		} else {
			*(*DomainSpecParameterFilterConfig)(ptr) = DomainSpecParameterFilterConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainSpecParameterFilterConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecParameterFilterConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainSpecParameterFilterConfig)(ptr) = obj
		} else {
			*(*DomainSpecParameterFilterConfig)(ptr) = DomainSpecParameterFilterConfig{}
		}
	default:
		iter.ReportError("decode DomainSpecParameterFilterConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecReferConfigCodec struct {
}

func (DomainSpecReferConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecReferConfig)(ptr) == nil
}

func (DomainSpecReferConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecReferConfig)(ptr)
	var objs []DomainSpecReferConfig
	if obj != nil {
		objs = []DomainSpecReferConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecReferConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecReferConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecReferConfig)(ptr) = DomainSpecReferConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecReferConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecReferConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecReferConfig)(ptr) = objs[0]
			} else {
				*(*DomainSpecReferConfig)(ptr) = DomainSpecReferConfig{}
			}
		} else {
			*(*DomainSpecReferConfig)(ptr) = DomainSpecReferConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainSpecReferConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecReferConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainSpecReferConfig)(ptr) = obj
		} else {
			*(*DomainSpecReferConfig)(ptr) = DomainSpecReferConfig{}
		}
	default:
		iter.ReportError("decode DomainSpecReferConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainNewSpecCertificateConfigCodec struct {
}

func (DomainNewSpecCertificateConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainNewSpecCertificateConfig)(ptr) == nil
}

func (DomainNewSpecCertificateConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainNewSpecCertificateConfig)(ptr)
	var objs []DomainNewSpecCertificateConfig
	if obj != nil {
		objs = []DomainNewSpecCertificateConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNewSpecCertificateConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainNewSpecCertificateConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainNewSpecCertificateConfig)(ptr) = DomainNewSpecCertificateConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainNewSpecCertificateConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNewSpecCertificateConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainNewSpecCertificateConfig)(ptr) = objs[0]
			} else {
				*(*DomainNewSpecCertificateConfig)(ptr) = DomainNewSpecCertificateConfig{}
			}
		} else {
			*(*DomainNewSpecCertificateConfig)(ptr) = DomainNewSpecCertificateConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainNewSpecCertificateConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNewSpecCertificateConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainNewSpecCertificateConfig)(ptr) = obj
		} else {
			*(*DomainNewSpecCertificateConfig)(ptr) = DomainNewSpecCertificateConfig{}
		}
	default:
		iter.ReportError("decode DomainNewSpecCertificateConfig", "unexpected JSON type")
	}
}
