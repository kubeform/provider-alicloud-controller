/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServerBackupPlan struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerBackupPlanSpec   `json:"spec,omitempty"`
	Status            ServerBackupPlanStatus `json:"status,omitempty"`
}

type ServerBackupPlanSpecDetail struct {
	AppConsistent *bool `json:"appConsistent" tf:"app_consistent"`
	// +optional
	DestinationRegionID *string `json:"destinationRegionID,omitempty" tf:"destination_region_id"`
	// +optional
	DestinationRetention *int64 `json:"destinationRetention,omitempty" tf:"destination_retention"`
	// +optional
	DiskIDList []string `json:"diskIDList,omitempty" tf:"disk_id_list"`
	// +optional
	DoCopy *bool `json:"doCopy,omitempty" tf:"do_copy"`
	// +optional
	EnableFsFreeze *bool `json:"enableFsFreeze,omitempty" tf:"enable_fs_freeze"`
	// +optional
	PostScriptPath *string `json:"postScriptPath,omitempty" tf:"post_script_path"`
	// +optional
	PreScriptPath *string `json:"preScriptPath,omitempty" tf:"pre_script_path"`
	SnapshotGroup *bool   `json:"snapshotGroup" tf:"snapshot_group"`
	// +optional
	TimeoutInSeconds *int64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds"`
}

type ServerBackupPlanSpec struct {
	State *ServerBackupPlanSpecResource `json:"state,omitempty" tf:"-"`

	Resource ServerBackupPlanSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServerBackupPlanSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Detail []ServerBackupPlanSpecDetail `json:"detail" tf:"detail"`
	// +optional
	Disabled                *bool   `json:"disabled,omitempty" tf:"disabled"`
	EcsServerBackupPlanName *string `json:"ecsServerBackupPlanName" tf:"ecs_server_backup_plan_name"`
	InstanceID              *string `json:"instanceID" tf:"instance_id"`
	Retention               *int64  `json:"retention" tf:"retention"`
	Schedule                *string `json:"schedule" tf:"schedule"`
}

type ServerBackupPlanStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServerBackupPlanList is a list of ServerBackupPlans
type ServerBackupPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServerBackupPlan CRD objects
	Items []ServerBackupPlan `json:"items,omitempty"`
}
