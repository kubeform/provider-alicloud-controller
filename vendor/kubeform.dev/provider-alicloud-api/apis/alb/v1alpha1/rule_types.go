/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Rule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec,omitempty"`
	Status            RuleStatus `json:"status,omitempty"`
}

type RuleSpecRuleActionsFixedResponseConfig struct {
	Content *string `json:"content" tf:"content"`
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// +optional
	HttpCode *string `json:"httpCode,omitempty" tf:"http_code"`
}

type RuleSpecRuleActionsForwardGroupConfigServerGroupTuples struct {
	// +optional
	ServerGroupID *string `json:"serverGroupID,omitempty" tf:"server_group_id"`
}

type RuleSpecRuleActionsForwardGroupConfig struct {
	// +optional
	ServerGroupTuples []RuleSpecRuleActionsForwardGroupConfigServerGroupTuples `json:"serverGroupTuples,omitempty" tf:"server_group_tuples"`
}

type RuleSpecRuleActionsInsertHeaderConfig struct {
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
	// +optional
	ValueType *string `json:"valueType,omitempty" tf:"value_type"`
}

type RuleSpecRuleActionsRedirectConfig struct {
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// +optional
	HttpCode *string `json:"httpCode,omitempty" tf:"http_code"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	Query *string `json:"query,omitempty" tf:"query"`
}

type RuleSpecRuleActionsRewriteConfig struct {
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Query *string `json:"query,omitempty" tf:"query"`
}

type RuleSpecRuleActions struct {
	// +optional
	FixedResponseConfig *RuleSpecRuleActionsFixedResponseConfig `json:"fixedResponseConfig,omitempty" tf:"fixed_response_config"`
	// +optional
	ForwardGroupConfig *RuleSpecRuleActionsForwardGroupConfig `json:"forwardGroupConfig,omitempty" tf:"forward_group_config"`
	// +optional
	InsertHeaderConfig *RuleSpecRuleActionsInsertHeaderConfig `json:"insertHeaderConfig,omitempty" tf:"insert_header_config"`
	Order              *int64                                 `json:"order" tf:"order"`
	// +optional
	RedirectConfig *RuleSpecRuleActionsRedirectConfig `json:"redirectConfig,omitempty" tf:"redirect_config"`
	// +optional
	RewriteConfig *RuleSpecRuleActionsRewriteConfig `json:"rewriteConfig,omitempty" tf:"rewrite_config"`
	Type          *string                           `json:"type" tf:"type"`
}

type RuleSpecRuleConditionsCookieConfigValues struct {
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecRuleConditionsCookieConfig struct {
	// +optional
	Values []RuleSpecRuleConditionsCookieConfigValues `json:"values,omitempty" tf:"values"`
}

type RuleSpecRuleConditionsHeaderConfig struct {
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type RuleSpecRuleConditionsHostConfig struct {
	// +optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type RuleSpecRuleConditionsMethodConfig struct {
	// +optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type RuleSpecRuleConditionsPathConfig struct {
	// +optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type RuleSpecRuleConditionsQueryStringConfigValues struct {
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecRuleConditionsQueryStringConfig struct {
	// +optional
	Values []RuleSpecRuleConditionsQueryStringConfigValues `json:"values,omitempty" tf:"values"`
}

type RuleSpecRuleConditions struct {
	// +optional
	CookieConfig *RuleSpecRuleConditionsCookieConfig `json:"cookieConfig,omitempty" tf:"cookie_config"`
	// +optional
	HeaderConfig *RuleSpecRuleConditionsHeaderConfig `json:"headerConfig,omitempty" tf:"header_config"`
	// +optional
	HostConfig *RuleSpecRuleConditionsHostConfig `json:"hostConfig,omitempty" tf:"host_config"`
	// +optional
	MethodConfig *RuleSpecRuleConditionsMethodConfig `json:"methodConfig,omitempty" tf:"method_config"`
	// +optional
	PathConfig *RuleSpecRuleConditionsPathConfig `json:"pathConfig,omitempty" tf:"path_config"`
	// +optional
	QueryStringConfig *RuleSpecRuleConditionsQueryStringConfig `json:"queryStringConfig,omitempty" tf:"query_string_config"`
	Type              *string                                  `json:"type" tf:"type"`
}

type RuleSpec struct {
	State *RuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource RuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RuleSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	DryRun         *bool                    `json:"dryRun,omitempty" tf:"dry_run"`
	ListenerID     *string                  `json:"listenerID" tf:"listener_id"`
	Priority       *int64                   `json:"priority" tf:"priority"`
	RuleActions    []RuleSpecRuleActions    `json:"ruleActions" tf:"rule_actions"`
	RuleConditions []RuleSpecRuleConditions `json:"ruleConditions" tf:"rule_conditions"`
	RuleName       *string                  `json:"ruleName" tf:"rule_name"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type RuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RuleList is a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Rule CRD objects
	Items []Rule `json:"items,omitempty"`
}
