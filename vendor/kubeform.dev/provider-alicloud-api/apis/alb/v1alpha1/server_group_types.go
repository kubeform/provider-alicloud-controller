/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServerGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerGroupSpec   `json:"spec,omitempty"`
	Status            ServerGroupStatus `json:"status,omitempty"`
}

type ServerGroupSpecHealthCheckConfig struct {
	// +optional
	HealthCheckCodes []string `json:"healthCheckCodes,omitempty" tf:"health_check_codes"`
	// +optional
	HealthCheckConnectPort *int64 `json:"healthCheckConnectPort,omitempty" tf:"health_check_connect_port"`
	// +optional
	HealthCheckEnabled *bool `json:"healthCheckEnabled,omitempty" tf:"health_check_enabled"`
	// +optional
	HealthCheckHost *string `json:"healthCheckHost,omitempty" tf:"health_check_host"`
	// +optional
	HealthCheckHTTPVersion *string `json:"healthCheckHTTPVersion,omitempty" tf:"health_check_http_version"`
	// +optional
	HealthCheckInterval *int64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval"`
	// +optional
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method"`
	// +optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path"`
	// +optional
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty" tf:"health_check_protocol"`
	// +optional
	HealthCheckTimeout *int64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout"`
	// +optional
	HealthyThreshold *int64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold"`
	// +optional
	UnhealthyThreshold *int64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold"`
}

type ServerGroupSpecServers struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	ServerID *string `json:"serverID,omitempty" tf:"server_id"`
	// +optional
	ServerIP *string `json:"serverIP,omitempty" tf:"server_ip"`
	// +optional
	ServerType *string `json:"serverType,omitempty" tf:"server_type"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type ServerGroupSpecStickySessionConfig struct {
	// +optional
	Cookie *string `json:"cookie,omitempty" tf:"cookie"`
	// +optional
	CookieTimeout *int64 `json:"cookieTimeout,omitempty" tf:"cookie_timeout"`
	// +optional
	StickySessionEnabled *bool `json:"stickySessionEnabled,omitempty" tf:"sticky_session_enabled"`
	// +optional
	StickySessionType *string `json:"stickySessionType,omitempty" tf:"sticky_session_type"`
}

type ServerGroupSpec struct {
	State *ServerGroupSpecResource `json:"state,omitempty" tf:"-"`

	Resource ServerGroupSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServerGroupSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run"`
	// +optional
	HealthCheckConfig *ServerGroupSpecHealthCheckConfig `json:"healthCheckConfig,omitempty" tf:"health_check_config"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	ResourceGroupID *string `json:"resourceGroupID,omitempty" tf:"resource_group_id"`
	// +optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler"`
	// +optional
	ServerGroupName *string `json:"serverGroupName,omitempty" tf:"server_group_name"`
	// +optional
	Servers []ServerGroupSpecServers `json:"servers,omitempty" tf:"servers"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	StickySessionConfig *ServerGroupSpecStickySessionConfig `json:"stickySessionConfig,omitempty" tf:"sticky_session_config"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
}

type ServerGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServerGroupList is a list of ServerGroups
type ServerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServerGroup CRD objects
	Items []ServerGroup `json:"items,omitempty"`
}
