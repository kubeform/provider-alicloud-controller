/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Listener struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerSpec   `json:"spec,omitempty"`
	Status            ListenerStatus `json:"status,omitempty"`
}

type ListenerSpecAccessLogTracingConfig struct {
	// +optional
	TracingEnabled *bool `json:"tracingEnabled,omitempty" tf:"tracing_enabled"`
	// +optional
	TracingSample *int64 `json:"tracingSample,omitempty" tf:"tracing_sample"`
	// +optional
	TracingType *string `json:"tracingType,omitempty" tf:"tracing_type"`
}

type ListenerSpecAclConfigAclRelations struct {
	// +optional
	AclID *string `json:"aclID,omitempty" tf:"acl_id"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type ListenerSpecAclConfig struct {
	// +optional
	AclRelations []ListenerSpecAclConfigAclRelations `json:"aclRelations,omitempty" tf:"acl_relations"`
	// +optional
	AclType *string `json:"aclType,omitempty" tf:"acl_type"`
}

type ListenerSpecCertificates struct {
	// +optional
	CertificateID *string `json:"certificateID,omitempty" tf:"certificate_id"`
}

type ListenerSpecDefaultActionsForwardGroupConfigServerGroupTuples struct {
	ServerGroupID *string `json:"serverGroupID" tf:"server_group_id"`
}

type ListenerSpecDefaultActionsForwardGroupConfig struct {
	ServerGroupTuples []ListenerSpecDefaultActionsForwardGroupConfigServerGroupTuples `json:"serverGroupTuples" tf:"server_group_tuples"`
}

type ListenerSpecDefaultActions struct {
	ForwardGroupConfig *ListenerSpecDefaultActionsForwardGroupConfig `json:"forwardGroupConfig" tf:"forward_group_config"`
	Type               *string                                       `json:"type" tf:"type"`
}

type ListenerSpecQuicConfig struct {
	// +optional
	QuicListenerID *string `json:"quicListenerID,omitempty" tf:"quic_listener_id"`
	// +optional
	QuicUpgradeEnabled *bool `json:"quicUpgradeEnabled,omitempty" tf:"quic_upgrade_enabled"`
}

type ListenerSpecXforwardedForConfig struct {
	// +optional
	XforwardedforclientcertIssuerdnalias *string `json:"xforwardedforclientcertIssuerdnalias,omitempty" tf:"xforwardedforclientcert_issuerdnalias"`
	// +optional
	XforwardedforclientcertIssuerdnenabled *bool `json:"xforwardedforclientcertIssuerdnenabled,omitempty" tf:"xforwardedforclientcert_issuerdnenabled"`
	// +optional
	Xforwardedforclientcertclientverifyalias *string `json:"xforwardedforclientcertclientverifyalias,omitempty" tf:"xforwardedforclientcertclientverifyalias"`
	// +optional
	Xforwardedforclientcertclientverifyenabled *bool `json:"xforwardedforclientcertclientverifyenabled,omitempty" tf:"xforwardedforclientcertclientverifyenabled"`
	// +optional
	Xforwardedforclientcertfingerprintalias *string `json:"xforwardedforclientcertfingerprintalias,omitempty" tf:"xforwardedforclientcertfingerprintalias"`
	// +optional
	Xforwardedforclientcertfingerprintenabled *bool `json:"xforwardedforclientcertfingerprintenabled,omitempty" tf:"xforwardedforclientcertfingerprintenabled"`
	// +optional
	Xforwardedforclientcertsubjectdnalias *string `json:"xforwardedforclientcertsubjectdnalias,omitempty" tf:"xforwardedforclientcertsubjectdnalias"`
	// +optional
	Xforwardedforclientcertsubjectdnenabled *bool `json:"xforwardedforclientcertsubjectdnenabled,omitempty" tf:"xforwardedforclientcertsubjectdnenabled"`
	// +optional
	Xforwardedforclientsrcportenabled *bool `json:"xforwardedforclientsrcportenabled,omitempty" tf:"xforwardedforclientsrcportenabled"`
	// +optional
	Xforwardedforenabled *bool `json:"xforwardedforenabled,omitempty" tf:"xforwardedforenabled"`
	// +optional
	Xforwardedforprotoenabled *bool `json:"xforwardedforprotoenabled,omitempty" tf:"xforwardedforprotoenabled"`
	// +optional
	Xforwardedforslbidenabled *bool `json:"xforwardedforslbidenabled,omitempty" tf:"xforwardedforslbidenabled"`
	// +optional
	Xforwardedforslbportenabled *bool `json:"xforwardedforslbportenabled,omitempty" tf:"xforwardedforslbportenabled"`
}

type ListenerSpec struct {
	State *ListenerSpecResource `json:"state,omitempty" tf:"-"`

	Resource ListenerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ListenerSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessLogRecordCustomizedHeadersEnabled *bool `json:"accessLogRecordCustomizedHeadersEnabled,omitempty" tf:"access_log_record_customized_headers_enabled"`
	// +optional
	AccessLogTracingConfig *ListenerSpecAccessLogTracingConfig `json:"accessLogTracingConfig,omitempty" tf:"access_log_tracing_config"`
	// +optional
	AclConfig *ListenerSpecAclConfig `json:"aclConfig,omitempty" tf:"acl_config"`
	// +optional
	Certificates []ListenerSpecCertificates `json:"certificates,omitempty" tf:"certificates"`
	// +optional
	DefaultActions []ListenerSpecDefaultActions `json:"defaultActions,omitempty" tf:"default_actions"`
	// +optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run"`
	// +optional
	GzipEnabled *bool `json:"gzipEnabled,omitempty" tf:"gzip_enabled"`
	// +optional
	Http2Enabled *bool `json:"http2Enabled,omitempty" tf:"http2_enabled"`
	// +optional
	IdleTimeout *int64 `json:"idleTimeout,omitempty" tf:"idle_timeout"`
	// +optional
	ListenerDescription *string `json:"listenerDescription,omitempty" tf:"listener_description"`
	ListenerPort        *int64  `json:"listenerPort" tf:"listener_port"`
	ListenerProtocol    *string `json:"listenerProtocol" tf:"listener_protocol"`
	LoadBalancerID      *string `json:"loadBalancerID" tf:"load_balancer_id"`
	// +optional
	QuicConfig *ListenerSpecQuicConfig `json:"quicConfig,omitempty" tf:"quic_config"`
	// +optional
	RequestTimeout *int64 `json:"requestTimeout,omitempty" tf:"request_timeout"`
	// +optional
	SecurityPolicyID *string `json:"securityPolicyID,omitempty" tf:"security_policy_id"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	XforwardedForConfig *ListenerSpecXforwardedForConfig `json:"xforwardedForConfig,omitempty" tf:"xforwarded_for_config"`
}

type ListenerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ListenerList is a list of Listeners
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Listener CRD objects
	Items []Listener `json:"items,omitempty"`
}
