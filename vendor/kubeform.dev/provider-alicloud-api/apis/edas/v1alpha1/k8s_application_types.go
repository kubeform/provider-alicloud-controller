/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type K8sApplication struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              K8sApplicationSpec   `json:"spec,omitempty"`
	Status            K8sApplicationStatus `json:"status,omitempty"`
}

type K8sApplicationSpec struct {
	State *K8sApplicationSpecResource `json:"state,omitempty" tf:"-"`

	Resource K8sApplicationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type K8sApplicationSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ApplicationDescriotion *string `json:"applicationDescriotion,omitempty" tf:"application_descriotion"`
	ApplicationName        *string `json:"applicationName" tf:"application_name"`
	ClusterID              *string `json:"clusterID" tf:"cluster_id"`
	// +optional
	Command *string `json:"command,omitempty" tf:"command"`
	// +optional
	CommandArgs []string `json:"commandArgs,omitempty" tf:"command_args"`
	// +optional
	EdasContainerVersion *string `json:"edasContainerVersion,omitempty" tf:"edas_container_version"`
	// +optional
	Envs *map[string]string `json:"envs,omitempty" tf:"envs"`
	// +optional
	ImageURL *string `json:"imageURL,omitempty" tf:"image_url"`
	// +optional
	InternetSlbID *string `json:"internetSlbID,omitempty" tf:"internet_slb_id"`
	// +optional
	InternetSlbPort *int64 `json:"internetSlbPort,omitempty" tf:"internet_slb_port"`
	// +optional
	InternetSlbProtocol *string `json:"internetSlbProtocol,omitempty" tf:"internet_slb_protocol"`
	// +optional
	InternetTargetPort *int64 `json:"internetTargetPort,omitempty" tf:"internet_target_port"`
	// +optional
	Jdk *string `json:"jdk,omitempty" tf:"jdk"`
	// +optional
	LimitMCPU *int64 `json:"limitMCPU,omitempty" tf:"limit_m_cpu"`
	// +optional
	LimitMem *int64 `json:"limitMem,omitempty" tf:"limit_mem"`
	// +optional
	Liveness *string `json:"liveness,omitempty" tf:"liveness"`
	// +optional
	LocalVolume *string `json:"localVolume,omitempty" tf:"local_volume"`
	// +optional
	LogicalRegionID *string `json:"logicalRegionID,omitempty" tf:"logical_region_id"`
	// +optional
	MountDescs *string `json:"mountDescs,omitempty" tf:"mount_descs"`
	// +optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`
	// +optional
	NasID *string `json:"nasID,omitempty" tf:"nas_id"`
	// +optional
	PackageType *string `json:"packageType,omitempty" tf:"package_type"`
	// +optional
	PackageURL *string `json:"packageURL,omitempty" tf:"package_url"`
	// +optional
	PackageVersion *string `json:"packageVersion,omitempty" tf:"package_version"`
	// +optional
	PostStart *string `json:"postStart,omitempty" tf:"post_start"`
	// +optional
	PreStop *string `json:"preStop,omitempty" tf:"pre_stop"`
	// +optional
	Readiness *string `json:"readiness,omitempty" tf:"readiness"`
	// +optional
	Replicas *int64 `json:"replicas,omitempty" tf:"replicas"`
	// +optional
	RequestsMCPU *int64 `json:"requestsMCPU,omitempty" tf:"requests_m_cpu"`
	// +optional
	RequestsMem *int64 `json:"requestsMem,omitempty" tf:"requests_mem"`
	// +optional
	WebContainer *string `json:"webContainer,omitempty" tf:"web_container"`
}

type K8sApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// K8sApplicationList is a list of K8sApplications
type K8sApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of K8sApplication CRD objects
	Items []K8sApplication `json:"items,omitempty"`
}
