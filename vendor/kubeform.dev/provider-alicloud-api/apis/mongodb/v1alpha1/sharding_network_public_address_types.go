/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ShardingNetworkPublicAddress struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShardingNetworkPublicAddressSpec   `json:"spec,omitempty"`
	Status            ShardingNetworkPublicAddressStatus `json:"status,omitempty"`
}

type ShardingNetworkPublicAddressSpecNetworkAddress struct {
	// +optional
	ExpiredTime *string `json:"expiredTime,omitempty" tf:"expired_time"`
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	// +optional
	NetworkAddress *string `json:"networkAddress,omitempty" tf:"network_address"`
	// +optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type"`
	// +optional
	NodeID *string `json:"nodeID,omitempty" tf:"node_id"`
	// +optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type"`
	// +optional
	Port *string `json:"port,omitempty" tf:"port"`
	// +optional
	Role *string `json:"role,omitempty" tf:"role"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
}

type ShardingNetworkPublicAddressSpec struct {
	State *ShardingNetworkPublicAddressSpecResource `json:"state,omitempty" tf:"-"`

	Resource ShardingNetworkPublicAddressSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ShardingNetworkPublicAddressSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	DbInstanceID *string `json:"dbInstanceID" tf:"db_instance_id"`
	// +optional
	NetworkAddress []ShardingNetworkPublicAddressSpecNetworkAddress `json:"networkAddress,omitempty" tf:"network_address"`
	NodeID         *string                                          `json:"nodeID" tf:"node_id"`
}

type ShardingNetworkPublicAddressStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ShardingNetworkPublicAddressList is a list of ShardingNetworkPublicAddresss
type ShardingNetworkPublicAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ShardingNetworkPublicAddress CRD objects
	Items []ShardingNetworkPublicAddress `json:"items,omitempty"`
}
