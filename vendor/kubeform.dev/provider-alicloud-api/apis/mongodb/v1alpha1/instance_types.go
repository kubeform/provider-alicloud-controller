/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Instance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec,omitempty"`
	Status            InstanceStatus `json:"status,omitempty"`
}

type InstanceSpec struct {
	State *InstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type InstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccountPassword *string `json:"-" sensitive:"true" tf:"account_password"`
	// +optional
	BackupPeriod []string `json:"backupPeriod,omitempty" tf:"backup_period"`
	// +optional
	BackupTime        *string `json:"backupTime,omitempty" tf:"backup_time"`
	DbInstanceClass   *string `json:"dbInstanceClass" tf:"db_instance_class"`
	DbInstanceStorage *int64  `json:"dbInstanceStorage" tf:"db_instance_storage"`
	EngineVersion     *string `json:"engineVersion" tf:"engine_version"`
	// +optional
	InstanceChargeType *string `json:"instanceChargeType,omitempty" tf:"instance_charge_type"`
	// +optional
	KmsEncryptedPassword *string `json:"kmsEncryptedPassword,omitempty" tf:"kms_encrypted_password"`
	// +optional
	KmsEncryptionContext map[string]string `json:"kmsEncryptionContext,omitempty" tf:"kms_encryption_context"`
	// +optional
	MaintainEndTime *string `json:"maintainEndTime,omitempty" tf:"maintain_end_time"`
	// +optional
	MaintainStartTime *string `json:"maintainStartTime,omitempty" tf:"maintain_start_time"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Period *int64 `json:"period,omitempty" tf:"period"`
	// +optional
	ReplicaSetName *string `json:"replicaSetName,omitempty" tf:"replica_set_name"`
	// +optional
	ReplicationFactor *int64 `json:"replicationFactor,omitempty" tf:"replication_factor"`
	// +optional
	RetentionPeriod *int64 `json:"retentionPeriod,omitempty" tf:"retention_period"`
	// +optional
	SecurityGroupID *string `json:"securityGroupID,omitempty" tf:"security_group_id"`
	// +optional
	SecurityIPList []string `json:"securityIPList,omitempty" tf:"security_ip_list"`
	// +optional
	SslAction *string `json:"sslAction,omitempty" tf:"ssl_action"`
	// +optional
	SslStatus *string `json:"sslStatus,omitempty" tf:"ssl_status"`
	// +optional
	StorageEngine *string `json:"storageEngine,omitempty" tf:"storage_engine"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TdeStatus *string `json:"tdeStatus,omitempty" tf:"tde_status"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type InstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceList is a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Instance CRD objects
	Items []Instance `json:"items,omitempty"`
}
