/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AliasSpecRoutingConfig{}).Type1()):                                  AliasSpecRoutingConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CustomDomainSpecCertConfig{}).Type1()):                              CustomDomainSpecCertConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecCustomContainerConfig{}).Type1()):                       FunctionSpecCustomContainerConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfig{}).Type1()):          FunctionAsyncInvokeConfigSpecDestinationConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}).Type1()): FunctionAsyncInvokeConfigSpecDestinationConfigOnFailureCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}).Type1()): FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccessCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecLogConfig{}).Type1()):                                    ServiceSpecLogConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNasConfig{}).Type1()):                                    ServiceSpecNasConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecVpcConfig{}).Type1()):                                    ServiceSpecVpcConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AliasSpecRoutingConfig{}).Type1()):                                  AliasSpecRoutingConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CustomDomainSpecCertConfig{}).Type1()):                              CustomDomainSpecCertConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecCustomContainerConfig{}).Type1()):                       FunctionSpecCustomContainerConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfig{}).Type1()):          FunctionAsyncInvokeConfigSpecDestinationConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}).Type1()): FunctionAsyncInvokeConfigSpecDestinationConfigOnFailureCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}).Type1()): FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccessCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecLogConfig{}).Type1()):                                    ServiceSpecLogConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNasConfig{}).Type1()):                                    ServiceSpecNasConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecVpcConfig{}).Type1()):                                    ServiceSpecVpcConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AliasSpecRoutingConfigCodec struct {
}

func (AliasSpecRoutingConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AliasSpecRoutingConfig)(ptr) == nil
}

func (AliasSpecRoutingConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AliasSpecRoutingConfig)(ptr)
	var objs []AliasSpecRoutingConfig
	if obj != nil {
		objs = []AliasSpecRoutingConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AliasSpecRoutingConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AliasSpecRoutingConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AliasSpecRoutingConfig)(ptr) = AliasSpecRoutingConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AliasSpecRoutingConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AliasSpecRoutingConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AliasSpecRoutingConfig)(ptr) = objs[0]
			} else {
				*(*AliasSpecRoutingConfig)(ptr) = AliasSpecRoutingConfig{}
			}
		} else {
			*(*AliasSpecRoutingConfig)(ptr) = AliasSpecRoutingConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AliasSpecRoutingConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AliasSpecRoutingConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AliasSpecRoutingConfig)(ptr) = obj
		} else {
			*(*AliasSpecRoutingConfig)(ptr) = AliasSpecRoutingConfig{}
		}
	default:
		iter.ReportError("decode AliasSpecRoutingConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CustomDomainSpecCertConfigCodec struct {
}

func (CustomDomainSpecCertConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CustomDomainSpecCertConfig)(ptr) == nil
}

func (CustomDomainSpecCertConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CustomDomainSpecCertConfig)(ptr)
	var objs []CustomDomainSpecCertConfig
	if obj != nil {
		objs = []CustomDomainSpecCertConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CustomDomainSpecCertConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CustomDomainSpecCertConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CustomDomainSpecCertConfig)(ptr) = CustomDomainSpecCertConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CustomDomainSpecCertConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CustomDomainSpecCertConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CustomDomainSpecCertConfig)(ptr) = objs[0]
			} else {
				*(*CustomDomainSpecCertConfig)(ptr) = CustomDomainSpecCertConfig{}
			}
		} else {
			*(*CustomDomainSpecCertConfig)(ptr) = CustomDomainSpecCertConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj CustomDomainSpecCertConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CustomDomainSpecCertConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*CustomDomainSpecCertConfig)(ptr) = obj
		} else {
			*(*CustomDomainSpecCertConfig)(ptr) = CustomDomainSpecCertConfig{}
		}
	default:
		iter.ReportError("decode CustomDomainSpecCertConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FunctionSpecCustomContainerConfigCodec struct {
}

func (FunctionSpecCustomContainerConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FunctionSpecCustomContainerConfig)(ptr) == nil
}

func (FunctionSpecCustomContainerConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FunctionSpecCustomContainerConfig)(ptr)
	var objs []FunctionSpecCustomContainerConfig
	if obj != nil {
		objs = []FunctionSpecCustomContainerConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecCustomContainerConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FunctionSpecCustomContainerConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FunctionSpecCustomContainerConfig)(ptr) = FunctionSpecCustomContainerConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FunctionSpecCustomContainerConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecCustomContainerConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FunctionSpecCustomContainerConfig)(ptr) = objs[0]
			} else {
				*(*FunctionSpecCustomContainerConfig)(ptr) = FunctionSpecCustomContainerConfig{}
			}
		} else {
			*(*FunctionSpecCustomContainerConfig)(ptr) = FunctionSpecCustomContainerConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FunctionSpecCustomContainerConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecCustomContainerConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FunctionSpecCustomContainerConfig)(ptr) = obj
		} else {
			*(*FunctionSpecCustomContainerConfig)(ptr) = FunctionSpecCustomContainerConfig{}
		}
	default:
		iter.ReportError("decode FunctionSpecCustomContainerConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FunctionAsyncInvokeConfigSpecDestinationConfigCodec struct {
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) == nil
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr)
	var objs []FunctionAsyncInvokeConfigSpecDestinationConfig
	if obj != nil {
		objs = []FunctionAsyncInvokeConfigSpecDestinationConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FunctionAsyncInvokeConfigSpecDestinationConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) = objs[0]
			} else {
				*(*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfig{}
			}
		} else {
			*(*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FunctionAsyncInvokeConfigSpecDestinationConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) = obj
		} else {
			*(*FunctionAsyncInvokeConfigSpecDestinationConfig)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfig{}
		}
	default:
		iter.ReportError("decode FunctionAsyncInvokeConfigSpecDestinationConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FunctionAsyncInvokeConfigSpecDestinationConfigOnFailureCodec struct {
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigOnFailureCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) == nil
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigOnFailureCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr)
	var objs []FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure
	if obj != nil {
		objs = []FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigOnFailureCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) = objs[0]
			} else {
				*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}
			}
		} else {
			*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) = obj
		} else {
			*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure{}
		}
	default:
		iter.ReportError("decode FunctionAsyncInvokeConfigSpecDestinationConfigOnFailure", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccessCodec struct {
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccessCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) == nil
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccessCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr)
	var objs []FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess
	if obj != nil {
		objs = []FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccessCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) = objs[0]
			} else {
				*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}
			}
		} else {
			*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) = obj
		} else {
			*(*FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess)(ptr) = FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess{}
		}
	default:
		iter.ReportError("decode FunctionAsyncInvokeConfigSpecDestinationConfigOnSuccess", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecLogConfigCodec struct {
}

func (ServiceSpecLogConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecLogConfig)(ptr) == nil
}

func (ServiceSpecLogConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecLogConfig)(ptr)
	var objs []ServiceSpecLogConfig
	if obj != nil {
		objs = []ServiceSpecLogConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecLogConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecLogConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecLogConfig)(ptr) = ServiceSpecLogConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecLogConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecLogConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecLogConfig)(ptr) = objs[0]
			} else {
				*(*ServiceSpecLogConfig)(ptr) = ServiceSpecLogConfig{}
			}
		} else {
			*(*ServiceSpecLogConfig)(ptr) = ServiceSpecLogConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecLogConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecLogConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecLogConfig)(ptr) = obj
		} else {
			*(*ServiceSpecLogConfig)(ptr) = ServiceSpecLogConfig{}
		}
	default:
		iter.ReportError("decode ServiceSpecLogConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecNasConfigCodec struct {
}

func (ServiceSpecNasConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecNasConfig)(ptr) == nil
}

func (ServiceSpecNasConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecNasConfig)(ptr)
	var objs []ServiceSpecNasConfig
	if obj != nil {
		objs = []ServiceSpecNasConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNasConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecNasConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecNasConfig)(ptr) = ServiceSpecNasConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecNasConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNasConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecNasConfig)(ptr) = objs[0]
			} else {
				*(*ServiceSpecNasConfig)(ptr) = ServiceSpecNasConfig{}
			}
		} else {
			*(*ServiceSpecNasConfig)(ptr) = ServiceSpecNasConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecNasConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNasConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecNasConfig)(ptr) = obj
		} else {
			*(*ServiceSpecNasConfig)(ptr) = ServiceSpecNasConfig{}
		}
	default:
		iter.ReportError("decode ServiceSpecNasConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecVpcConfigCodec struct {
}

func (ServiceSpecVpcConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecVpcConfig)(ptr) == nil
}

func (ServiceSpecVpcConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecVpcConfig)(ptr)
	var objs []ServiceSpecVpcConfig
	if obj != nil {
		objs = []ServiceSpecVpcConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecVpcConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecVpcConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecVpcConfig)(ptr) = ServiceSpecVpcConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecVpcConfig)(ptr) = objs[0]
			} else {
				*(*ServiceSpecVpcConfig)(ptr) = ServiceSpecVpcConfig{}
			}
		} else {
			*(*ServiceSpecVpcConfig)(ptr) = ServiceSpecVpcConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecVpcConfig)(ptr) = obj
		} else {
			*(*ServiceSpecVpcConfig)(ptr) = ServiceSpecVpcConfig{}
		}
	default:
		iter.ReportError("decode ServiceSpecVpcConfig", "unexpected JSON type")
	}
}
