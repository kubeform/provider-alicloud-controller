/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Instance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec,omitempty"`
	Status            InstanceStatus `json:"status,omitempty"`
}

type InstanceSpecSlbConnAddrs struct {
	// +optional
	ConnAddr *string `json:"connAddr,omitempty" tf:"conn_addr"`
	// +optional
	ConnAddrPort *string `json:"connAddrPort,omitempty" tf:"conn_addr_port"`
	// +optional
	NetType *string `json:"netType,omitempty" tf:"net_type"`
}

type InstanceSpecUiProxyConnAddrs struct {
	// +optional
	ConnAddr *string `json:"connAddr,omitempty" tf:"conn_addr"`
	// +optional
	ConnAddrPort *string `json:"connAddrPort,omitempty" tf:"conn_addr_port"`
	// +optional
	NetType *string `json:"netType,omitempty" tf:"net_type"`
}

type InstanceSpecZkConnAddrs struct {
	// +optional
	ConnAddr *string `json:"connAddr,omitempty" tf:"conn_addr"`
	// +optional
	ConnAddrPort *string `json:"connAddrPort,omitempty" tf:"conn_addr_port"`
	// +optional
	NetType *string `json:"netType,omitempty" tf:"net_type"`
}

type InstanceSpec struct {
	State *InstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type InstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Account *string `json:"account,omitempty" tf:"account"`
	// +optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew"`
	// +optional
	ColdStorageSize *int64 `json:"coldStorageSize,omitempty" tf:"cold_storage_size"`
	// +optional
	CoreDiskSize *int64 `json:"coreDiskSize,omitempty" tf:"core_disk_size"`
	// +optional
	CoreDiskType *string `json:"coreDiskType,omitempty" tf:"core_disk_type"`
	// +optional
	CoreInstanceQuantity *int64  `json:"coreInstanceQuantity,omitempty" tf:"core_instance_quantity"`
	CoreInstanceType     *string `json:"coreInstanceType" tf:"core_instance_type"`
	// +optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection"`
	// +optional
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// +optional
	Engine        *string `json:"engine,omitempty" tf:"engine"`
	EngineVersion *string `json:"engineVersion" tf:"engine_version"`
	// +optional
	ImmediateDeleteFlag *bool `json:"immediateDeleteFlag,omitempty" tf:"immediate_delete_flag"`
	// +optional
	IpWhite *string `json:"ipWhite,omitempty" tf:"ip_white"`
	// +optional
	MaintainEndTime *string `json:"maintainEndTime,omitempty" tf:"maintain_end_time"`
	// +optional
	MaintainStartTime *string `json:"maintainStartTime,omitempty" tf:"maintain_start_time"`
	// +optional
	MasterInstanceQuantity *int64  `json:"masterInstanceQuantity,omitempty" tf:"master_instance_quantity"`
	MasterInstanceType     *string `json:"masterInstanceType" tf:"master_instance_type"`
	Name                   *string `json:"name" tf:"name"`
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	PayType *string `json:"payType,omitempty" tf:"pay_type"`
	// +optional
	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`
	// +optional
	SlbConnAddrs []InstanceSpecSlbConnAddrs `json:"slbConnAddrs,omitempty" tf:"slb_conn_addrs"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UiProxyConnAddrs []InstanceSpecUiProxyConnAddrs `json:"uiProxyConnAddrs,omitempty" tf:"ui_proxy_conn_addrs"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
	// +optional
	ZkConnAddrs []InstanceSpecZkConnAddrs `json:"zkConnAddrs,omitempty" tf:"zk_conn_addrs"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type InstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceList is a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Instance CRD objects
	Items []Instance `json:"items,omitempty"`
}
