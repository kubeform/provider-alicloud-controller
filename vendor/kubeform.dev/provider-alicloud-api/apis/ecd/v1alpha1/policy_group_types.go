/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PolicyGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyGroupSpec   `json:"spec,omitempty"`
	Status            PolicyGroupStatus `json:"status,omitempty"`
}

type PolicyGroupSpecAuthorizeAccessPolicyRules struct {
	// +optional
	CidrIP *string `json:"cidrIP,omitempty" tf:"cidr_ip"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
}

type PolicyGroupSpecAuthorizeSecurityPolicyRules struct {
	// +optional
	CidrIP *string `json:"cidrIP,omitempty" tf:"cidr_ip"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	IpProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
	// +optional
	PortRange *string `json:"portRange,omitempty" tf:"port_range"`
	// +optional
	Priority *string `json:"priority,omitempty" tf:"priority"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type PolicyGroupSpec struct {
	State *PolicyGroupSpecResource `json:"state,omitempty" tf:"-"`

	Resource PolicyGroupSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type PolicyGroupSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AuthorizeAccessPolicyRules []PolicyGroupSpecAuthorizeAccessPolicyRules `json:"authorizeAccessPolicyRules,omitempty" tf:"authorize_access_policy_rules"`
	// +optional
	AuthorizeSecurityPolicyRules []PolicyGroupSpecAuthorizeSecurityPolicyRules `json:"authorizeSecurityPolicyRules,omitempty" tf:"authorize_security_policy_rules"`
	// +optional
	Clipboard *string `json:"clipboard,omitempty" tf:"clipboard"`
	// +optional
	DomainList *string `json:"domainList,omitempty" tf:"domain_list"`
	// +optional
	HtmlAccess *string `json:"htmlAccess,omitempty" tf:"html_access"`
	// +optional
	HtmlFileTransfer *string `json:"htmlFileTransfer,omitempty" tf:"html_file_transfer"`
	// +optional
	LocalDrive *string `json:"localDrive,omitempty" tf:"local_drive"`
	// +optional
	PolicyGroupName *string `json:"policyGroupName,omitempty" tf:"policy_group_name"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	UsbRedirect *string `json:"usbRedirect,omitempty" tf:"usb_redirect"`
	// +optional
	VisualQuality *string `json:"visualQuality,omitempty" tf:"visual_quality"`
	// +optional
	Watermark *string `json:"watermark,omitempty" tf:"watermark"`
	// +optional
	WatermarkTransparency *string `json:"watermarkTransparency,omitempty" tf:"watermark_transparency"`
	// +optional
	WatermarkType *string `json:"watermarkType,omitempty" tf:"watermark_type"`
}

type PolicyGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PolicyGroupList is a list of PolicyGroups
type PolicyGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PolicyGroup CRD objects
	Items []PolicyGroup `json:"items,omitempty"`
}
