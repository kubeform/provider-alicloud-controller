/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type TemplateScratch struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TemplateScratchSpec   `json:"spec,omitempty"`
	Status            TemplateScratchStatus `json:"status,omitempty"`
}

type TemplateScratchSpecPreferenceParameters struct {
	ParameterKey   *string `json:"parameterKey" tf:"parameter_key"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type TemplateScratchSpecSourceResourceGroup struct {
	ResourceGroupID *string `json:"resourceGroupID" tf:"resource_group_id"`
	// +optional
	// +kubebuilder:validation:MaxItems=20
	ResourceTypeFilter []string `json:"resourceTypeFilter,omitempty" tf:"resource_type_filter"`
}

type TemplateScratchSpecSourceResources struct {
	ResourceID   *string `json:"resourceID" tf:"resource_id"`
	ResourceType *string `json:"resourceType" tf:"resource_type"`
}

type TemplateScratchSpecSourceTag struct {
	ResourceTags map[string]string `json:"resourceTags" tf:"resource_tags"`
	// +optional
	// +kubebuilder:validation:MaxItems=20
	ResourceTypeFilter []string `json:"resourceTypeFilter,omitempty" tf:"resource_type_filter"`
}

type TemplateScratchSpec struct {
	State *TemplateScratchSpecResource `json:"state,omitempty" tf:"-"`

	Resource TemplateScratchSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type TemplateScratchSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	ExecutionMode *string `json:"executionMode,omitempty" tf:"execution_mode"`
	// +optional
	LogicalIDStrategy *string `json:"logicalIDStrategy,omitempty" tf:"logical_id_strategy"`
	// +optional
	PreferenceParameters []TemplateScratchSpecPreferenceParameters `json:"preferenceParameters,omitempty" tf:"preference_parameters"`
	// +optional
	SourceResourceGroup *TemplateScratchSpecSourceResourceGroup `json:"sourceResourceGroup,omitempty" tf:"source_resource_group"`
	// +optional
	SourceResources []TemplateScratchSpecSourceResources `json:"sourceResources,omitempty" tf:"source_resources"`
	// +optional
	SourceTag *TemplateScratchSpecSourceTag `json:"sourceTag,omitempty" tf:"source_tag"`
	// +optional
	Status              *string `json:"status,omitempty" tf:"status"`
	TemplateScratchType *string `json:"templateScratchType" tf:"template_scratch_type"`
}

type TemplateScratchStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TemplateScratchList is a list of TemplateScratchs
type TemplateScratchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of TemplateScratch CRD objects
	Items []TemplateScratch `json:"items,omitempty"`
}
