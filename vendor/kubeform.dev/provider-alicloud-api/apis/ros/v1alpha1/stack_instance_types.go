/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StackInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackInstanceSpec   `json:"spec,omitempty"`
	Status            StackInstanceStatus `json:"status,omitempty"`
}

type StackInstanceSpecParameterOverrides struct {
	// +optional
	ParameterKey *string `json:"-" sensitive:"true" tf:"parameter_key"`
	// +optional
	ParameterValue *string `json:"-" sensitive:"true" tf:"parameter_value"`
}

type StackInstanceSpec struct {
	State *StackInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource StackInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type StackInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	OperationDescription *string `json:"operationDescription,omitempty" tf:"operation_description"`
	// +optional
	OperationPreferences *string `json:"operationPreferences,omitempty" tf:"operation_preferences"`
	// +optional
	ParameterOverrides []StackInstanceSpecParameterOverrides `json:"-" sensitive:"true" tf:"parameter_overrides"`
	// +optional
	RetainStacks           *bool   `json:"retainStacks,omitempty" tf:"retain_stacks"`
	StackGroupName         *string `json:"stackGroupName" tf:"stack_group_name"`
	StackInstanceAccountID *string `json:"stackInstanceAccountID" tf:"stack_instance_account_id"`
	StackInstanceRegionID  *string `json:"stackInstanceRegionID" tf:"stack_instance_region_id"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	TimeoutInMinutes *string `json:"timeoutInMinutes,omitempty" tf:"timeout_in_minutes"`
}

type StackInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StackInstanceList is a list of StackInstances
type StackInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StackInstance CRD objects
	Items []StackInstance `json:"items,omitempty"`
}
