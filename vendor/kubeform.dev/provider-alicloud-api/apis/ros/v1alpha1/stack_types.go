/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Stack struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackSpec   `json:"spec,omitempty"`
	Status            StackStatus `json:"status,omitempty"`
}

type StackSpecParameters struct {
	// +optional
	ParameterKey   *string `json:"parameterKey,omitempty" tf:"parameter_key"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type StackSpec struct {
	State *StackSpecResource `json:"state,omitempty" tf:"-"`

	Resource StackSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type StackSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CreateOption *string `json:"createOption,omitempty" tf:"create_option"`
	// +optional
	DeletionProtection *string `json:"deletionProtection,omitempty" tf:"deletion_protection"`
	// +optional
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback"`
	// +optional
	NotificationUrls []string `json:"notificationUrls,omitempty" tf:"notification_urls"`
	// +optional
	Parameters []StackSpecParameters `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	RamRoleName *string `json:"ramRoleName,omitempty" tf:"ram_role_name"`
	// +optional
	ReplacementOption *string `json:"replacementOption,omitempty" tf:"replacement_option"`
	// +optional
	RetainAllResources *bool `json:"retainAllResources,omitempty" tf:"retain_all_resources"`
	// +optional
	RetainResources []string `json:"retainResources,omitempty" tf:"retain_resources"`
	StackName       *string  `json:"stackName" tf:"stack_name"`
	// +optional
	StackPolicyBody *string `json:"stackPolicyBody,omitempty" tf:"stack_policy_body"`
	// +optional
	StackPolicyDuringUpdateBody *string `json:"stackPolicyDuringUpdateBody,omitempty" tf:"stack_policy_during_update_body"`
	// +optional
	StackPolicyDuringUpdateURL *string `json:"stackPolicyDuringUpdateURL,omitempty" tf:"stack_policy_during_update_url"`
	// +optional
	StackPolicyURL *string `json:"stackPolicyURL,omitempty" tf:"stack_policy_url"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body"`
	// +optional
	TemplateURL *string `json:"templateURL,omitempty" tf:"template_url"`
	// +optional
	TemplateVersion *string `json:"templateVersion,omitempty" tf:"template_version"`
	// +optional
	TimeoutInMinutes *int64 `json:"timeoutInMinutes,omitempty" tf:"timeout_in_minutes"`
	// +optional
	UsePreviousParameters *bool `json:"usePreviousParameters,omitempty" tf:"use_previous_parameters"`
}

type StackStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StackList is a list of Stacks
type StackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Stack CRD objects
	Items []Stack `json:"items,omitempty"`
}
