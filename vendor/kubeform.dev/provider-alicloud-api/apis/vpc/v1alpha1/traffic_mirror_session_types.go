/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type TrafficMirrorSession struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficMirrorSessionSpec   `json:"spec,omitempty"`
	Status            TrafficMirrorSessionStatus `json:"status,omitempty"`
}

type TrafficMirrorSessionSpec struct {
	State *TrafficMirrorSessionSpecResource `json:"state,omitempty" tf:"-"`

	Resource TrafficMirrorSessionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type TrafficMirrorSessionSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run"`
	// +optional
	Enabled  *bool  `json:"enabled,omitempty" tf:"enabled"`
	Priority *int64 `json:"priority" tf:"priority"`
	// +optional
	Status                *string `json:"status,omitempty" tf:"status"`
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterID" tf:"traffic_mirror_filter_id"`
	// +optional
	TrafficMirrorSessionDescription *string `json:"trafficMirrorSessionDescription,omitempty" tf:"traffic_mirror_session_description"`
	// +optional
	TrafficMirrorSessionName *string  `json:"trafficMirrorSessionName,omitempty" tf:"traffic_mirror_session_name"`
	TrafficMirrorSourceIDS   []string `json:"trafficMirrorSourceIDS" tf:"traffic_mirror_source_ids"`
	TrafficMirrorTargetID    *string  `json:"trafficMirrorTargetID" tf:"traffic_mirror_target_id"`
	TrafficMirrorTargetType  *string  `json:"trafficMirrorTargetType" tf:"traffic_mirror_target_type"`
	// +optional
	VirtualNetworkID *int64 `json:"virtualNetworkID,omitempty" tf:"virtual_network_id"`
}

type TrafficMirrorSessionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TrafficMirrorSessionList is a list of TrafficMirrorSessions
type TrafficMirrorSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of TrafficMirrorSession CRD objects
	Items []TrafficMirrorSession `json:"items,omitempty"`
}
