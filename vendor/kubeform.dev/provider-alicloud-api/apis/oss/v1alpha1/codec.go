/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecLogging{}).Type1()):                  BucketSpecLoggingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRefererConfig{}).Type1()):            BucketSpecRefererConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecServerSideEncryptionRule{}).Type1()): BucketSpecServerSideEncryptionRuleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecTransferAcceleration{}).Type1()):     BucketSpecTransferAccelerationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecVersioning{}).Type1()):               BucketSpecVersioningCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecWebsite{}).Type1()):                  BucketSpecWebsiteCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecLogging{}).Type1()):                  BucketSpecLoggingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRefererConfig{}).Type1()):            BucketSpecRefererConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecServerSideEncryptionRule{}).Type1()): BucketSpecServerSideEncryptionRuleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecTransferAcceleration{}).Type1()):     BucketSpecTransferAccelerationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecVersioning{}).Type1()):               BucketSpecVersioningCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecWebsite{}).Type1()):                  BucketSpecWebsiteCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type BucketSpecLoggingCodec struct {
}

func (BucketSpecLoggingCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecLogging)(ptr) == nil
}

func (BucketSpecLoggingCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecLogging)(ptr)
	var objs []BucketSpecLogging
	if obj != nil {
		objs = []BucketSpecLogging{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecLogging{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecLoggingCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecLogging)(ptr) = BucketSpecLogging{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecLogging

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecLogging{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecLogging)(ptr) = objs[0]
			} else {
				*(*BucketSpecLogging)(ptr) = BucketSpecLogging{}
			}
		} else {
			*(*BucketSpecLogging)(ptr) = BucketSpecLogging{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecLogging

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecLogging{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecLogging)(ptr) = obj
		} else {
			*(*BucketSpecLogging)(ptr) = BucketSpecLogging{}
		}
	default:
		iter.ReportError("decode BucketSpecLogging", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BucketSpecRefererConfigCodec struct {
}

func (BucketSpecRefererConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecRefererConfig)(ptr) == nil
}

func (BucketSpecRefererConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecRefererConfig)(ptr)
	var objs []BucketSpecRefererConfig
	if obj != nil {
		objs = []BucketSpecRefererConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRefererConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecRefererConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecRefererConfig)(ptr) = BucketSpecRefererConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecRefererConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRefererConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecRefererConfig)(ptr) = objs[0]
			} else {
				*(*BucketSpecRefererConfig)(ptr) = BucketSpecRefererConfig{}
			}
		} else {
			*(*BucketSpecRefererConfig)(ptr) = BucketSpecRefererConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecRefererConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRefererConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecRefererConfig)(ptr) = obj
		} else {
			*(*BucketSpecRefererConfig)(ptr) = BucketSpecRefererConfig{}
		}
	default:
		iter.ReportError("decode BucketSpecRefererConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BucketSpecServerSideEncryptionRuleCodec struct {
}

func (BucketSpecServerSideEncryptionRuleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecServerSideEncryptionRule)(ptr) == nil
}

func (BucketSpecServerSideEncryptionRuleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecServerSideEncryptionRule)(ptr)
	var objs []BucketSpecServerSideEncryptionRule
	if obj != nil {
		objs = []BucketSpecServerSideEncryptionRule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecServerSideEncryptionRule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecServerSideEncryptionRuleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecServerSideEncryptionRule)(ptr) = BucketSpecServerSideEncryptionRule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecServerSideEncryptionRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecServerSideEncryptionRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecServerSideEncryptionRule)(ptr) = objs[0]
			} else {
				*(*BucketSpecServerSideEncryptionRule)(ptr) = BucketSpecServerSideEncryptionRule{}
			}
		} else {
			*(*BucketSpecServerSideEncryptionRule)(ptr) = BucketSpecServerSideEncryptionRule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecServerSideEncryptionRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecServerSideEncryptionRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecServerSideEncryptionRule)(ptr) = obj
		} else {
			*(*BucketSpecServerSideEncryptionRule)(ptr) = BucketSpecServerSideEncryptionRule{}
		}
	default:
		iter.ReportError("decode BucketSpecServerSideEncryptionRule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BucketSpecTransferAccelerationCodec struct {
}

func (BucketSpecTransferAccelerationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecTransferAcceleration)(ptr) == nil
}

func (BucketSpecTransferAccelerationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecTransferAcceleration)(ptr)
	var objs []BucketSpecTransferAcceleration
	if obj != nil {
		objs = []BucketSpecTransferAcceleration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecTransferAcceleration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecTransferAccelerationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecTransferAcceleration)(ptr) = BucketSpecTransferAcceleration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecTransferAcceleration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecTransferAcceleration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecTransferAcceleration)(ptr) = objs[0]
			} else {
				*(*BucketSpecTransferAcceleration)(ptr) = BucketSpecTransferAcceleration{}
			}
		} else {
			*(*BucketSpecTransferAcceleration)(ptr) = BucketSpecTransferAcceleration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecTransferAcceleration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecTransferAcceleration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecTransferAcceleration)(ptr) = obj
		} else {
			*(*BucketSpecTransferAcceleration)(ptr) = BucketSpecTransferAcceleration{}
		}
	default:
		iter.ReportError("decode BucketSpecTransferAcceleration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BucketSpecVersioningCodec struct {
}

func (BucketSpecVersioningCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecVersioning)(ptr) == nil
}

func (BucketSpecVersioningCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecVersioning)(ptr)
	var objs []BucketSpecVersioning
	if obj != nil {
		objs = []BucketSpecVersioning{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecVersioning{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecVersioningCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecVersioning)(ptr) = BucketSpecVersioning{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecVersioning

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecVersioning{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecVersioning)(ptr) = objs[0]
			} else {
				*(*BucketSpecVersioning)(ptr) = BucketSpecVersioning{}
			}
		} else {
			*(*BucketSpecVersioning)(ptr) = BucketSpecVersioning{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecVersioning

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecVersioning{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecVersioning)(ptr) = obj
		} else {
			*(*BucketSpecVersioning)(ptr) = BucketSpecVersioning{}
		}
	default:
		iter.ReportError("decode BucketSpecVersioning", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BucketSpecWebsiteCodec struct {
}

func (BucketSpecWebsiteCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecWebsite)(ptr) == nil
}

func (BucketSpecWebsiteCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecWebsite)(ptr)
	var objs []BucketSpecWebsite
	if obj != nil {
		objs = []BucketSpecWebsite{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecWebsite{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecWebsiteCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecWebsite)(ptr) = BucketSpecWebsite{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecWebsite

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecWebsite{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecWebsite)(ptr) = objs[0]
			} else {
				*(*BucketSpecWebsite)(ptr) = BucketSpecWebsite{}
			}
		} else {
			*(*BucketSpecWebsite)(ptr) = BucketSpecWebsite{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecWebsite

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecWebsite{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecWebsite)(ptr) = obj
		} else {
			*(*BucketSpecWebsite)(ptr) = BucketSpecWebsite{}
		}
	default:
		iter.ReportError("decode BucketSpecWebsite", "unexpected JSON type")
	}
}
