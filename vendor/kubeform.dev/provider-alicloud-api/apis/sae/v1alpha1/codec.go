/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}).Type1()): ApplicationScalingRuleSpecScalingRuleMetricScaleDownRulesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}).Type1()):   ApplicationScalingRuleSpecScalingRuleMetricScaleUpRulesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IngressSpecDefaultRule{}).Type1()):                                    IngressSpecDefaultRuleCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}).Type1()): ApplicationScalingRuleSpecScalingRuleMetricScaleDownRulesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}).Type1()):   ApplicationScalingRuleSpecScalingRuleMetricScaleUpRulesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IngressSpecDefaultRule{}).Type1()):                                    IngressSpecDefaultRuleCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ApplicationScalingRuleSpecScalingRuleMetricScaleDownRulesCodec struct {
}

func (ApplicationScalingRuleSpecScalingRuleMetricScaleDownRulesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) == nil
}

func (ApplicationScalingRuleSpecScalingRuleMetricScaleDownRulesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr)
	var objs []ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules
	if obj != nil {
		objs = []ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApplicationScalingRuleSpecScalingRuleMetricScaleDownRulesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) = objs[0]
			} else {
				*(*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}
			}
		} else {
			*(*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) = obj
		} else {
			*(*ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules{}
		}
	default:
		iter.ReportError("decode ApplicationScalingRuleSpecScalingRuleMetricScaleDownRules", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ApplicationScalingRuleSpecScalingRuleMetricScaleUpRulesCodec struct {
}

func (ApplicationScalingRuleSpecScalingRuleMetricScaleUpRulesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) == nil
}

func (ApplicationScalingRuleSpecScalingRuleMetricScaleUpRulesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr)
	var objs []ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules
	if obj != nil {
		objs = []ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApplicationScalingRuleSpecScalingRuleMetricScaleUpRulesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) = objs[0]
			} else {
				*(*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}
			}
		} else {
			*(*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) = obj
		} else {
			*(*ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules)(ptr) = ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules{}
		}
	default:
		iter.ReportError("decode ApplicationScalingRuleSpecScalingRuleMetricScaleUpRules", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type IngressSpecDefaultRuleCodec struct {
}

func (IngressSpecDefaultRuleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*IngressSpecDefaultRule)(ptr) == nil
}

func (IngressSpecDefaultRuleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*IngressSpecDefaultRule)(ptr)
	var objs []IngressSpecDefaultRule
	if obj != nil {
		objs = []IngressSpecDefaultRule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IngressSpecDefaultRule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (IngressSpecDefaultRuleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*IngressSpecDefaultRule)(ptr) = IngressSpecDefaultRule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []IngressSpecDefaultRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IngressSpecDefaultRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*IngressSpecDefaultRule)(ptr) = objs[0]
			} else {
				*(*IngressSpecDefaultRule)(ptr) = IngressSpecDefaultRule{}
			}
		} else {
			*(*IngressSpecDefaultRule)(ptr) = IngressSpecDefaultRule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj IngressSpecDefaultRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IngressSpecDefaultRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*IngressSpecDefaultRule)(ptr) = obj
		} else {
			*(*IngressSpecDefaultRule)(ptr) = IngressSpecDefaultRule{}
		}
	default:
		iter.ReportError("decode IngressSpecDefaultRule", "unexpected JSON type")
	}
}
