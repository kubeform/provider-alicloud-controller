/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Application struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSpec   `json:"spec,omitempty"`
	Status            ApplicationStatus `json:"status,omitempty"`
}

type ApplicationSpecInternet struct {
	// +optional
	HttpsCertID *string `json:"httpsCertID,omitempty" tf:"https_cert_id"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	TargetPort *int64 `json:"targetPort,omitempty" tf:"target_port"`
}

type ApplicationSpecIntranet struct {
	// +optional
	HttpsCertID *string `json:"httpsCertID,omitempty" tf:"https_cert_id"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	TargetPort *int64 `json:"targetPort,omitempty" tf:"target_port"`
}

type ApplicationSpec struct {
	State *ApplicationSpecResource `json:"state,omitempty" tf:"-"`

	Resource ApplicationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ApplicationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AppDescription *string `json:"appDescription,omitempty" tf:"app_description"`
	AppName        *string `json:"appName" tf:"app_name"`
	// +optional
	AutoConfig *bool `json:"autoConfig,omitempty" tf:"auto_config"`
	// +optional
	AutoEnableApplicationScalingRule *bool `json:"autoEnableApplicationScalingRule,omitempty" tf:"auto_enable_application_scaling_rule"`
	// +optional
	BatchWaitTime *int64 `json:"batchWaitTime,omitempty" tf:"batch_wait_time"`
	// +optional
	ChangeOrderDesc *string `json:"changeOrderDesc,omitempty" tf:"change_order_desc"`
	// +optional
	Command *string `json:"command,omitempty" tf:"command"`
	// +optional
	CommandArgs *string `json:"commandArgs,omitempty" tf:"command_args"`
	// +optional
	ConfigMapMountDesc *string `json:"configMapMountDesc,omitempty" tf:"config_map_mount_desc"`
	// +optional
	Cpu *int64 `json:"cpu,omitempty" tf:"cpu"`
	// +optional
	CustomHostAlias *string `json:"customHostAlias,omitempty" tf:"custom_host_alias"`
	// +optional
	Deploy *bool `json:"deploy,omitempty" tf:"deploy"`
	// +optional
	EdasContainerVersion *string `json:"edasContainerVersion,omitempty" tf:"edas_container_version"`
	// +optional
	EnableAhas *string `json:"enableAhas,omitempty" tf:"enable_ahas"`
	// +optional
	EnableGreyTagRoute *bool `json:"enableGreyTagRoute,omitempty" tf:"enable_grey_tag_route"`
	// +optional
	Envs *string `json:"envs,omitempty" tf:"envs"`
	// +optional
	ImageURL *string `json:"imageURL,omitempty" tf:"image_url"`
	// +optional
	Internet []ApplicationSpecInternet `json:"internet,omitempty" tf:"internet"`
	// +optional
	InternetIP *string `json:"internetIP,omitempty" tf:"internet_ip"`
	// +optional
	InternetSlbID *string `json:"internetSlbID,omitempty" tf:"internet_slb_id"`
	// +optional
	Intranet []ApplicationSpecIntranet `json:"intranet,omitempty" tf:"intranet"`
	// +optional
	IntranetIP *string `json:"intranetIP,omitempty" tf:"intranet_ip"`
	// +optional
	IntranetSlbID *string `json:"intranetSlbID,omitempty" tf:"intranet_slb_id"`
	// +optional
	JarStartArgs *string `json:"jarStartArgs,omitempty" tf:"jar_start_args"`
	// +optional
	JarStartOptions *string `json:"jarStartOptions,omitempty" tf:"jar_start_options"`
	// +optional
	Jdk *string `json:"jdk,omitempty" tf:"jdk"`
	// +optional
	Liveness *string `json:"liveness,omitempty" tf:"liveness"`
	// +optional
	Memory *int64 `json:"memory,omitempty" tf:"memory"`
	// +optional
	MinReadyInstances *int64 `json:"minReadyInstances,omitempty" tf:"min_ready_instances"`
	// +optional
	MountDesc *string `json:"mountDesc,omitempty" tf:"mount_desc"`
	// +optional
	MountHost *string `json:"mountHost,omitempty" tf:"mount_host"`
	// +optional
	NamespaceID *string `json:"namespaceID,omitempty" tf:"namespace_id"`
	// +optional
	NasID *string `json:"nasID,omitempty" tf:"nas_id"`
	// +optional
	OssAkID *string `json:"-" sensitive:"true" tf:"oss_ak_id"`
	// +optional
	OssAkSecret *string `json:"-" sensitive:"true" tf:"oss_ak_secret"`
	// +optional
	OssMountDescs *string `json:"ossMountDescs,omitempty" tf:"oss_mount_descs"`
	PackageType   *string `json:"packageType" tf:"package_type"`
	// +optional
	PackageURL *string `json:"packageURL,omitempty" tf:"package_url"`
	// +optional
	PackageVersion *string `json:"packageVersion,omitempty" tf:"package_version"`
	// +optional
	PhpArmsConfigLocation *string `json:"phpArmsConfigLocation,omitempty" tf:"php_arms_config_location"`
	// +optional
	PhpConfig *string `json:"phpConfig,omitempty" tf:"php_config"`
	// +optional
	PhpConfigLocation *string `json:"phpConfigLocation,omitempty" tf:"php_config_location"`
	// +optional
	PostStart *string `json:"postStart,omitempty" tf:"post_start"`
	// +optional
	PreStop *string `json:"preStop,omitempty" tf:"pre_stop"`
	// +optional
	Readiness *string `json:"readiness,omitempty" tf:"readiness"`
	Replicas  *int64  `json:"replicas" tf:"replicas"`
	// +optional
	SecurityGroupID *string `json:"securityGroupID,omitempty" tf:"security_group_id"`
	// +optional
	SlsConfigs *string `json:"slsConfigs,omitempty" tf:"sls_configs"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty" tf:"termination_grace_period_seconds"`
	// +optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`
	// +optional
	TomcatConfig *string `json:"tomcatConfig,omitempty" tf:"tomcat_config"`
	// +optional
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy"`
	// +optional
	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
	// +optional
	VswitchID *string `json:"vswitchID,omitempty" tf:"vswitch_id"`
	// +optional
	WarStartOptions *string `json:"warStartOptions,omitempty" tf:"war_start_options"`
	// +optional
	WebContainer *string `json:"webContainer,omitempty" tf:"web_container"`
}

type ApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ApplicationList is a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Application CRD objects
	Items []Application `json:"items,omitempty"`
}
